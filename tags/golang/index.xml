<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on philipjkim</title>
    <link>https://philipjkim.github.io/tags/golang/</link>
    <description>Recent content in Golang on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 26 Aug 2025 19:34:33 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 패키지 구조 컨벤션: Standard Go Project Layout</title>
      <link>https://philipjkim.github.io/posts/20250826-go-package-conventions/</link>
      <pubDate>Tue, 26 Aug 2025 19:34:33 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250826-go-package-conventions/</guid>
      <description>&lt;p&gt;Go 언어 프로젝트의 패키지 구조는 일반적으로 몇 가지 컨벤션을 따르며, &lt;code&gt;pkg&lt;/code&gt;와 &lt;code&gt;internal&lt;/code&gt; 디렉토리는 그중 핵심적인 역할을 합니다. 단순히 코드를 기능별로 묶는 것을 넘어, 패키지의 &lt;strong&gt;가시성(visibility)과 의존성 방향을 명확히&lt;/strong&gt; 하여 프로젝트의 유지보수성을 높이는 것이 목적입니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 Gemini 2.5 Pro 모델이 제 Go package convention 에 대한 질문에 답변한 내용입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Go 커뮤니티에서 널리 통용되는 표준 프로젝트 레이아웃(&lt;a href=&#34;https://github.com/golang-standards/project-layout&#34;&gt;golang-standards/project-layout&lt;/a&gt;)을 기반으로 각 디렉토리의 역할과 베스트 프랙티스를 자세히 설명해 드리겠습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;-pkg-디렉토리-공개-라이브러리-public-library&#34;&gt;📦 &lt;code&gt;pkg&lt;/code&gt; 디렉토리: 공개 라이브러리 (Public Library)&lt;/h2&gt;&#xA;&lt;p&gt;말씀하신 대로, &lt;strong&gt;&lt;code&gt;pkg&lt;/code&gt; 디렉토리&lt;/strong&gt;에는 &lt;strong&gt;외부 프로젝트에서 가져다 쓸 수 있는(importable) 공개 라이브러리 성격의 코드&lt;/strong&gt;를 위치시킵니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 언어의 풍부한 표준 라이브러리 (Batteries Included)</title>
      <link>https://philipjkim.github.io/posts/20250819-go-batteries-included/</link>
      <pubDate>Tue, 19 Aug 2025 12:55:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250819-go-batteries-included/</guid>
      <description>&lt;p&gt;Go 언어의 특징을 소개하는 시리즈의 세 번째 글입니다. 이전 글에서는 Go의 &lt;strong&gt;단순성&lt;/strong&gt;과 &lt;strong&gt;동시성&lt;/strong&gt;에 대해 다루었습니다. 이번에는 Go가 &amp;lsquo;건전지 포함(Batteries Included)&amp;rsquo; 철학을 어떻게 구현하고 있는지, 즉 강력하고 풍부한 표준 라이브러리에 대해 이야기하고자 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(이 글은 Gemini 2.5 Pro 모델에 의해 작성되었으며, 커버하고 있는 세부 항목들과 글의 톤/매너에 대한 요구사항들은 제가 정리해서 Gemini 에 요청했습니다. 내용에 잘못된 부분이 있을 수 있는데, 그런 경우 잘못된 정보에 대한 댓글을 남겨주시면 감사하겠습니다.)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;go-창시자들의-철학-실용성과-안정성&#34;&gt;Go 창시자들의 철학: 실용성과 안정성&lt;/h2&gt;&#xA;&lt;p&gt;Go 언어의 설계 철학은 구글의 대규모 프로덕션 환경에서 마주친 문제들을 해결하는 데서 출발했습니다. 언어의 창시자들인 &lt;strong&gt;로버트 그리즈머(Robert Griesemer)&lt;/strong&gt;, &lt;strong&gt;롭 파이크(Rob Pike)&lt;/strong&gt;, &lt;strong&gt;켄 톰슨(Ken Thompson)&lt;/strong&gt; 은 복잡한 외부 의존성 없이도 당장 현장에서 필요한 대부분의 기능을 수행할 수 있는 언어를 원했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 의 동시성 (concurrency) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250811-concurrency-of-go/</link>
      <pubDate>Mon, 11 Aug 2025 13:39:08 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-concurrency-of-go/</guid>
      <description>&lt;p&gt;현대의 컴퓨터는 멀티코어 프로세서를 기반으로 작동하며, 동시성(Concurrency)은 더 이상 선택이 아닌 필수적인 프로그래밍 패러다임이 되었습니다. Go 언어는 설계 초기부터 동시성을 핵심 기능으로 채택했으며, 전통적인 스레드-락(Thread-Lock) 모델의 복잡성을 해결하기 위한 명확한 철학을 제시합니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 동시성 모델이 어떠한 철학 위에서 탄생했는지 살펴보고, 다른 주류 언어들과의 접근 방식을 비교 분석합니다. 이를 통해 Go의 동시성이 갖는 장점과 현실적인 트레이드오프를 가감 없이 설명하고자 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(이 글은 Gemini 2.5 Pro 모델에 의해 작성되었으며, 커버하고 있는 세부 항목들과 글의 톤/매너에 대한 요구사항들은 제가 정리해서 Gemini 에 요청했습니다. 내용에 잘못된 부분이 있을 수 있는데, 그런 경우 잘못된 정보에 대한 댓글을 남겨주시면 감사하겠습니다.)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 의 단순함(simplicity) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</link>
      <pubDate>Thu, 07 Aug 2025 08:08:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</guid>
      <description>&lt;p&gt;Go 언어의 철학을 관통하는 가장 중요한 단어는 바로 &lt;strong&gt;&amp;lsquo;단순함(Simplicity)&amp;rsquo;&lt;/strong&gt; 입니다. 이는 단순히 기능이 적다는 의미가 아니라, 복잡한 문제를 명료하고 예측 가능하게 해결하기 위한 의도적인 설계 철학입니다. Go의 창시자 중 한 명인 롭 파이크(Rob Pike)는 &amp;ldquo;단순함은 복잡하다(Simplicity is Complicated)&amp;ldquo;고 말했습니다. 최고의 단순함을 성취하기 위해 수많은 고민과 트레이드오프가 있었음을 암시하는 말이죠.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 핵심 철학인 &amp;lsquo;단순함&amp;rsquo;이 코드 수준에서 어떻게 드러나는지, 그리고 이 철학이 왜 어떤 개발자에게는 최고의 장점이 되고 다른 개발자에게는 답답한 단점으로 여겨지는지 가감 없이 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 는 왜 LLM 기반 Vibe-Coding에 적합한 언어인가?</title>
      <link>https://philipjkim.github.io/posts/20250731-golang-for-vibe-coding/</link>
      <pubDate>Thu, 31 Jul 2025 11:55:18 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250731-golang-for-vibe-coding/</guid>
      <description>&lt;p&gt;이 글에서는 LLM을 활용한 Vibe-Coding 시대에 Go 언어가 가지는 장점들을 알아봅니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(영문 글을 번역했던 블로그 대부분의 포스트와는 달리 이 글은 제가 초안을 작성하고, Gemini 의 도움을 받아 개선된 originality 가 있는 글입니다.)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-강력한-정적-타입-시스템과-컴파일-단계&#34;&gt;1. 강력한 정적 타입 시스템과 컴파일 단계&lt;/h2&gt;&#xA;&lt;p&gt;Go는 정적 타입 언어이며 컴파일을 통해 실행 파일을 만듭니다. 이는 코드가 실행되기 전, 즉 컴파일 시점에 타입 불일치, 함수 인자 오류, 존재하지 않는 변수 참조 등 수많은 오류를 미리 잡아낼 수 있음을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Go의 동시성: 심층 분석</title>
      <link>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</link>
      <pubDate>Mon, 07 Jul 2025 13:43:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&#34;&gt;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;h3 id=&#34;동시성이란-무엇인가&#34;&gt;동시성이란 무엇인가?&lt;/h3&gt;&#xA;&lt;p&gt;동시성은 독립적인 활동들의 구성으로 느슨하게 정의될 수 있습니다. 반드시 병렬 실행을 필요로 하지는 않지만, 여러 태스크가 겹치는 시간 동안 진행되도록 허용합니다. 컴퓨팅의 맥락에서 동시 프로그래밍은 여러 태스크가 실행에서 &lt;strong&gt;인터리브(interleave - 여러 대상을 번갈아 가며 실행하거나 배치)&lt;/strong&gt; 될 수 있도록 보장하며, 이는 특히 I/O 바운드 태스크나 수많은 이벤트를 동시에 처리해야 하는 애플리케이션(예: 웹 서버에서 여러 클라이언트 연결 처리)에서 중요합니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;동시성-vs-병렬성&#34;&gt;동시성 vs. 병렬성&lt;/h3&gt;&#xA;&lt;p&gt;비공식적인 대화에서 종종 혼용되지만, 동시성과 병렬성은 다른 개념입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Golang 공동 창시자 Rob Pike: Go가 잘한 것과 잘못한 것</title>
      <link>https://philipjkim.github.io/posts/20250702-what-go-got-right-and-wrong/</link>
      <pubDate>Wed, 02 Jul 2025 10:28:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250702-what-go-got-right-and-wrong/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://thenewstack.io/golang-co-creator-rob-pike-what-go-got-right-and-wrong/&#34;&gt;https://thenewstack.io/golang-co-creator-rob-pike-what-go-got-right-and-wrong/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gophercon.com.au/&#34;&gt;GopherCon AU&lt;/a&gt; 참석자들은 Go의 사양이 처음 작성된 도시인 호주 시드니에서 특별한 대접을 받았습니다. Go의 공동 설계자 중 한 명인 &lt;a href=&#34;https://github.com/robpike&#34;&gt;Rob Pike&lt;/a&gt;는 Go 프로그래밍 언어가 출시된 지 14주년이 되는 날을 기념하며 “무엇을 제대로 했고, 무엇을 잘못했는지” 돌아보는 강연을 했습니다.&lt;/p&gt;&#xA;&lt;p&gt;Pike는 2009년 11월 10일 웹사이트가 처음 공개되던 순간을 기억하며 “세상이 우리가 무엇을 해왔는지 알게 되었다”고 말했습니다.&lt;/p&gt;&#xA;&lt;p&gt;“14년이 지난 지금, 돌아볼 것이 많습니다.”라고 Pike는 청중에게 말하며 “더 큰 교훈들”을 탐구하겠다고 약속했습니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
