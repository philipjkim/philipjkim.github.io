<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on philipjkim</title>
    <link>https://philipjkim.github.io/tags/research/</link>
    <description>Recent content in Research on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Sep 2025 13:02:51 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>개발 팁: 읽기 쉽고 확장 가능한 if 구문 리팩토링 가이드</title>
      <link>https://philipjkim.github.io/posts/20250905-how-to-replace-if-statements/</link>
      <pubDate>Fri, 05 Sep 2025 13:02:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250905-how-to-replace-if-statements/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/20250905_refactoring_if.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;프로그래밍에서 if 를 사용하는 조건부 로직을 대체할 수 있는 방법들에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;모든 예제 코드는 Go 로 작성되었으나, 다른 프로그래밍 언어에 공통적으로 적용할 수 있는 내용들입니다.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-조건문의-확산과-기술-부채의-축적&#34;&gt;서론: 조건문의 확산과 기술 부채의 축적&lt;/h2&gt;&#xA;&lt;p&gt;소프트웨어 개발에서 &lt;code&gt;if-else&lt;/code&gt; 문은 제어 흐름을 구성하는 가장 기본적인 도구 중 하나입니다. 그러나 이 근본적인 구조는 종종 오용되어, 시간이 지남에 따라 시스템의 건강을 심각하게 해치는 주범이 되기도 합니다. 복잡하게 중첩되거나 끝없이 이어지는 &lt;code&gt;if-else&lt;/code&gt; 체인은 가독성을 저해하고 유지보수를 악몽으로 만들며, 이는 소프트웨어 공학에서 &amp;ldquo;코드 스멜(code smell)&amp;ldquo;이라 불리는 명백한 위험 신호입니다. [1, 2, 3]&lt;/p&gt;</description>
    </item>
    <item>
      <title>깊은 모듈 대 작은 함수: 오스터하우트와 마틴의 소프트웨어 설계 철학 및 커뮤니티 수용에 대한 비교 분석</title>
      <link>https://philipjkim.github.io/posts/20250901-ousterhout-vs-martin/</link>
      <pubDate>Mon, 01 Sep 2025 15:49:15 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250901-ousterhout-vs-martin/</guid>
      <description>&lt;p&gt;본 연구 보고서는 오스터하우트와 마틴이 제시하는 두 가지 상이한 소프트웨어 설계 철학을 심층적으로 비교 분석하는 것을 목표로 한다. 두 철학은 단순히 기법의 차이를 넘어, 문제의 정의 자체에서부터 근본적인 시각차를 드러낸다. 오스터하우트는 시스템적 &lt;strong&gt;복잡성&lt;/strong&gt;을 주된 적으로 간주하며, 이를 인지 부하(cognitive load)와 변경 증폭(change amplification)이라는 구체적인 지표로 측정한다.[1] 반면, 마틴은 코드의 지역적 &lt;strong&gt;불명확성&lt;/strong&gt;을 가장 경계해야 할 대상으로 보며, 이를 가독성(readability)과 이해 용이성(ease of comprehension)으로 평가한다.[2, 3]&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Ousterhout 와 Martin 의 소프트웨어 설계 철학의 공통점, 차이점 및 충돌 부분에 대한 여러 의견과 관점들에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>과학: 현재의 지구 온난화: &#39;자연적 기후 주기&#39; 가설에 대한 평가</title>
      <link>https://philipjkim.github.io/posts/20250826-cause-of-global-warming/</link>
      <pubDate>Tue, 26 Aug 2025 18:41:38 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250826-cause-of-global-warming/</guid>
      <description>&lt;p&gt;&lt;em&gt;지구 온난화 원인에 대한 &amp;lsquo;자연적 기후 주기&amp;rsquo; 가설이 신빙성이 있는지에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;지구의 기후는 인류 문명이 존재하기 훨씬 이전부터 끊임없이 변화해 왔다는 것은 과학적으로 명백한 사실이다.[1, 2, 3] 과거 지구는 빙하기와 간빙기를 오가며 극적인 기온 변화를 겪었다. 이러한 역사적 사실에 근거하여, 일부에서는 현재 관측되는 급격한 지구 온도 상승이 인간의 산업 활동에 따른 온실가스 배출 때문이 아니라, 지구 본연의 장기적인 자연 순환 주기의 일부일 뿐이라는 주장을 제기한다.[4, 5] 이 주장은 현재의 온난화가 인간이 통제할 수 없는 거대한 자연의 흐름이며, 따라서 인간의 노력이 무의미할 수 있다는 함의를 담고 있다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
