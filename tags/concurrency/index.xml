<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on philipjkim</title>
    <link>https://philipjkim.github.io/tags/concurrency/</link>
    <description>Recent content in Concurrency on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Jul 2025 09:41:55 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ExecutorService invokeAll 과 가상 스레드 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250710-using-executor-service-invoke-all-with-virtual-threads/</link>
      <pubDate>Thu, 10 Jul 2025 09:41:55 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250710-using-executor-service-invoke-all-with-virtual-threads/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://davidvlijmincx.com/posts/loom/invoke-all-with-virtual-threads/&#34;&gt;https://davidvlijmincx.com/posts/loom/invoke-all-with-virtual-threads/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;invokeAll&lt;/code&gt; 은 &lt;code&gt;ExecutorService&lt;/code&gt; 의 메서드로, 여러 제출된 작업을 동시에 시작합니다. &lt;code&gt;ExecutorService&lt;/code&gt; 는 스레드 풀에서 플랫폼 스레드를 사용하여 제출된 작업을 실행합니다. 이 비싸고 리소스 집약적인 플랫폼 스레드를 사용하는 대신, 가상 스레드를 사용하여 &lt;code&gt;ExecutorService&lt;/code&gt; 에 제출된 작업을 실행할 수도 있습니다. 이 글에서는 &lt;code&gt;invokeAll&lt;/code&gt; 메서드를 가상 스레드 (virtual threads), 구조화된 동시성 (structured concurrency) 및 플랫폼 스레드 (platform threads) 와 함께 구현하는 모든 방법을 다룰 것입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;가상-스레드를-사용한-invokeall&#34;&gt;가상 스레드를 사용한 &lt;code&gt;invokeAll&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;우리가 살펴볼 첫 번째 예제는 가상 스레드 (virtual threads) 를 사용합니다. 각 작업에 대해 가상 스레드를 생성하는 Executor 를 생성하는 try-with-resources 문이 있습니다. 7행에서 &lt;code&gt;invokeAll&lt;/code&gt; 메서드가 작업 목록과 함께 호출됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go의 동시성: 심층 분석</title>
      <link>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</link>
      <pubDate>Mon, 07 Jul 2025 13:43:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&#34;&gt;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;h3 id=&#34;동시성이란-무엇인가&#34;&gt;동시성이란 무엇인가?&lt;/h3&gt;&#xA;&lt;p&gt;동시성은 독립적인 활동들의 구성으로 느슨하게 정의될 수 있습니다. 반드시 병렬 실행을 필요로 하지는 않지만, 여러 태스크가 겹치는 시간 동안 진행되도록 허용합니다. 컴퓨팅의 맥락에서 동시 프로그래밍은 여러 태스크가 실행에서 &lt;strong&gt;인터리브(interleave - 여러 대상을 번갈아 가며 실행하거나 배치)&lt;/strong&gt; 될 수 있도록 보장하며, 이는 특히 I/O 바운드 태스크나 수많은 이벤트를 동시에 처리해야 하는 애플리케이션(예: 웹 서버에서 여러 클라이언트 연결 처리)에서 중요합니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;동시성-vs-병렬성&#34;&gt;동시성 vs. 병렬성&lt;/h3&gt;&#xA;&lt;p&gt;비공식적인 대화에서 종종 혼용되지만, 동시성과 병렬성은 다른 개념입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 스레드 성능 vs. 가상 스레드 vs. Kotlin 코루틴</title>
      <link>https://philipjkim.github.io/posts/20250630-java-thread-vs-virtual-thread-vs-kotlin-coroutine/</link>
      <pubDate>Mon, 30 Jun 2025 14:40:25 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250630-java-thread-vs-virtual-thread-vs-kotlin-coroutine/</guid>
      <description>&lt;p&gt;원문 (아래 리스트 순으로 번역되어 있음. Translated by Google Gemini) :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-03/Java-Thread-Performance-vs.-Virtual-Threads&#34;&gt;https://blog.behzadian.info/2024-05-03/Java-Thread-Performance-vs.-Virtual-Threads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-06/Java-Virtual-Threads-Performance-vs.-Kotlin-Coroutines&#34;&gt;https://blog.behzadian.info/2024-05-06/Java-Virtual-Threads-Performance-vs.-Kotlin-Coroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-26/Java-Thread-Performance-vs.-Virtual-Threads-Part-2&#34;&gt;https://blog.behzadian.info/2024-05-26/Java-Thread-Performance-vs.-Virtual-Threads-Part-2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;java-스레드-vs-가상-스레드-pt1&#34;&gt;Java 스레드 vs. 가상 스레드 Pt.1&lt;/h2&gt;&#xA;&lt;p&gt;면접 중에 한 면접관이 저에게 Java 스레드와 가상 스레드의 성능 차이에 대해 물었습니다. 저는 가상 스레드가 실제로는 JVM이 처리하는 경량 스레드이기 때문에 더 빠를 것이라고 답했지만, 둘 사이의 정확한 성능 차이가 궁금했습니다. 그래서 가상 스레드의 성능 향상을 확인하기 위해 간단한 벤치마크를 수행했습니다.&lt;/p&gt;&#xA;&lt;p&gt;이것은 매우 간단한 테스트입니다. 저는 매우 많은 수의 스레드와 가상 스레드를 생성하며, 각각이 완료되는 데 5초가 걸리도록 했습니다. 그런 다음 앱 실행 시간을 계산합니다. 이 벤치마크에 사용한 Java 코드는 다음과 같습니다:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
