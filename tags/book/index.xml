<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on philipjkim</title>
    <link>https://philipjkim.github.io/tags/book/</link>
    <description>Recent content in Book on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Aug 2025 18:13:51 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>책 소개: 소프트웨어 설계의 철학</title>
      <link>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</link>
      <pubDate>Mon, 04 Aug 2025 18:13:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</guid>
      <description>&lt;p&gt;존 오스터하우트 (John Ousterhout) 의 &lt;a href=&#34;https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201&#34;&gt;소프트웨어 설계의 철학 - A Philosophy of Software Design&lt;/a&gt; 은 소프트웨어 복잡성을 줄이고 유지 관리가 용이한 코드를 작성하는 방법에 대한 심도 있는 통찰력을 제공합니다. 21개 챕터에 걸쳐 저자는 복잡성의 본질을 분석하고, 효과적인 모듈 설계를 위한 원칙을 제시하며, 코드의 가독성과 명확성을 높이는 구체적인 기법들을 소개합니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;파트-1-복잡성의-이해와-모듈-설계의-기초-챕터-1-7&#34;&gt;파트 1: 복잡성의 이해와 모듈 설계의 기초 (챕터 1-7)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;챕터-1-서론-복잡성에-관한-모든-것&#34;&gt;챕터 1: 서론 (복잡성에 관한 모든 것)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 소프트웨어의 가장 큰 적은 &lt;strong&gt;복잡성&lt;/strong&gt;입니다. 기능이 추가될수록 복잡성은 필연적으로 증가하며, 이는 개발 속도를 저하시키고 버그를 유발합니다. 이 책의 목표는 복잡성을 관리하고 최소화하는 방법을 제시하는 것입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-2-복잡성의-본질&#34;&gt;챕터 2: 복잡성의 본질&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 복잡성은 시스템의 구조와 관련이 있으며, 이해하고 수정하기 어렵게 만듭니다. 복잡성의 주요 원인은 &lt;strong&gt;의존성&lt;/strong&gt;과 &lt;strong&gt;모호성&lt;/strong&gt;입니다. 의존성은 코드의 한 부분이 다른 부분에 얽혀 있는 정도를, 모호성은 중요한 정보가 명확하게 드러나지 않는 상태를 의미합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-3-작동하는-코드만으로는-충분하지-않다&#34;&gt;챕터 3: 작동하는 코드만으로는 충분하지 않다&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 단순히 기능이 작동하는 것에 만족하는 &lt;strong&gt;전술적 프로그래밍&lt;/strong&gt;에서 벗어나, 장기적인 관점에서 시스템의 설계를 개선하는 &lt;strong&gt;전략적 프로그래밍&lt;/strong&gt;을 지향해야 합니다. 좋은 설계를 위한 투자는 단기적으로는 시간이 더 걸릴 수 있지만, 장기적으로는 개발 속도를 높이고 유지보수 비용을 절감합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-4-모듈은-깊어야-한다&#34;&gt;챕터 4: 모듈은 깊어야 한다&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 좋은 모듈은 &lt;strong&gt;깊은(deep) 모듈&lt;/strong&gt;입니다. 깊은 모듈은 단순한 인터페이스를 가지면서도 강력한 기능을 제공합니다. 반면, &lt;strong&gt;얕은(shallow) 모듈&lt;/strong&gt;은 인터페이스가 복잡하고 제공하는 기능은 적어 복잡성을 증가시킵니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-5-정보-은닉-그리고-정보-누출&#34;&gt;챕터 5: 정보 은닉 (그리고 정보 누출)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; &lt;strong&gt;정보 은닉&lt;/strong&gt;은 모듈의 복잡한 내부 구현을 감추고, 외부에는 간단한 인터페이스만 노출하는 것입니다. 반대로, &lt;strong&gt;정보 누출&lt;/strong&gt;은 하나의 설계 결정이 여러 모듈에 영향을 미치는 경우로, 복잡성을 증가시키는 주된 원인입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-6-범용-모듈은-더-깊다&#34;&gt;챕터 6: 범용 모듈은 더 깊다&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 특정 기능에만 특화된 모듈보다는, 다양한 상황에서 재사용될 수 있는 &lt;strong&gt;범용 모듈&lt;/strong&gt;을 만드는 것이 더 좋은 설계입니다. 범용 모듈은 더 나은 정보 은닉을 가능하게 하고 시스템 전체의 복잡성을 줄여줍니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-7-다른-계층-다른-추상화&#34;&gt;챕터 7: 다른 계층, 다른 추상화&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 잘 설계된 시스템에서 각 계층은 그 위아래 계층과 다른 &lt;strong&gt;추상화&lt;/strong&gt;를 제공해야 합니다. 비슷한 추상화를 가진 인접 계층은 불필요한 복잡성을 나타내는 신호일 수 있습니다. 특히, 단순히 하위 계층의 메서드를 그대로 호출하는 &lt;strong&gt;통과(pass-through) 메서드&lt;/strong&gt;는 피해야 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;파트-2-복잡성-관리-및-코드-명확성-챕터-8-14&#34;&gt;파트 2: 복잡성 관리 및 코드 명확성 (챕터 8-14)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;챕터-8-복잡성을-아래로-끌어내리기&#34;&gt;챕터 8: 복잡성을 아래로 끌어내리기&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 복잡성은 시스템의 최하위 계층으로 밀어내야 합니다. 사용자와 직접 상호작용하는 상위 계층은 가능한 한 단순하게 유지하고, 복잡한 로직은 하위 계층에서 처리하도록 설계해야 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-9-함께하는-것이-나은가-따로-두는-것이-나은가&#34;&gt;챕터 9: 함께하는 것이 나은가, 따로 두는 것이 나은가?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 모듈을 합치거나 분리하는 것은 중요한 설계 결정입니다. 관련된 정보나 기능을 공유하는 코드는 함께 묶고, 범용 코드와 특수 목적 코드는 분리하는 것이 좋습니다. 목표는 인터페이스를 단순화하고 깊은 모듈을 만드는 것입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-10-오류를-존재하지-않게-정의하라&#34;&gt;챕터 10: 오류를 존재하지 않게 정의하라&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 예외 처리는 소프트웨어 복잡성의 주요 원인 중 하나입니다. 가장 좋은 방법은 API 설계를 변경하여 특정 오류 조건이 더 이상 예외적인 상황이 아니도록 만드는 것입니다. 이를 통해 예외 처리 코드의 양을 줄이고 시스템을 더 단순하게 만들 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-11-두-번-설계하라&#34;&gt;챕터 11: 두 번 설계하라&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 중요한 설계 결정을 내리기 전에 최소 두 가지 이상의 대안을 고려하고 비교해야 합니다. 이를 통해 더 나은 설계를 찾을 가능성이 높아지고, 초기 설계의 문제점을 발견할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-12-주석을-작성해야-하는-이유&#34;&gt;챕터 12: 주석을 작성해야 하는 이유&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; &amp;ldquo;좋은 코드는 스스로를 문서화한다&amp;quot;는 말은 신화에 가깝습니다. 주석은 코드의 의도, 이유, 그리고 인터페이스의 비공식적인 측면을 설명하는 데 필수적입니다. 좋은 주석은 코드의 가독성을 높이고 유지보수를 용이하게 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-13-좋은-이름-선택하기&#34;&gt;챕터 13: 좋은 이름 선택하기&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 명확하고 의미 있는 이름은 코드의 가독성을 높이는 가장 효과적인 방법 중 하나입니다. 이름은 변수나 메서드의 역할을 정확하게 설명해야 하며, 일관성 있는 명명 규칙을 사용하는 것이 중요합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-14-먼저-써라-그리고-완벽하게-만들어라&#34;&gt;챕터 14: 먼저 써라, 그리고 완벽하게 만들어라&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 처음부터 완벽한 코드를 작성하려는 시도는 오히려 개발을 지연시킬 수 있습니다. 먼저 작동하는 코드를 작성하고, 그 후에 리팩토링을 통해 설계를 개선하고 코드를 다듬는 것이 더 효율적인 접근 방식입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;파트-3-실용적인-설계-원칙과-결론-챕터-15-21&#34;&gt;파트 3: 실용적인 설계 원칙과 결론 (챕터 15-21)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;챕터-15-코드의-일관성-유지&#34;&gt;챕터 15: 코드의 일관성 유지&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 일관성은 코드의 가독성과 예측 가능성을 높입니다. 비슷한 작업은 비슷한 방식으로 처리하고, 일관된 코딩 스타일과 디자인 패턴을 적용해야 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-16-코드는-명백해야-한다&#34;&gt;챕터 16: 코드는 명백해야 한다&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 좋은 코드는 독자가 쉽게 이해할 수 있어야 합니다. 명확한 이름, 일관성, 그리고 적절한 주석을 통해 코드의 의도를 명백하게 드러내야 합니다. 모호하고 복잡한 코드는 버그의 원인이 됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-17-소프트웨어-동향&#34;&gt;챕터 17: 소프트웨어 동향&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 객체 지향 프로그래밍, 애자일 개발, 단위 테스트, 테스트 주도 개발(TDD), 디자인 패턴과 같은 최신 개발 동향들을 비판적으로 검토합니다. 이러한 방법론들이 항상 좋은 설계를 보장하는 것은 아니며, 맹목적으로 따르기보다는 그 원칙을 이해하고 상황에 맞게 적용하는 것이 중요합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-18-성능을-위한-설계&#34;&gt;챕터 18: 성능을 위한 설계&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 성능 최적화는 추측이 아닌 측정을 기반으로 해야 합니다. 변경 전에 반드시 성능을 측정하고, 시스템의 병목 현상이 발생하는 **핵심 경로(critical path)**를 중심으로 설계를 개선해야 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-19-무엇이-중요한지-결정하라&#34;&gt;챕터 19: 무엇이 중요한지 결정하라&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 소프트웨어 설계의 핵심은 중요한 것과 중요하지 않은 것을 구분하는 것입니다. 추상화, 이름 짓기, 주석 작성 등 모든 설계 활동의 근간에는 무엇이 중요한지에 대한 판단이 자리 잡고 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-20-결론&#34;&gt;챕터 20: 결론&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 이 책에서 다룬 모든 원칙들을 다시 한번 요약하고, 복잡성에 맞서 싸우는 전략적 프로그래머가 되기 위한 마음가짐을 강조합니다. 좋은 소프트웨어 설계는 끊임없는 학습과 노력의 결과물입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;챕터-21-디자인-원칙-요약&#34;&gt;챕터 21: 디자인 원칙 요약&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심 내용:&lt;/strong&gt; 책 전체에서 제시된 핵심 디자인 원칙과 &amp;ldquo;위험 신호(red flags)&amp;ldquo;들을 간결하게 요약하여 제공합니다. 이를 통해 독자들이 실제 개발 과정에서 쉽게 참고하고 적용할 수 있도록 돕습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
