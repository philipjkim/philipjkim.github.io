<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on philipjkim</title>
    <link>https://philipjkim.github.io/tags/book/</link>
    <description>Recent content in Book on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Aug 2025 18:13:51 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>책 소개: 소프트웨어 설계의 철학</title>
      <link>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</link>
      <pubDate>Mon, 04 Aug 2025 18:13:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</guid>
      <description>&lt;p&gt;존 오스터하우트 (John Ousterhout) 의 &lt;a href=&#34;https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201&#34;&gt;소프트웨어 설계의 철학 - A Philosophy of Software Design&lt;/a&gt; 은 소프트웨어 복잡성을 줄이고 유지 관리가 용이한 코드를 작성하는 방법에 대한 심도 있는 통찰력을 제공합니다. 21개 챕터에 걸쳐 저자는 복잡성의 본질을 분석하고, 효과적인 모듈 설계를 위한 원칙을 제시하며, 코드의 가독성과 명확성을 높이는 구체적인 기법들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;아래 내용은 Gemini 의 연구 결과에 약간의 퇴고를 거친 것입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-복잡성과의-전쟁&#34;&gt;서론: 복잡성과의 전쟁&lt;/h2&gt;&#xA;&lt;p&gt;존 오스터하우트의 저서 &amp;ldquo;소프트웨어 설계의 철학(A Philosophy of Software Design)&amp;ldquo;은 소프트웨어 개발의 가장 근본적인 한계가 성능이나 기능이 아니라, 우리가 만든 시스템을 우리 스스로 이해하는 능력에 있다는 주장으로 시작합니다.[1, 2] 이 책의 전체 철학은 단 하나의 적, 즉 &lt;strong&gt;복잡성(complexity)&lt;/strong&gt; 에 맞서기 위한 일련의 전략들로 구성되어 있습니다.[3, 4, 5, 6]&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
