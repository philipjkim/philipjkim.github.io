<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Review on philipjkim</title>
    <link>https://philipjkim.github.io/tags/review/</link>
    <description>Recent content in Review on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Aug 2025 10:48:49 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>작가 소개: 미국의 셰익스피어, 허먼 멜빌의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250822-introduction-to-melville/</link>
      <pubDate>Fri, 22 Aug 2025 10:48:49 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250822-introduction-to-melville/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hips.hearstapps.com/hmg-prod/images/gettyimages-89865323.jpg?crop=1xw:0.75xh;center,top&amp;amp;resize=1200:*&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;허먼 멜빌(Herman Melville, 1819-1891)은 19세기 미국 문학을 넘어 세계 문학사에서 가장 위대한 작가 중 한 명으로 꼽힙니다. 그는 광활한 바다를 무대로 인간의 실존적 고뇌와 우주적 질서에 대한 깊은 철학적 질문을 던졌습니다. 생전에는 대중에게 외면받았으나, 사후에 그의 작품은 재평가받으며 미국 낭만주의 문학의 정점으로 자리매김했습니다. 이 글은 멜빌의 파란만장했던 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 빅토리아 시대의 거장, 찰스 디킨스의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250821-introduction-to-dickens/</link>
      <pubDate>Thu, 21 Aug 2025 17:48:22 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-introduction-to-dickens/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.msnocookie.com/image/ms/msimages/blog_gallery/charles-dickens-copyright-c-mary-evans-picture_3fa544e141.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;찰스 디킨스(Charles Dickens, 1812-1870)는 19세기 영국을 대표하는 소설가이자, 산업혁명기 런던의 명암을 누구보다 생생하게 그려낸 사회 비평가입니다. 그는 생생한 캐릭터와 흡입력 있는 스토리텔링을 통해 당대 대중의 폭발적인 사랑을 받았으며, 그의 작품은 오늘날까지 시대를 초월하는 고전으로 널리 읽히고 있습니다. 이 글은 디킨스의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;디킨스의-생애와-작품-활동&#34;&gt;디킨스의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;디킨스의 삶은 그의 소설만큼이나 극적인 고난과 성공으로 가득 차 있습니다. 그는 1812년 영국 포츠머스에서 태어났으나, 해군 경리였던 아버지의 낭비벽으로 인해 어린 시절부터 힘겨운 삶을 살았습니다. 아버지가 빚 때문에 감옥에 수감되자, 불과 열두 살의 디킨스는 학교를 그만두고 구두약 공장에서 하루 10시간씩 노동을 해야 했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 사실주의의 거장, 오노레 드 발자크의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250821-introduction-to-balzac/</link>
      <pubDate>Thu, 21 Aug 2025 12:23:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-introduction-to-balzac/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.thoughtco.com/thmb/b6neF6wzUa3YCnOyk4AtLHXGxLc=/1500x0/filters:no_upscale%28%29:max_bytes%28150000%29:strip_icc%28%29/GettyImages-526580970-5b93ff9c46e0fb0050f670bd.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;오노레 드 발자크(Honoré de Balzac, 1799-1850)는 19세기 프랑스 문학을 대표하는 소설가이자, 사실주의(Realism) 문학의 문을 연 선구자입니다. 그는 인간 사회를 하나의 거대한 유기체로 보고, 그 안에서 움직이는 개인의 욕망과 사회 구조의 관계를 집요하게 파고들었습니다. 이 글은 발자크의 생애와 작품 세계, 그의 문학이 지닌 독창적인 특징과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;발자크의-생애와-작품-활동&#34;&gt;발자크의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;발자크의 삶은 그의 작품만큼이나 극적이었습니다. 그는 1799년 프랑스 투르(Tours)에서 태어나 법률가의 길을 걸으라는 가문의 기대를 저버리고 문학에 투신했습니다. 초기에는 상업적인 성공을 위해 여러 필명으로 통속 소설을 쓰며 생계를 유지했지만, 큰 성공을 거두지는 못했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 커트 로젠윙클, 브람스를 사색하다: &#39;The Brahms Project&#39; 리뷰</title>
      <link>https://philipjkim.github.io/posts/20250820-kurt-rosenwinkel-the-brahms-project/</link>
      <pubDate>Wed, 20 Aug 2025 10:45:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250820-kurt-rosenwinkel-the-brahms-project/</guid>
      <description>&lt;p&gt;현대 재즈 기타리스트 커트 로젠윙클이 쇼팽의 세계를 탐구했던 &amp;lsquo;The Chopin Project&amp;rsquo;에 이어, 이번에는 낭만주의 시대의 또 다른 거장 요하네스 브람스(Johannes Brahms)의 음악에 대한 깊은 존경과 재해석을 담은 앨범 &amp;lsquo;The Brahms Project&amp;rsquo;를 선보입니다. 이 앨범은 브람스 특유의 복잡한 화성과 깊은 서정성을 재즈의 언어로 풀어낸 또 하나의 기념비적인 결과물입니다. 이 글은 작곡가 브람스의 음악 세계를 소개하고, &amp;lsquo;The Brahms Project&amp;rsquo; 앨범의 탄생 배경과 모든 수록곡을 상세히 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 언어의 풍부한 표준 라이브러리 (Batteries Included)</title>
      <link>https://philipjkim.github.io/posts/20250819-go-batteries-included/</link>
      <pubDate>Tue, 19 Aug 2025 12:55:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250819-go-batteries-included/</guid>
      <description>&lt;p&gt;Go 언어의 특징을 소개하는 시리즈의 세 번째 글입니다. 이전 글에서는 Go의 &lt;strong&gt;단순성&lt;/strong&gt;과 &lt;strong&gt;동시성&lt;/strong&gt;에 대해 다루었습니다. 이번에는 Go가 &amp;lsquo;건전지 포함(Batteries Included)&amp;rsquo; 철학을 어떻게 구현하고 있는지, 즉 강력하고 풍부한 표준 라이브러리에 대해 이야기하고자 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(이 글은 Gemini 2.5 Pro 모델에 의해 작성되었으며, 커버하고 있는 세부 항목들과 글의 톤/매너에 대한 요구사항들은 제가 정리해서 Gemini 에 요청했습니다. 내용에 잘못된 부분이 있을 수 있는데, 그런 경우 잘못된 정보에 대한 댓글을 남겨주시면 감사하겠습니다.)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;go-창시자들의-철학-실용성과-안정성&#34;&gt;Go 창시자들의 철학: 실용성과 안정성&lt;/h2&gt;&#xA;&lt;p&gt;Go 언어의 설계 철학은 구글의 대규모 프로덕션 환경에서 마주친 문제들을 해결하는 데서 출발했습니다. 언어의 창시자들인 &lt;strong&gt;로버트 그리즈머(Robert Griesemer)&lt;/strong&gt;, &lt;strong&gt;롭 파이크(Rob Pike)&lt;/strong&gt;, &lt;strong&gt;켄 톰슨(Ken Thompson)&lt;/strong&gt; 은 복잡한 외부 의존성 없이도 당장 현장에서 필요한 대부분의 기능을 수행할 수 있는 언어를 원했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 커트 로젠윙클, 쇼팽을 만나다: &#39;The Chopin Project&#39; 리뷰</title>
      <link>https://philipjkim.github.io/posts/20250819-kurt-rosenwinkel-the-chopin-project/</link>
      <pubDate>Tue, 19 Aug 2025 10:01:24 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250819-kurt-rosenwinkel-the-chopin-project/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;현대 재즈 기타의 지형을 논할 때 커트 로젠윙클(Kurt Rosenwinkel)의 이름을 빼놓을 수 없습니다. 그는 독창적인 화성 감각과 유려한 프레이징, 그리고 기타 사운드에 대한 혁신적인 접근으로 자신만의 독보적인 영역을 구축한 아티스트입니다. 2023년 발매된 앨범 &amp;lsquo;The Chopin Project&amp;rsquo;는 그가 클래식 음악의 거장 프레데리크 쇼팽(Frédéric Chopin)의 세계를 재즈의 언어로 탐구한 야심 찬 결과물입니다. 이 글은 커트 로젠윙클과 그의 음악 세계를 소개하고, &amp;lsquo;The Chopin Project&amp;rsquo; 앨범의 탄생 배경과 모든 수록곡을 상세히 분석합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>회사 소개: G&amp;L: 레오 펜더의 마지막 유산, 그 혁신의 역사와 특징</title>
      <link>https://philipjkim.github.io/posts/20250818-introduction-to-g-and-l/</link>
      <pubDate>Mon, 18 Aug 2025 10:26:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250818-introduction-to-g-and-l/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 G&amp;amp;L 에 대한 Gemini 2.5 pro 의 연구결과에 기반했습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;G&amp;amp;L은 일렉트릭 기타의 아버지, 레오 펜더가 그의 오랜 동료 조지 풀러턴(George Fullerton)과 함께 설립한 마지막 악기 제조사입니다. &amp;lsquo;G&amp;amp;L&amp;rsquo;이라는 이름 역시 George &amp;amp; Leo의 이니셜에서 비롯되었습니다. G&amp;amp;L은 펜더의 전통적인 디자인을 계승하면서도, 그가 평생에 걸쳐 완성하고자 했던 기술적 혁신을 집약한 브랜드로 평가받습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;gl의-탄생-레오-펜더의-마지막-여정&#34;&gt;G&amp;amp;L의 탄생: 레오 펜더의 마지막 여정&lt;/h2&gt;&#xA;&lt;p&gt;레오 펜더는 자신이 설립한 두 개의 회사, 펜더(Fender)와 뮤직맨(Music Man)을 떠나 G&amp;amp;L을 설립했습니다. 그 과정은 그의 &amp;lsquo;완벽한 악기&amp;rsquo;를 향한 끊임없는 열망을 보여줍니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 유재하, 단 한 장의 유산: &#39;사랑하기 때문에&#39; 앨범 전체 리뷰</title>
      <link>https://philipjkim.github.io/posts/20250812-album-yoo-jae-ha-1st/</link>
      <pubDate>Tue, 12 Aug 2025 08:48:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250812-album-yoo-jae-ha-1st/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/mqfiF1FrF_TU_5lJPkB4tY7FmaDUV0GF-hp3k_wX3Ydf-Xi5-v1SFGGtwDJj1YSIWn5wqUlSsuEqL5MfHePSLPaRnIiY_dtPr1dSCJWB0xxKG7UZXF4m72pVYfCjyQf8w8rRAxyJAJYQOYl8YwkXbw.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1987년 11월 1일, 스물다섯의 나이로 요절한 천재 뮤지션 유재하. 그가 세상을 떠나기 불과 3개월 전에 남긴 단 한 장의 앨범 &amp;lt;사랑하기 때문에&amp;gt;는 한국 대중음악사의 흐름을 완전히 바꿔놓은 기념비적인 작품으로 기록됩니다. 이 글은 그의 짧았던 삶을 돌아보고, 유일한 유작이 된 앨범의 모든 트랙을 상세히 분석하며, 그의 음악이 남긴 깊은 유산을 조망합니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;불꽃처럼-살다-간-천재-유재하&#34;&gt;불꽃처럼 살다 간 천재, 유재하&lt;/h2&gt;&#xA;&lt;p&gt;유재하(1962-1987)는 한양대학교 작곡과에서 클래식 음악을 전공한 인재였습니다. 그의 음악적 깊이는 클래식 화성학과 대중음악 팝/재즈의 감성을 결합하는 독창적인 능력에서 비롯되었습니다. 대학 시절 &amp;lsquo;조용필과 위대한 탄생&amp;rsquo;의 키보디스트로 발탁되었고, 이후 김현식의 3집 앨범에 참여해 명곡 &amp;lsquo;그대 내 품에&amp;rsquo;를 먼저 선보이며 실력을 입증했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>책 소개: 마침내 특이점이 시작된다: 레이 커즈와일의 예언, 20년 후의 현실</title>
      <link>https://philipjkim.github.io/posts/20250812-book-the-singularity-is-nearer/</link>
      <pubDate>Tue, 12 Aug 2025 08:21:10 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250812-book-the-singularity-is-nearer/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 &amp;ldquo;마침내 특이점이 시작된다&amp;rdquo; 책에 관련한 여러 가지 질문들에 대한 Gemini 2.5 pro 의 대답에 기반했으며 일부 내용은 수정되었습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;레이 커즈와일(Ray Kurzweil)은 단순한 발명가나 컴퓨터 과학자를 넘어, 기술의 기하급수적 발전을 통해 인류 문명의 근본적 변화를 예고한 &amp;lsquo;현대의 노스트라다무스&amp;rsquo;로 불립니다. 2005년, 그는 저서 &amp;lt;특이점이 온다 (The Singularity Is Near)&amp;gt;를 통해 인공지능이 인간의 지능을 초월하는 &amp;lsquo;특이점&amp;rsquo;이 임박했음을 선언했습니다. 그리고 약 20년이 지난 지금, 그의 새로운 책 &amp;lt;마침내 특이점이 시작된다 (The Singularity Is Nearer)&amp;gt;는 그 예언이 현실로 다가오고 있음을 구체적인 증거와 함께 제시합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 의 동시성 (concurrency) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250811-concurrency-of-go/</link>
      <pubDate>Mon, 11 Aug 2025 13:39:08 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-concurrency-of-go/</guid>
      <description>&lt;p&gt;현대의 컴퓨터는 멀티코어 프로세서를 기반으로 작동하며, 동시성(Concurrency)은 더 이상 선택이 아닌 필수적인 프로그래밍 패러다임이 되었습니다. Go 언어는 설계 초기부터 동시성을 핵심 기능으로 채택했으며, 전통적인 스레드-락(Thread-Lock) 모델의 복잡성을 해결하기 위한 명확한 철학을 제시합니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 동시성 모델이 어떠한 철학 위에서 탄생했는지 살펴보고, 다른 주류 언어들과의 접근 방식을 비교 분석합니다. 이를 통해 Go의 동시성이 갖는 장점과 현실적인 트레이드오프를 가감 없이 설명하고자 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(이 글은 Gemini 2.5 Pro 모델에 의해 작성되었으며, 커버하고 있는 세부 항목들과 글의 톤/매너에 대한 요구사항들은 제가 정리해서 Gemini 에 요청했습니다. 내용에 잘못된 부분이 있을 수 있는데, 그런 경우 잘못된 정보에 대한 댓글을 남겨주시면 감사하겠습니다.)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 의 단순함(simplicity) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</link>
      <pubDate>Thu, 07 Aug 2025 08:08:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</guid>
      <description>&lt;p&gt;Go 언어의 철학을 관통하는 가장 중요한 단어는 바로 &lt;strong&gt;&amp;lsquo;단순함(Simplicity)&amp;rsquo;&lt;/strong&gt; 입니다. 이는 단순히 기능이 적다는 의미가 아니라, 복잡한 문제를 명료하고 예측 가능하게 해결하기 위한 의도적인 설계 철학입니다. Go의 창시자 중 한 명인 롭 파이크(Rob Pike)는 &amp;ldquo;단순함은 복잡하다(Simplicity is Complicated)&amp;ldquo;고 말했습니다. 최고의 단순함을 성취하기 위해 수많은 고민과 트레이드오프가 있었음을 암시하는 말이죠.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 핵심 철학인 &amp;lsquo;단순함&amp;rsquo;이 코드 수준에서 어떻게 드러나는지, 그리고 이 철학이 왜 어떤 개발자에게는 최고의 장점이 되고 다른 개발자에게는 답답한 단점으로 여겨지는지 가감 없이 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI 코딩 시대의 그림자: LLM 의존이 개발자에게 미치는 잠재적 위험 5가지</title>
      <link>https://philipjkim.github.io/posts/20250805-shadows-of-ai-coding-era/</link>
      <pubDate>Tue, 05 Aug 2025 16:12:15 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250805-shadows-of-ai-coding-era/</guid>
      <description>&lt;p&gt;&lt;code&gt;vibe-coding&lt;/code&gt;, &lt;code&gt;agent-coding&lt;/code&gt; 이라는 말이 어색하지 않은 시대입니다. Claude, Gemini, GitHub Copilot과 같은 LLM(거대 언어 모델) 기반 코딩 도구들은 이제 단순히 코드 스니펫을 자동 완성해주는 수준을 넘어, 우리의 생각을 논리적으로 설명하면 프로젝트 전체의 구조를 짜고 방대한 양의 코드를 순식간에 만들어냅니다. 생산성의 혁신이라 부를 만한 이 변화는 분명 경이롭습니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 이 강력한 도구에 과도하게 의존하기 시작하면서, 우리는 이전에 겪어보지 못한 새로운 종류의 문제들에 직면하고 있습니다. 밝은 빛이 강할수록 그림자도 짙어지는 법입니다. 지난 주말 바이브코딩을 직접 경험해 보며 그런 그림자의 영역을 빠르게 체감할 수 있었습니다. 이 글에서는 LLM 기반 코딩에 대한 의존이 개발자 개인과 팀에 미칠 수 있는 5가지 잠재적 위험을 심도 있게 다뤄보고자 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>책 소개: 소프트웨어 설계의 철학</title>
      <link>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</link>
      <pubDate>Mon, 04 Aug 2025 18:13:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</guid>
      <description>&lt;p&gt;존 오스터하우트 (John Ousterhout) 의 &lt;a href=&#34;https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201&#34;&gt;소프트웨어 설계의 철학 - A Philosophy of Software Design&lt;/a&gt; 은 소프트웨어 복잡성을 줄이고 유지 관리가 용이한 코드를 작성하는 방법에 대한 심도 있는 통찰력을 제공합니다. 21개 챕터에 걸쳐 저자는 복잡성의 본질을 분석하고, 효과적인 모듈 설계를 위한 원칙을 제시하며, 코드의 가독성과 명확성을 높이는 구체적인 기법들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;아래 내용은 Gemini 의 연구 결과에 약간의 퇴고를 거친 것입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-복잡성과의-전쟁&#34;&gt;서론: 복잡성과의 전쟁&lt;/h2&gt;&#xA;&lt;p&gt;존 오스터하우트의 저서 &amp;ldquo;소프트웨어 설계의 철학(A Philosophy of Software Design)&amp;ldquo;은 소프트웨어 개발의 가장 근본적인 한계가 성능이나 기능이 아니라, 우리가 만든 시스템을 우리 스스로 이해하는 능력에 있다는 주장으로 시작합니다.[1, 2] 이 책의 전체 철학은 단 하나의 적, 즉 &lt;strong&gt;복잡성(complexity)&lt;/strong&gt; 에 맞서기 위한 일련의 전략들로 구성되어 있습니다.[3, 4, 5, 6]&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Gemini CLI: 소개 및 그 진정한 가치</title>
      <link>https://philipjkim.github.io/posts/20250730-gemini-cli-an-introduction-and-its-real-value/</link>
      <pubDate>Wed, 30 Jul 2025 09:08:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250730-gemini-cli-an-introduction-and-its-real-value/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://medium.com/@terrycho/gemini-cli-an-introduction-and-its-real-value-15bd070fb011&#34;&gt;https://medium.com/@terrycho/gemini-cli-an-introduction-and-its-real-value-15bd070fb011&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;얼마 전, Gemini CLI 발표 직후 구글의 Gemini 서버가 과부하되었다는 소식이 들려왔습니다. 사람들은 왜 Gemini CLI에 그렇게 열광하는 걸까요? 우리는 이미 웹과 데스크톱에서 사용할 수 있는 ChatGPT와 Claude, 그리고 Cursor와 Windsurf 같은 코딩 AI 도구, 심지어 Lovable과 V0 같은 바이브 코딩 도구까지 가지고 있습니다. 터미널 기반의 새로운 CLI 기반 AI가 이 시장에 어떤 영향을 미칠 수 있을까요?&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mnQoAMyjje5FOHG5TT85qA.png&#34; alt=&#34;img1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;무료 서비스 발표가 상당한 인기를 얻었지만, Gemini CLI는 전체 소프트웨어 개발 수명 주기(SDLC)를 아우르는 오케스트레이터로서 새로운 입지를 확립했습니다. 이는 소프트웨어 개발 전체를 포괄하려는 야심 찬 계획을 엿볼 수 있게 합니다. 이 글에서는 Gemini CLI가 왜 그렇게 인기 있는지, 그 특징과 차별점, 숨겨진 가치, 그리고 미래 개발 가능성에 대해 논의할 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>게임 소개: 추억의 명작, 제3차 슈퍼로봇대전</title>
      <link>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</link>
      <pubDate>Wed, 16 Jul 2025 11:08:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/srw3.jpg&#34; alt=&#34;srw3_poster&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;서문-우리들의-청춘을-불태웠던-강철의-거인들&#34;&gt;서문: 우리들의 청춘을 불태웠던 강철의 거인들&lt;/h3&gt;&#xA;&lt;p&gt;1993년, 슈퍼 패미컴(SFC)의 황금기. 수많은 게임들 속에서도 유독 소년들의 가슴을 뜨겁게 달구었던 이름이 있습니다. 바로 &lt;strong&gt;&amp;lsquo;제3차 슈퍼로봇대전&amp;rsquo;&lt;/strong&gt; (alias: 슈로대3, SRW3) 입니다.&lt;/p&gt;&#xA;&lt;p&gt;단순한 크로스오버를 넘어, &amp;lsquo;DC전쟁&amp;rsquo; 이후의 독자적인 오리지널 스토리를 본격적으로 펼쳐 보이며 &amp;lsquo;슈퍼로봇대전&amp;rsquo; 시리즈의 정체성을 확립한 기념비적인 작품. 건담과 마징가, 겟타로보가 나란히 서서 미지의 적과 싸운다는 꿈같은 상상을 현실로 만들어준 게임. 누군가에게는 밤새워 공략집을 뒤적이며 숨겨진 유닛을 얻었던 추억으로, 또 다른 누군가에게는 친구와 분기점에 대해 열띤 토론을 벌였던 기억으로 남아있을 것입니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
