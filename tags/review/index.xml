<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Review on philipjkim</title>
    <link>https://philipjkim.github.io/tags/review/</link>
    <description>Recent content in Review on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 Aug 2025 08:08:20 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/tags/review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 의 단순함(simplicity) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</link>
      <pubDate>Thu, 07 Aug 2025 08:08:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</guid>
      <description>&lt;p&gt;Go 언어의 철학을 관통하는 가장 중요한 단어는 바로 &lt;strong&gt;&amp;lsquo;단순함(Simplicity)&amp;rsquo;&lt;/strong&gt; 입니다. 이는 단순히 기능이 적다는 의미가 아니라, 복잡한 문제를 명료하고 예측 가능하게 해결하기 위한 의도적인 설계 철학입니다. Go의 창시자 중 한 명인 롭 파이크(Rob Pike)는 &amp;ldquo;단순함은 복잡하다(Simplicity is Complicated)&amp;ldquo;고 말했습니다. 최고의 단순함을 성취하기 위해 수많은 고민과 트레이드오프가 있었음을 암시하는 말이죠.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 핵심 철학인 &amp;lsquo;단순함&amp;rsquo;이 코드 수준에서 어떻게 드러나는지, 그리고 이 철학이 왜 어떤 개발자에게는 최고의 장점이 되고 다른 개발자에게는 답답한 단점으로 여겨지는지 가감 없이 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI 코딩 시대의 그림자: LLM 의존이 개발자에게 미치는 잠재적 위험 5가지</title>
      <link>https://philipjkim.github.io/posts/20250805-shadows-of-ai-coding-era/</link>
      <pubDate>Tue, 05 Aug 2025 16:12:15 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250805-shadows-of-ai-coding-era/</guid>
      <description>&lt;p&gt;&lt;code&gt;vibe-coding&lt;/code&gt;, &lt;code&gt;agent-coding&lt;/code&gt; 이라는 말이 어색하지 않은 시대입니다. Claude, Gemini, GitHub Copilot과 같은 LLM(거대 언어 모델) 기반 코딩 도구들은 이제 단순히 코드 스니펫을 자동 완성해주는 수준을 넘어, 우리의 생각을 논리적으로 설명하면 프로젝트 전체의 구조를 짜고 방대한 양의 코드를 순식간에 만들어냅니다. 생산성의 혁신이라 부를 만한 이 변화는 분명 경이롭습니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 이 강력한 도구에 과도하게 의존하기 시작하면서, 우리는 이전에 겪어보지 못한 새로운 종류의 문제들에 직면하고 있습니다. 밝은 빛이 강할수록 그림자도 짙어지는 법입니다. 지난 주말 바이브코딩을 직접 경험해 보며 그런 그림자의 영역을 빠르게 체감할 수 있었습니다. 이 글에서는 LLM 기반 코딩에 대한 의존이 개발자 개인과 팀에 미칠 수 있는 5가지 잠재적 위험을 심도 있게 다뤄보고자 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Gemini CLI: 소개 및 그 진정한 가치</title>
      <link>https://philipjkim.github.io/posts/20250730-gemini-cli-an-introduction-and-its-real-value/</link>
      <pubDate>Wed, 30 Jul 2025 09:08:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250730-gemini-cli-an-introduction-and-its-real-value/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://medium.com/@terrycho/gemini-cli-an-introduction-and-its-real-value-15bd070fb011&#34;&gt;https://medium.com/@terrycho/gemini-cli-an-introduction-and-its-real-value-15bd070fb011&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;얼마 전, Gemini CLI 발표 직후 구글의 Gemini 서버가 과부하되었다는 소식이 들려왔습니다. 사람들은 왜 Gemini CLI에 그렇게 열광하는 걸까요? 우리는 이미 웹과 데스크톱에서 사용할 수 있는 ChatGPT와 Claude, 그리고 Cursor와 Windsurf 같은 코딩 AI 도구, 심지어 Lovable과 V0 같은 바이브 코딩 도구까지 가지고 있습니다. 터미널 기반의 새로운 CLI 기반 AI가 이 시장에 어떤 영향을 미칠 수 있을까요?&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mnQoAMyjje5FOHG5TT85qA.png&#34; alt=&#34;img1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;무료 서비스 발표가 상당한 인기를 얻었지만, Gemini CLI는 전체 소프트웨어 개발 수명 주기(SDLC)를 아우르는 오케스트레이터로서 새로운 입지를 확립했습니다. 이는 소프트웨어 개발 전체를 포괄하려는 야심 찬 계획을 엿볼 수 있게 합니다. 이 글에서는 Gemini CLI가 왜 그렇게 인기 있는지, 그 특징과 차별점, 숨겨진 가치, 그리고 미래 개발 가능성에 대해 논의할 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>게임 소개: 추억의 명작, 제3차 슈퍼로봇대전</title>
      <link>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</link>
      <pubDate>Wed, 16 Jul 2025 11:08:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/srw3.jpg&#34; alt=&#34;srw3_poster&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;서문-우리들의-청춘을-불태웠던-강철의-거인들&#34;&gt;서문: 우리들의 청춘을 불태웠던 강철의 거인들&lt;/h3&gt;&#xA;&lt;p&gt;1993년, 슈퍼 패미컴(SFC)의 황금기. 수많은 게임들 속에서도 유독 소년들의 가슴을 뜨겁게 달구었던 이름이 있습니다. 바로 &lt;strong&gt;&amp;lsquo;제3차 슈퍼로봇대전&amp;rsquo;&lt;/strong&gt; (alias: 슈로대3, SRW3) 입니다.&lt;/p&gt;&#xA;&lt;p&gt;단순한 크로스오버를 넘어, &amp;lsquo;DC전쟁&amp;rsquo; 이후의 독자적인 오리지널 스토리를 본격적으로 펼쳐 보이며 &amp;lsquo;슈퍼로봇대전&amp;rsquo; 시리즈의 정체성을 확립한 기념비적인 작품. 건담과 마징가, 겟타로보가 나란히 서서 미지의 적과 싸운다는 꿈같은 상상을 현실로 만들어준 게임. 누군가에게는 밤새워 공략집을 뒤적이며 숨겨진 유닛을 얻었던 추억으로, 또 다른 누군가에게는 친구와 분기점에 대해 열띤 토론을 벌였던 기억으로 남아있을 것입니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
