<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>philipjkim</title>
    <link>https://philipjkim.github.io/</link>
    <description>Recent content on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Sep 2025 16:23:41 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>음반 소개: 동물원 - 세번째 노래모음 (1990): 일상과 상실의 풍경을 담은 담백한 서정</title>
      <link>https://philipjkim.github.io/posts/20250923-album-review-dongmoolwon-3/</link>
      <pubDate>Tue, 23 Sep 2025 16:23:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250923-album-review-dongmoolwon-3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.maniadb.com/images/album/129/129260_f_1.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1990년 7월 발매된 동물원의 3집 &lt;em&gt;세번째 노래모음&lt;/em&gt;은 80년대 한국 포크 씬을 대표했던 그룹이 변화의 기로 위에서 남긴, 담백하고도 쓸쓸한 기록입니다. 김광석을 비롯한 주요 멤버들이 떠난 후 3인조로 재편되어 발표한 이 앨범은, 1, 2집의 풋풋했던 감성을 넘어 20대 후반에 접어든 청춘의 상실감과 도시인의 고독을 소박한 언어로 담아내며, 동물원 초기 스타일의 마지막을 장식한 작품으로 평가받습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다. (Tribute to 승국)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>스타크래프트 II: 공허의 유산 - 테란 플레이 가이드</title>
      <link>https://philipjkim.github.io/posts/20250923-starcraft2-terran-guide/</link>
      <pubDate>Tue, 23 Sep 2025 15:36:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250923-starcraft2-terran-guide/</guid>
      <description>&lt;p&gt;&lt;em&gt;gemini-2.5-pro 에 연구 결과 요청한 결과물을 일부 수정했습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/proxy/cSevoAGqGzA3H2ysuHyCDe_XZyEB7QVCX049ervgfHgY9b4nwhez62ai8mx8NKMMCAEI_sJmrD4ilsZnLuMUvE1lyzpE39H8tBWkVVs-aGEGkRpf1K7zHWLj4hb8eT3nbpaQpw&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;본 포스트는 스타크래프트 II: 공허의 유산의 테란 종족을 플레이하고자 하는 모든 수준의 플레이어를 위한 포괄적인 가이드를 제공하는 것을 목적으로 합니다. 초보자를 위한 기본 개념부터 고급 플레이어를 위한 심층 전략까지, 테란 운영의 모든 측면을 체계적으로 분석하고 설명할 것입니다.&lt;/p&gt;&#xA;&lt;p&gt;테란은 코프룰루 구역의 인간 세력으로, 뛰어난 적응력과 생존력을 바탕으로 한 유연한 전략 구사가 특징입니다.[1, 2] 프로토스의 발전된 기술이나 저그의 생물학적 강점 대신, 급조된 기술과 불굴의 정신력으로 척박한 우주 환경에 적응한 이 종족의 특성은 게임 내에서 다양한 유닛 조합과 전략적 유연성으로 나타납니다.[3] 본 포스트는 이러한 테란의 본질을 이해하고, 그 잠재력을 최대한 발휘할 수 있는 방법을 제시할 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 당신이 소유하지 않은 타입은 목킹(Mock)하지 마세요</title>
      <link>https://philipjkim.github.io/posts/20250923-tott-dont-mock-types-you-dont-own/</link>
      <pubDate>Tue, 23 Sep 2025 13:36:30 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250923-tott-dont-mock-types-you-dont-own/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2020/07/testing-on-toilet-dont-mock-types-you.html&#34;&gt;https://testing.googleblog.com/2020/07/testing-on-toilet-dont-mock-types-you.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;단위 테스트를 작성할 때, 테스트 대상 코드가 의존하는 타입을 목(mock) 처리하는 것은 일반적인 관행입니다. 하지만, &lt;strong&gt;당신이 소유하지 않은 타입(types you don&amp;rsquo;t own)을 목 처리하는 것은 거의 항상 피해야 합니다.&lt;/strong&gt; 여기서 &amp;ldquo;소유하지 않은 타입&amp;quot;이란 당신의 팀이 작성하거나 관리하지 않는 모든 클래스나 인터페이스를 의미합니다. 여기에는 자바 표준 라이브러리의 &lt;code&gt;URL&lt;/code&gt;이나 서드파티 라이브러리의 &lt;code&gt;JSONObject&lt;/code&gt;와 같은 타입들이 포함됩니다.&lt;/p&gt;&#xA;&lt;p&gt;예를 들어, &lt;code&gt;java.net.HttpURLConnection&lt;/code&gt;을 직접 목 처리하는 테스트를 생각해 봅시다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testProcessUrl_connectionFailed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockConnection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResponseCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenThrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Processor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;processor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertFalse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;processor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;processUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 테스트에는 몇 가지 심각한 문제가 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>심오한 수읽기의 세계: 바둑(Go)에 대한 소개</title>
      <link>https://philipjkim.github.io/posts/20250923-introduction-to-go-game/</link>
      <pubDate>Tue, 23 Sep 2025 09:50:25 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250923-introduction-to-go-game/</guid>
      <description>&lt;p&gt;&lt;em&gt;바둑에 대한 연구 요청에 대한 gemini-2.5-pro 의 결과물입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-흑과-백-무한을-담은-우주&#34;&gt;서론: 흑과 백, 무한을 담은 우주&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/cnqjsHRUl-CPSacgByZEL_ljv0IfP2nqKyI4cOGOe_enO-MfEQA0fRsfPCJFhnIZ9k9QB4_6gjeR7E9tdRjehg.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;바둑은 흑과 백의 돌을 가로세로 19줄의 판 위에 번갈아 놓아 더 많은 공간, 즉 &amp;lsquo;집&amp;rsquo;을 차지하는 쪽이 이기는 단순한 규칙의 게임입니다.[1] 그러나 이 간결한 규칙의 이면에는 우주의 원자 수보다 많은 경우의 수가 잠재되어 있으며, 수천 년에 걸쳐 동아시아의 지성사를 관통해 온 깊이 있는 철학이 담겨 있습니다.[2, 3] 바둑판 위에서 펼쳐지는 국면의 추이는 풍운의 변화와 같고, 돌의 흥망성쇠는 인간사의 도리와 다르지 않다고 평가되기도 합니다.[2] 본 포스트는 바둑이라는 게임의 기원과 역사, 기본 규칙과 전략을 상세히 소개하고, 이 게임이 단순한 오락을 넘어 동아시아 문화권에서 사고의 도구이자 철학적 성찰의 매개체로 기능해 온 이유를 다각적으로 분석하고자 합니다. 이를 통해 바둑을 모르는 이들에게 이 게임이 왜 배울 만한 가치가 있는지를 종합적으로 제시하는 것을 목적으로 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>게임 소개: 스타크래프트와 스타크래프트 II: RTS 신화의 계승과 변주</title>
      <link>https://philipjkim.github.io/posts/20250922-starcraft-1-vs-2/</link>
      <pubDate>Mon, 22 Sep 2025 17:34:11 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250922-starcraft-1-vs-2/</guid>
      <description>&lt;p&gt;&lt;em&gt;스타크래프트, 스타크래프트2 에 대한 연구 결과 요청에 대한 gemini-2.5-pro 의 결과물입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;본 포스트는 블리자드 엔터테인먼트(Blizzard Entertainment)의 실시간 전략(Real-Time Strategy, RTS) 게임, 스타크래프트(StarCraft)와 그 후속작 스타크래프트 II(StarCraft II)를 심층적으로 비교 분석하는 것을 목표로 합니다. 두 게임은 RTS 장르의 역사에 지대한 영향을 미쳤으나, 게임 디자인 철학, 핵심 메커니즘, 그리고 e스포츠 생태계에서 뚜렷하게 다른 궤적을 그려왔습니다. 본 포스트는 각 게임의 역사적 배경, 확장팩을 통한 진화 과정, 종족별 고유 특성, 그리고 핵심적인 게임 시스템을 상세히 기술합니다. 이를 바탕으로 두 게임의 공통점과 차이점을 명확히 하고, e스포츠 씬에서의 상이한 성공 요인과 한계를 다각적으로 분석하여 RTS 장르의 패러다임 변화를 소개합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>온라인 포커 승률 극대화를 위한 전략</title>
      <link>https://philipjkim.github.io/posts/20250922-online-poker-strategy/</link>
      <pubDate>Mon, 22 Sep 2025 14:27:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250922-online-poker-strategy/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://upswingpoker.com/pot-limit-omaha-starting-hands-plo-preflop-strategy/&#34;&gt;https://upswingpoker.com/pot-limit-omaha-starting-hands-plo-preflop-strategy/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;온라인 포커 게임 전략에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-현대-온라인-포커의-패러다임&#34;&gt;서론: 현대 온라인 포커의 패러다임&lt;/h2&gt;&#xA;&lt;p&gt;현대 온라인 포커는 단순한 카드 게임의 영역을 넘어섰습니다. 이는 정보, 데이터, 그리고 게임 이론이 복잡하게 얽힌 지적 스포츠로 진화했습니다. &amp;ldquo;Exploit(착취)이 사실상 불가능한 온라인 포커 게임&amp;quot;이라는 상황 설정은 게임 이론 최적화(Game Theory Optimal, GTO) 전략의 중요성을 시사합니다.[1, 2] GTO는 이론적으로 완벽한 방어 전략을 제공하지만, 실제 온라인 포커 환경에서의 지속적인 수익 창출은 대부분의 플레이어가 GTO를 완벽하게 구사하지 못한다는 사실, 즉 상대의 불완전함을 체계적으로 파고드는 익스플로잇(Exploitative) 플레이에서 비롯됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>아키텍처 비교: VSA vs. Hexagonal Architecture</title>
      <link>https://philipjkim.github.io/posts/20250922-vsa-vs-hexagonal/</link>
      <pubDate>Mon, 22 Sep 2025 14:14:05 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250922-vsa-vs-hexagonal/</guid>
      <description>&lt;p&gt;이 포스트는 Vertical Slicing Architecture와 Hexagonal Architecture의 개념과 특징을 단순히 나열하는 것을 넘어, 두 아키텍처의 근본적인 설계 철학, 해결하고자 하는 핵심 문제, 그리고 실제 프로젝트에 적용했을 때 발생하는 트레이드오프를 심층적으로 분석하는 것을 목표로 합니다. 각 아키텍처의 태동 배경, 장단점, 이상적인 적용 시나리오를 비교 분석하고, 실제 적용 사례를 통해 이론이 현실에서 어떻게 구현되는지 살펴볼 것입니다. 최종적으로는 독자들이 자신의 프로젝트 맥락과 당면 과제에 가장 적합한 아키텍처를 정보에 입각하여 선택할 수 있도록 실질적인 통찰과 가이드를 제공하고자 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 이승환 - My Story (1993): 슬픔을 딛고 거장으로 발돋움한 음악적 서사</title>
      <link>https://philipjkim.github.io/posts/20250922-album-review-my-story/</link>
      <pubDate>Mon, 22 Sep 2025 10:26:19 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250922-album-review-my-story/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/XQfIvSJNUbiY5r2QgBQBAmgT5l8GbLn7xI7_fPLbqraEDU7_Xfw03uQ9vyI21Go7tC4_xNDsV4MQ2vkV1vdLNOxpY_jxkMcYSS1iVnjvNA7DsFcyx6n2WP-UkWe7ix2L7oj9kpwHDzAJB0MmfNJ6eA.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1993년 9월 발매된 이승환의 3집 &lt;em&gt;My Story&lt;/em&gt;는 그가 아이돌 스타를 넘어 진정한 아티스트로 자리매김하는 결정적인 분기점이 된 앨범입니다. 어머니를 여읜 개인적인 아픔을 겪은 후 제작되어, 이전보다 한층 더 무겁고 진중한 감성을 담아냈으며, 015B의 정석원, 더 클래식의 김광진과 박용준 등 당대 최고의 뮤지션들과의 협업을 통해 음악적 스펙트럼을 비약적으로 확장시킨 작품입니다. 이 앨범은 100만 장 이상의 판매고를 올리며, 이승환의 음악적 변신과 상업적 성공을 모두 증명해 보였습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>인물 소개: 안드레아 피를로: 필드의 건축가, 레지스타의 재정의</title>
      <link>https://philipjkim.github.io/posts/20250922-introduction-to-pirlo/</link>
      <pubDate>Mon, 22 Sep 2025 09:38:42 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250922-introduction-to-pirlo/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.guim.co.uk/img/static/sys-images/Football/Pix/pictures/2014/6/5/1402007385556/Andrea-Pirlo-Italy-012.jpg?width=700&amp;amp;quality=85&amp;amp;auto=format&amp;amp;fit=max&amp;amp;s=4b8f2ff89dd02b8592e41cc32182d4c4&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;안드레아 피를로의 선수 경력과 특징, 업적에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-서론-마에스트로의-등장&#34;&gt;1. 서론: 마에스트로의 등장&lt;/h2&gt;&#xA;&lt;p&gt;안드레아 피를로는 단순히 뛰어난 미드필더로만 평가되지 않습니다. 그는 축구 전술의 패러다임을 바꾼 혁신가이자, 한 세대의 축구에 영향을 미친 상징적인 인물입니다. 지네딘 지단, 사비 에르난데스, 안드레스 이니에스타 등과 함께 21세기 최고의 미드필더 중 한 명으로 거론되는 그는, 우아함, 비전, 그리고 경기 조율 능력을 겸비한 선수였습니다.[1]&lt;/p&gt;&#xA;&lt;p&gt;그의 이름은 &amp;lsquo;레지스타(Regista)&amp;rsquo;, 즉 후방 플레이메이커라는 포지션과 동의어가 되었습니다.[2, 3, 4] 이탈리아 대표팀 감독이었던 마르첼로 리피가 &amp;ldquo;발로 이야기하는 조용한 리더&amp;quot;라고 묘사했듯, 피를로는 화려한 언변이 아닌 경기장 위에서의 플레이로 자신의 가치를 증명했습니다.[5] 동료들로부터 &amp;lsquo;건축가(Il Architetto)&amp;lsquo;라는 별명으로 불린 그는, 팀 공격의 설계자이자 지휘자였습니다.[6] 이 글에서는 안드레아 피를로의 축구 경력을 심층적으로 분석하며, 그가 어떻게 전술적 필요에 의해 새로운 역할을 부여받고, 그 역할을 재정의하여 현대 축구에 지대한 영향을 미쳤는지 소개합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 테스트 데이터를 깔끔하게 만드세요</title>
      <link>https://philipjkim.github.io/posts/20250922-tott-cleanly-create-test/</link>
      <pubDate>Mon, 22 Sep 2025 09:29:50 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250922-tott-cleanly-create-test/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2018/02/testing-on-toilet-cleanly-create-test.html&#34;&gt;https://testing.googleblog.com/2018/02/testing-on-toilet-cleanly-create-test.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;테스트를 작성할 때, 우리는 종종 테스트 대상 코드가 소비할 객체들을 만들어야 합니다. 이 객체들은 진짜 객체일 수도 있고, 페이크(fake)나 목(mock) 객체일 수도 있습니다. 이러한 객체들을 생성하는 코드는 빠르게 지저분해지고, 테스트의 가독성을 해치며, 유지보수를 어렵게 만들 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;다음 예제를 살펴보겠습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testWriteSecureMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 테스트를 위한 설정&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;42&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Four score and seven years ago...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSignature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1a2b3c4d5e&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Abc.123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Abraham Lincoln&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 테스트 실행&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;writeSecureMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 상태 검증&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Sent secure message with signature 1a2b3c4d5e&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 테스트에서 객체 생성은 꽤 장황합니다. 테스트의 핵심 로직을 이해하기 어렵게 만들고, 테스트가 실제로 무엇을 검증하려는지 불분명하게 만듭니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 이승환 - Always (1991): 소포모어 징크스를 넘어선 100만 장의 신화</title>
      <link>https://philipjkim.github.io/posts/20250919-album-review-always/</link>
      <pubDate>Fri, 19 Sep 2025 16:28:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250919-album-review-always/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/83dWaE8Vz0yCmBaNYQPNQW2O9MJ4RV-cWj0XysymV2Nwu_jXtrzlBZknZ-MG1vFUu3KhBokCHYGJ0WsmuI8eaqxOnglgX_uLKEAI_ZaCc7Ce-5S6lxM_nB-hbM2SfsFx_S68islyHB4LK34QfFyoNg.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1991년 7월 발매된 이승환의 2집 &lt;em&gt;Always&lt;/em&gt;는 성공적인 데뷔를 마친 신인 가수를 단숨에 밀리언셀러의 반열에 올려놓은, 90년대 초반을 대표하는 명반입니다. 1집의 성공 공식을 계승하면서도 김현철, 장기호 등 새로운 실력파 뮤지션들을 대거 기용하여 한층 더 성숙하고 다채로운 사운드를 담아냈으며, 이는 이승환이라는 아티스트가 롱런할 수 있는 단단한 기반이 되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;앨범의-탄생과-주요-참여진&#34;&gt;앨범의 탄생과 주요 참여진&lt;/h2&gt;&#xA;&lt;p&gt;1집 &lt;em&gt;B.C 603&lt;/em&gt;의 성공 이후, 이승환은 소포모어 징크스에 대한 우려를 비웃듯 더욱 완성도 높은 앨범으로 돌아왔습니다. 1집의 성공을 이끈 핵심 파트너 오태호와의 협업을 이어가는 동시에, 김현철, 장기호, 박성식 등 당대 최고의 실력파 뮤지션들을 영입하여 음악적 스펙트럼을 넓혔습니다. 이 앨범은 저작권 분쟁으로 인해 타이틀곡 &amp;ldquo;너를 향한 마음&amp;quot;과 &amp;ldquo;회상이 지나간 오후&amp;quot;가 제외된 9트랙 버전이 이후에 발매되기도 했으나, 100만 장 이상 판매되며 상업적으로 큰 성공을 거두었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 상태를 변경하는 메서드 호출만 검증하세요</title>
      <link>https://philipjkim.github.io/posts/20250919-tott-only-verify-state/</link>
      <pubDate>Fri, 19 Sep 2025 15:26:56 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250919-tott-only-verify-state/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2017/01/testing-on-toilet-keep-cause-and-effect.html&#34;&gt;https://testing.googleblog.com/2017/01/testing-on-toilet-keep-cause-and-effect.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;이 테스트에서 어떤 라인을 안전하게 제거할 수 있을까요?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addPermissionToDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAuthorizer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockUserService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPermissionDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;grantPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;READ_ACCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 이 메서드 중 하나라도 호출되지 않으면 테스트는 실패합니다.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockUserService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isUserActive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPermissionDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPermissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPermissionDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isValidPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;READ_ACCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPermissionDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;READ_ACCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;정답은 &lt;strong&gt;상태를 변경하지 않는 메서드&lt;/strong&gt;를 검증하는 호출들을 제거할 수 있다는 것입니다.&lt;/p&gt;&#xA;&lt;p&gt;다른 객체에 대한 메서드 호출은 다음 두 가지 범주 중 하나에 속합니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;상태 변경(State-changing):&lt;/strong&gt; 부작용(side effects)이 있고 테스트 대상 코드 외부의 세상을 바꾸는 메서드. 예: &lt;code&gt;sendEmail()&lt;/code&gt;, &lt;code&gt;saveRecord()&lt;/code&gt;, &lt;code&gt;logAccess()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;비-상태 변경(Non-state-changing):&lt;/strong&gt; 테스트 대상 코드 외부 세상에 대한 정보를 반환하고 아무것도 수정하지 않는 메서드. 예: &lt;code&gt;getUser()&lt;/code&gt;, &lt;code&gt;findResults()&lt;/code&gt;, &lt;code&gt;readFile()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;일반적으로 &lt;strong&gt;상태를 변경하지 않는 메서드가 호출되었는지 검증하는 것은 피해야 합니다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 이승환 - B.C 603 (1989): 록과 신스팝의 조우, &#39;어린 왕자&#39;의 화려한 등장</title>
      <link>https://philipjkim.github.io/posts/20250918-album-review-bc603/</link>
      <pubDate>Thu, 18 Sep 2025 13:33:02 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250918-album-review-bc603/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/PWP4uO6b9HU3oMdEP2ZkrSMUIaStjbstOgEk5chbH1xsnSPidZLfOl-2x0sq5wMYaQZ7TQTVsliMPAOJ4zAkSlyJV1tRLYSGznNZslQHh0F-7vdc5GUYLszc2CEktvYwZwfLiCrHIgmK31luOLezXQ.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1989년 10월 15일 발매된 이승환의 정규 1집 &lt;em&gt;B.C 603&lt;/em&gt;은 80년대 한국 언더그라운드 록의 감수성과 당시 유행하던 신스팝(Synth-pop) 사운드를 결합하여 팝 발라드의 새로운 방향을 제시한, 한 천재 신인의 기념비적인 데뷔 앨범입니다. 당대 최고의 언더그라운드 뮤지션들이 대거 참여하여 만들어낸 이 앨범은, 이승환이라는 아티스트의 화려한 서막을 알렸을 뿐만 아니라, 90년대 한국 대중음악의 르네상스를 예고한 작품으로 평가받습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI 툴 소개: GitHub Spec Kit: AI 에이전트 개발을 위한 명세서</title>
      <link>https://philipjkim.github.io/posts/20250917-introduction-to-spec-kit/</link>
      <pubDate>Wed, 17 Sep 2025 10:02:47 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250917-introduction-to-spec-kit/</guid>
      <description>&lt;p&gt;GitHub Spec Kit은 코드와 상호작용하는 AI 에이전트 및 모델 개발자를 위한 명세(spec) 모음입니다. 이 명세들은 AI 에이전트가 파일 시스템과 상호작용하고, 명령을 실행하며, 사용자와 소통하는 방식에 대한 &lt;strong&gt;모범 사례(best practice)를 정의&lt;/strong&gt;합니다.&lt;/p&gt;&#xA;&lt;p&gt;이러한 표준을 채택함으로써, 우리는 AI 에이전트 개발 생태계가 더욱 강력하고 상호 운용 가능하도록 만들 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://github.com/github/spec-kit&#34;&gt;https://github.com/github/spec-kit&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt; (2025-09-17 기준)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-명세-기반-개발이란-무엇입니까&#34;&gt;🤔 명세 기반 개발이란 무엇입니까?&lt;/h2&gt;&#xA;&lt;p&gt;명세 기반 개발은 전통적인 소프트웨어 개발의 &lt;strong&gt;판도를 뒤집습니다&lt;/strong&gt;. 수십 년 동안 코드가 왕이었습니다 — 명세는 코딩이라는 &amp;ldquo;진짜 작업&amp;quot;이 시작되면 만들어졌다가 버려지는 비계(scaffolding)에 불과했습니다. 명세 기반 개발은 이를 변화시킵니다: &lt;strong&gt;명세가 실행 가능해지며&lt;/strong&gt;, 단지 구현을 안내하는 것을 넘어 직접 작동하는 구현체를 생성합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 중첩 줄이기, 복잡도 낮추기</title>
      <link>https://philipjkim.github.io/posts/20250917-tott-code-health-reduce-nesting/</link>
      <pubDate>Wed, 17 Sep 2025 09:49:08 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250917-tott-code-health-reduce-nesting/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2017/06/code-health-reduce-nesting-reduce.html&#34;&gt;https://testing.googleblog.com/2017/06/code-health-reduce-nesting-reduce.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;과도하게 중첩된 코드는 가독성을 해치고 오류를 발생시키기 쉽습니다. 아래 두 버전의 코드에서 버그를 찾아보세요.&lt;/p&gt;&#xA;&lt;p&gt;과도하게 중첩된 코드:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RPC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetAuthorizedUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetEnc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetRows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetRows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EmptyError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AuthError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;unauthorized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wrong encoding&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RpcError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;중첩이 적은 코드:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RPC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RpcError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetAuthorizedUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wrong encoding&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetEnc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AuthError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;unauthorized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetRows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EmptyError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseRow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetRows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;avg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;정답&lt;/strong&gt;: &amp;ldquo;wrong encoding&amp;quot;과 &amp;ldquo;unauthorized&amp;rdquo; 에러가 서로 바뀌었습니다. 이 버그는 리팩터링된 버전에서 더 쉽게 발견할 수 있는데, 그 이유는 검사가 에러를 처리하는 부분 바로 옆에서 일어나기 때문입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>애틀랜타 브레이브스 Big 3: 그렉 매덕스, 톰 글래빈, 존 스몰츠</title>
      <link>https://philipjkim.github.io/posts/20250916-atlanta-braves-big-3/</link>
      <pubDate>Tue, 16 Sep 2025 10:40:36 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250916-atlanta-braves-big-3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.ajc.com/resizer/v2/WTDRRV46Z3OEGQWAC7VQUYY46I.jpg?auth=ec0fa5b9eba83cd51fdcf40463f78822b868f3447876ed4ac5d9217e5da27c28&amp;amp;width=790&amp;amp;height=440&amp;amp;smart=true&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;애틀랜타 브레이브스의 역대급 선발진 Big 3 에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;i-서론-애틀랜타-브레이브스-왕조의-서막&#34;&gt;I. 서론: 애틀랜타 브레이브스, 왕조의 서막&lt;/h2&gt;&#xA;&lt;p&gt;1990년까지 7년 연속 패배 시즌을 기록하며 암흑기에 있던 애틀랜타 브레이브스는 1991년 &amp;lsquo;꼴찌에서 1위로(Worst-to-First)&amp;lsquo;라는 극적인 반전을 이루며 내셔널리그(NL) 페넌트를 차지했습니다.[1] 이는 메이저리그 역사상 전례 없는 14년 연속 지구 우승(1991-2005)이라는 위대한 왕조의 서막이었습니다.[1, 2, 3] 이 장기적인 성공의 중심에는 역사상 가장 위대한 투수진으로 평가받는 그렉 매덕스, 톰 글래빈, 존 스몰츠, 즉 &amp;lsquo;Big 3&amp;rsquo;가 있었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 서태지와 아이들 - 2집 (1992): K-Pop의 빅뱅</title>
      <link>https://philipjkim.github.io/posts/20250916-album-review-seotaiji-2/</link>
      <pubDate>Tue, 16 Sep 2025 09:42:07 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250916-album-review-seotaiji-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/L9sMbyGwSJi2H0psxgmeeTaUGzzqBUMWn9P4ouasYxeZegx8VTysmdT3sdbYZvNU79jeEXaa9LuXERM7DrEGQslqcYQkUpQWDl9NI4iQzQG8-gHvbsVChoicE61JsWBa9S6w5r-sA0hKVp4OPdXSDw.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1992년, 혜성처럼 나타나 대한민국 대중음악의 판도를 완전히 뒤바꾼 그룹, 서태지와 아이들. 그들이 1년 만에 발표한 2집 앨범은 1집의 충격을 뛰어넘는 또 다른 &lt;strong&gt;&amp;lsquo;사건&amp;rsquo;&lt;/strong&gt; 이었습니다. 당시의 기준으로는 설명 불가능했던 파격과 실험 정신으로 가득 찬 이 앨범은, 30년이 지난 지금 들어도 여전히 세련되고 독창적입니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;아티스트-서태지와-아이들&#34;&gt;아티스트: 서태지와 아이들&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;서태지&lt;/strong&gt; (본명 정현철, 1972년생)는 밴드 시나위의 베이시스트 출신으로, 록 음악에 깊은 뿌리를 두고 있습니다. 그는 그룹의 리더이자 거의 모든 곡의 작사, 작곡, 프로듀싱을 도맡아 음악적 방향성을 제시했습니다. &lt;strong&gt;양현석&lt;/strong&gt; (1970년생)과 &lt;strong&gt;이주노&lt;/strong&gt; (본명 이상우, 1967년생)는 당대 최고의 댄서들로, 서태지의 음악에 날개를 달아주는 화려하고 독창적인 안무를 선보였습니다. 이 세 명의 조합은 음악과 퍼포먼스가 완벽한 조화를 이루며 이전에는 볼 수 없었던 새로운 형태의 &amp;lsquo;아티스트 그룹&amp;rsquo;을 탄생시켰습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 호러의 제왕, 스티븐 킹의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250916-introduction-to-king/</link>
      <pubDate>Tue, 16 Sep 2025 09:14:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250916-introduction-to-king/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.usatoday.com/gcdn/authoring/authoring-images/2025/09/13/USAT/86142109007-usatsi-24487957.jpg?width=700&amp;amp;height=497&amp;amp;fit=crop&amp;amp;format=pjpg&amp;amp;auto=webp&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;스티븐 킹(Stephen King, 1947-)은 현대 공포(호러) 소설의 패러다임을 바꾼 살아있는 전설이자, 전 세계적으로 가장 많은 독자를 보유한 대중 작가입니다. 그는 평범한 일상에 깃든 공포를 탁월하게 포착하고, 인간 내면의 어두운 심리를 파고들어 단순한 장르 소설을 넘어선 문학적 성취를 이뤄냈습니다. 이 글은 &amp;lsquo;호러의 제왕&amp;rsquo; 스티븐 킹의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 뉴 저널리즘의 선구자, 톰 울프의 세계</title>
      <link>https://philipjkim.github.io/posts/20250916-introduction-to-wolfe/</link>
      <pubDate>Tue, 16 Sep 2025 09:11:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250916-introduction-to-wolfe/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.vanityfair.com/photos/56157786fee6babf300f46f4/4:3/w_1280,h_960,c_limit/t-tom-wolfe-radical-chic-me-decade-right-stuff-michael-lewis-the-white-stuff.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;톰 울프(Tom Wolfe, 1930-2018)는 20세기 후반 미국 저널리즘과 문학의 지형을 바꾼 혁신적인 작가입니다. 그는 &amp;lsquo;뉴 저널리즘(New Journalism)&amp;lsquo;의 기수로서, 소설적 기법을 저널리즘에 도입하여 당대 미국 사회의 문화와 인물 군상을 누구보다 생생하고 역동적으로 포착했습니다. 이 글은 톰 울프의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;울프의-생애와-작품-활동&#34;&gt;울프의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;톰 울프의 삶은 그의 글처럼 미국 사회의 중심부를 관통하는 여정이었습니다. 그는 1930년 버지니아 주 리치먼드에서 태어나 워싱턴 앤 리 대학교를 졸업하고, 예일 대학교에서 미국학 박사 학위를 취득했습니다. 학자의 길 대신 그는 저널리스트가 되기로 결심하고, 《뉴욕 헤럴드 트리뷴》 등에서 기자로 활동하며 경력을 쌓았습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>벵골스의 지배: 신시내티 공격 &#39;빅 4&#39;와 챔피언십을 향한 여정</title>
      <link>https://philipjkim.github.io/posts/20250915-nfl-bengals-offense/</link>
      <pubDate>Mon, 15 Sep 2025 14:53:55 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250915-nfl-bengals-offense/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/clubfantasyffl.com/wp-content/uploads/2025/07/2025_A-Look-Inside_Bengals_IG.png?resize=1080%2C1080&amp;amp;ssl=1&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;신시내티 벵골스의 공격 코어들과 전술에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-현대-공격-전술의-설계자들&#34;&gt;서론: 현대 공격 전술의 설계자들&lt;/h2&gt;&#xA;&lt;p&gt;신시내티 벵골스는 현대 NFL에서 가장 강력한 공격진의 핵을 구축했다. 이는 단순히 개별적인 재능의 집합이 아닌, 상호 보완적인 기술이 현대 공격 설계의 정수를 보여주는 4인조다. 쿼터백 조 버로우(Joe Burrow), 와이드 리시버 자마르 체이스(Ja&amp;rsquo;Marr Chase)와 티 히긴스(Tee Higgins), 그리고 러닝백 체이스 브라운(Chase Brown)은 단순한 스타 선수를 넘어, 시너지를 통해 리그를 지배하는 하나의 유기적인 유닛을 형성했다. 이 보고서는 벵골스의 역사적인 공격력이 팀의 고질적인 약점인 수비와 오펜시브 라인의 불안정성을 극복하고 궁극적으로 롬바르디 트로피를 차지할 수 있을지에 대한 핵심 질문에 답하고자 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 현실의 해체자, 필립 K. 딕의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250915-introduction-to-dick/</link>
      <pubDate>Mon, 15 Sep 2025 13:49:09 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250915-introduction-to-dick/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSIDSAFCfjlf6r4VsR7d97FEO7l0bqqxqqDDg&amp;amp;s&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;필립 K. 딕(Philip K. Dick, 1928-1982)은 20세기 과학소설(SF) 장르에 가장 깊은 철학적 질문을 던진 작가입니다. 그는 편집증적 불안과 정교한 상상력을 바탕으로 &amp;lsquo;무엇이 현실이고 무엇이 가짜인가&amp;rsquo;라는 질문을 집요하게 탐구하며, 현대 포스트모던 문화에 지대한 영향을 미쳤습니다. 이 글은 필립 K. 딕의 혼란스러웠던 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;딕의-생애와-작품-활동&#34;&gt;딕의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;필립 K. 딕의 삶은 그의 소설만큼이나 현실과 환상의 경계가 모호한 경험들로 채워져 있습니다. 그는 1928년 시카고에서 태어났습니다. 태어난 지 얼마 되지 않아 쌍둥이 여동생이 사망한 사건은 그의 삶과 작품에 평생에 걸친 상실감과 &amp;lsquo;유령 쌍둥이&amp;rsquo;라는 모티브를 남겼습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 원인과 결과를 명확하게 유지하세요</title>
      <link>https://philipjkim.github.io/posts/20250912-tott-keep-cause-and-effect-clear/</link>
      <pubDate>Fri, 12 Sep 2025 12:33:09 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250912-tott-keep-cause-and-effect-clear/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2017/01/testing-on-toilet-keep-cause-and-effect.html&#34;&gt;https://testing.googleblog.com/2017/01/testing-on-toilet-keep-cause-and-effect.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;이 테스트가 올바른지 판단할 수 있나요?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testIncrement_existingKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;tally&lt;/code&gt; 객체가 어떻게 설정되었는지 보지 않고는 &lt;strong&gt;알아내는 것이 불가능합니다&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tally&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 200줄 떨어져 있음&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testIncrement_existingKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;문제는 &lt;code&gt;key1&lt;/code&gt;의 값을 수정하는 부분이 &lt;em&gt;검증(assertion)으로부터 200줄 이상 떨어져 있다&lt;/em&gt;는 점입니다. 다시 말해, &lt;strong&gt;&amp;lsquo;원인&amp;rsquo;이 &amp;lsquo;결과&amp;rsquo;로부터 너무 멀리 숨겨져 있습니다&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 이상은 - 공무도하가(公無渡河歌) (1995): 시대를 초월한 소리의 구도자, 경계를 허물다</title>
      <link>https://philipjkim.github.io/posts/20250912-album-review-gongmudohaga/</link>
      <pubDate>Fri, 12 Sep 2025 10:55:10 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250912-album-review-gongmudohaga/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/JkhAL2DxPLkY638xwY9gvzHik26ctEY9dV-ErePRCQSuBcty0xfo-OQiFIFvpIf7kA6hlFJy7hZXug5dtZL32OIVL9gocnh7HC_olit9YfM3yh1DVexrrb_ReOZ7xfhaWhvjkzV3cioHLz-a-hOS9w.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1995년 11월 발매된 이상은의 6집 &lt;em&gt;공무도하가&lt;/em&gt;는 90년대 대한민국 대중음악사에서 가장 중요한 전환점이자, 가장 독창적인 예술적 성취로 평가받는 앨범입니다. 아이돌 스타에서 진정한 아티스트로 거듭나는 이상은의 치열한 자기 탐구와 음악적 실험이 담긴 이 앨범은, 동양적 정서와 서구의 모던 록 사운드를 완벽하게 결합하며 시대를 앞서간 걸작으로 기록되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;이상은-경계-없는-탐험가-아티스트-리채lee-tzsche&#34;&gt;이상은: 경계 없는 탐험가, 아티스트 &amp;lsquo;리채(Lee-Tzsche)&amp;rsquo;&lt;/h2&gt;&#xA;&lt;p&gt;이상은은 1988년 강변가요제에서 자작곡 &amp;ldquo;담다디&amp;quot;로 대상을 수상하며 혜성처럼 등장한 뮤지션입니다. &amp;lsquo;담다디&amp;rsquo; 신드롬을 일으키며 최고의 아이돌 스타로 떠올랐지만, 그는 상업적 성공에 안주하지 않고 끊임없이 자신의 음악 세계를 확장해 온 진정한 아티스트입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 남부 고딕의 선구자, 플래너리 오코너의 세계</title>
      <link>https://philipjkim.github.io/posts/20250912-introduction-to-o-connor/</link>
      <pubDate>Fri, 12 Sep 2025 10:42:52 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250912-introduction-to-o-connor/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://contents.kyobobook.co.kr/bcast/2014/11/10/a5102375b2a44e238c1e859cd2475fb2.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;플래너리 오코너(Flannery O&amp;rsquo;Connor, 1925-1964)는 20세기 미국 남부 문학을 대표하는 가장 독창적이고 강렬한 목소리 중 한 명입니다. 그녀는 독실한 가톨릭 신앙을 바탕으로, 기괴하고 폭력적인 인물과 사건들을 통해 인간의 구원과 신의 은총이라는 심오한 종교적 주제를 탐구했습니다. 이 글은 플래너리 오코너의 짧지만 강렬했던 삶과 작품 세계, 그녀의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;오코너의-생애와-작품-활동&#34;&gt;오코너의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;플래너리 오코너의 삶은 그녀의 문학처럼 신앙과 고통이라는 두 가지 축으로 이루어져 있습니다. 그녀는 1925년 미국 조지아 주 서배너의 독실한 가톨릭 집안에서 태어났습니다. 개신교가 주류인 미국 남부(&amp;lsquo;바이블 벨트&amp;rsquo;)에서 가톨릭 신자로 살아간 경험은 그녀에게 소수자의 정체성과 함께 깊은 신앙심을 심어주었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 무엇이 좋은 End-to-End 테스트를 만드는가?</title>
      <link>https://philipjkim.github.io/posts/20250911-tott-good-e2e-test/</link>
      <pubDate>Thu, 11 Sep 2025 10:33:09 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250911-tott-good-e2e-test/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2016/09/testing-on-toilet-what-makes-good-end.html&#34;&gt;https://testing.googleblog.com/2016/09/testing-on-toilet-what-makes-good-end.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;End-to-end(E2E) 테스트는 시스템의 한쪽 끝에서 다른 쪽 끝까지, 그 사이의 모든 것을 블랙박스로 취급하며 전체 시스템을 테스트합니다. E2E 테스트는 시스템 전반에 걸쳐 나타나는 버그를 잡아낼 수 있습니다. 단위 테스트, 통합 테스트와 더불어 E2E 테스트는 균형 잡힌 테스트 식단의 핵심적인 부분이며, 운영 환경과 거의 유사한 상태에서 시스템의 건전성에 대한 확신을 줍니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 안타깝게도, E2E 테스트는 단위 테스트나 통합 테스트보다 느리고, 불안정하며(flaky), 유지보수 비용이 더 비쌉니다. E2E 테스트가 필요한지, 만약 그렇다면 어떻게 작성하는 것이 최선일지 신중하게 고려해야 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: U2 - The Joshua Tree (1987): 미국의 신화와 현실을 관통한 록의 서사시</title>
      <link>https://philipjkim.github.io/posts/20250911-album-review-the-joshua-tree/</link>
      <pubDate>Thu, 11 Sep 2025 10:20:54 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250911-album-review-the-joshua-tree/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/71nhNKvy&amp;#43;fL._UF1000,1000_QL80_.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1987년 3월 9일 발매된 U2의 다섯 번째 스튜디오 앨범 &lt;em&gt;The Joshua Tree&lt;/em&gt;는 아일랜드의 록 밴드를 세계적인 슈퍼스타의 반열에 올려놓은 기념비적인 작품입니다. 미국의 광활한 풍경과 그 안에 담긴 신화, 그리고 모순적인 현실에 대한 깊은 탐구를 담은 이 앨범은, 상업적으로 전 세계에서 2,500만 장 이상 판매되었으며, 그래미 어워드에서 &amp;lsquo;올해의 앨범&amp;rsquo;을 수상하며 80년대 록 음악의 상징으로 자리매김했습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: SF 시인, 레이 브래드버리의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250911-introduction-to-bradbury/</link>
      <pubDate>Thu, 11 Sep 2025 10:09:29 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250911-introduction-to-bradbury/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.newyorker.com/photos/590953ea6552fa0be682c8a9/master/w_2560%2Cc_limit/bradbury-diaz.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;레이 브래드버리(Ray Bradbury, 1920-2012)는 20세기 미국 문학계에서 가장 독창적이고 사랑받는 작가 중 한 명입니다. 그는 자신을 SF 작가가 아닌 &amp;lsquo;아이디어 작가&amp;rsquo;로 칭했으며, 장르의 경계를 넘어 인간의 꿈과 공포, 기술 문명에 대한 날카로운 통찰을 시적인 문체로 그려냈습니다. 이 글은 레이 브래드버리의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;브래드버리의-생애와-작품-활동&#34;&gt;브래드버리의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;레이 브래드버리의 삶은 그의 작품만큼이나 경이로움과 상상력으로 가득 차 있습니다. 그는 1920년 미국 일리노이 주 워키건에서 태어났습니다. 그의 어린 시절은 마술과 서커스, 그리고 도서관에 대한 사랑으로 채워져 있었으며, 이는 평생 그의 작품 세계에 깊은 영감을 주었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 전람회(Exhibition) - 2집 Exhibition 2 (1996): 대중음악의 품격을 높인 완벽주의의 산물</title>
      <link>https://philipjkim.github.io/posts/20250909-album-review-exhibition-2/</link>
      <pubDate>Tue, 09 Sep 2025 15:57:15 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250909-album-review-exhibition-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/3tIComi2uo0j5K7E-jFbNdJ2ZPAiH3soCVIrE9yCdAMfzH1KAEt_PZCH8ZmZ3XD0MKfSlEbFYc_mbwdq59SHpEYwWBRlWlOq7Cjel6iy0yltZBIkJqfFBR8Aq4juM5DCKT1q55qV8jmWEDAE21Psog.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1996년 4월 발매된 전람회의 2집 &lt;em&gt;Exhibition 2&lt;/em&gt;는 90년대 대한민국 대중음악이 도달한 가장 높은 수준의 음악적 성취를 보여주는 걸작입니다. 클래식과 재즈, 팝을 넘나드는 김동률의 압도적인 작곡 및 편곡 능력과 성숙해진 그의 보컬이 결합된 이 앨범은, 상업적 성공과 비평적 찬사를 동시에 획득하며 한국형 팝 발라드의 새로운 기준을 제시한 기념비적인 작품으로 평가받습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;전람회-90년대-고품격-팝의-대명사-김동률과-서동욱&#34;&gt;전람회: 90년대 &amp;lsquo;고품격 팝&amp;rsquo;의 대명사, 김동률과 서동욱&lt;/h2&gt;&#xA;&lt;p&gt;전람회는 1993년 연세대학교 재학 중이던 김동률과 서동욱이 결성한 남성 듀오입니다. 이들은 같은 해 MBC 대학가요제에서 자작곡 &amp;ldquo;꿈속에서&amp;quot;로 대상을 수상하며 화려하게 데뷔했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 케니 버렐(Kenny Burrell) - Midnight Blue (1963): 블루스의 정수를 담은 재즈 기타의 교과서</title>
      <link>https://philipjkim.github.io/posts/20250909-album-review-midnight-blue/</link>
      <pubDate>Tue, 09 Sep 2025 09:21:47 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250909-album-review-midnight-blue/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/81GIA90MjCL._UF1000,1000_QL80_.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1963년 블루노트 레코드를 통해 발매된 케니 버렐의 &lt;em&gt;Midnight Blue&lt;/em&gt;는 재즈 역사상 가장 순수하고 깊이 있는 블루스 기타 앨범 중 하나로 평가받는 작품입니다. 화려한 기교나 복잡한 화성보다는, 늦은 밤의 클럽에서 펼쳐지는 진솔한 잼 세션의 분위기를 고스란히 담아낸 이 앨범은, 블루스가 재즈의 근원임을 증명하며 시대를 초월한 사운드로 오늘날까지 수많은 리스너와 뮤지션들에게 영감을 주고 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;케니-버렐-블루스의-영혼을-지닌-재즈-기타의-거장&#34;&gt;케니 버렐: 블루스의 영혼을 지닌 재즈 기타의 거장&lt;/h2&gt;&#xA;&lt;p&gt;케니 버렐(1931~)은 우아한 톤과 스윙감, 그리고 무엇보다 블루스에 깊이 뿌리내린 연주로 재즈 기타의 역사를 대표하는 거장입니다. 디트로이트의 풍부한 재즈 씬에서 성장한 그는 찰리 크리스천, 장고 라인하르트와 같은 재즈 기타리스트는 물론, 티본 워커, 머디 워터스와 같은 블루스 뮤지션들에게서도 깊은 영향을 받았습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 은둔의 작가, J. D. 샐린저의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250909-introduction-to-salinger/</link>
      <pubDate>Tue, 09 Sep 2025 09:12:54 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250909-introduction-to-salinger/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ0rbhGhUvkFaAg96BAB6VWK65rSjKyqNHDcA&amp;amp;s&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;제롬 데이비드 샐린저(Jerome David Salinger, 1919-2010)는 단 한 편의 장편 소설 『호밀밭의 파수꾼』으로 20세기 미국 문학에 거대한 족적을 남긴 작가입니다. 그는 전후 세대의 청소년들이 겪는 불안과 소외를 독창적인 목소리로 그려내며 하나의 문화적 현상이 되었으나, 명성의 정점에서 스스로를 세상과 격리시킨 은둔의 작가로도 유명합니다. 이 글은 J. D. 샐린저의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 언어 모델이 &#39;환각&#39;을 일으키는 이유와 그 해결 방안</title>
      <link>https://philipjkim.github.io/posts/20250909-why-language-models-hallucinate/</link>
      <pubDate>Tue, 09 Sep 2025 09:03:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250909-why-language-models-hallucinate/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://openai.com/index/why-language-models-hallucinate/&#34;&gt;https://openai.com/index/why-language-models-hallucinate/&lt;/a&gt; (translated by Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;대규모 언어 모델(LLM)은 방대한 양의 텍스트 데이터로 학습하여 다음에 올 단어를 예측하도록 훈련됩니다. 하지만 이 과정은 모델이 사실과 다른 내용을 그럴듯하게 만들어내는, 이른바 &lt;strong&gt;&amp;lsquo;환각(hallucination)&amp;rsquo;&lt;/strong&gt; 현상을 일으키기도 합니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 환각이 왜 발생하는지 기술적으로 설명하고, 이 문제를 해결하기 위한 저희의 접근 방식을 공유하고자 합니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;환각은-왜-일어나는가&#34;&gt;환각은 왜 일어나는가?&lt;/h2&gt;&#xA;&lt;p&gt;환각은 모델의 근본적인 작동 방식에서 비롯됩니다. 모델은 &amp;lsquo;진실&amp;rsquo;을 이해하는 것이 아니라, 훈련 데이터에 나타난 &lt;strong&gt;통계적 패턴&lt;/strong&gt;을 학습할 뿐입니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 훈련 데이터의 한계&lt;/strong&gt;&#xA;모델은 인터넷, 책 등에서 수집한 방대한 텍스트로 학습합니다. 이 데이터에는 잘못된 정보, 편견, 모순된 내용이 포함되어 있을 수밖에 없습니다. 모델은 이 모든 것을 사실 여부와 관계없이 패턴으로 학습하기 때문에, 부정확한 정보를 사실인 것처럼 생성할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 솔직히 말해, 아이를 낳은 것을 후회하나요?</title>
      <link>https://philipjkim.github.io/posts/20250909-did-you-regret-having-children/</link>
      <pubDate>Tue, 09 Sep 2025 08:52:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250909-did-you-regret-having-children/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 &lt;a href=&#34;https://www.quora.com/No-lying-did-you-regret-having-children&#34;&gt;Quora 에 있는 자녀 관련 질문과 답변&lt;/a&gt;을 Gemini 를 통해 번역한 것입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;&#xA;&lt;p&gt;솔직히 말해, 아이를 낳은 것을 후회하나요?&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;answer-1-angie-martin&#34;&gt;Answer 1 (Angie Martin)&lt;/h3&gt;&#xA;&lt;p&gt;저는 네 명의 아이를 낳은 것을 100%, 아주 깊이 후회합니다. 섣불리 비난하기 전에, 제 이야기를 먼저 들어주세요.&lt;/p&gt;&#xA;&lt;p&gt;저는 내향적이고 성실한 사람입니다. 어머니는 제가 태어났을 때 &amp;lsquo;엔젤(천사)&amp;lsquo;이라는 이름을 지어주셨고, 그 이름은 제가 평생 완벽한 아이가 되기 위해 애쓰게 만들었죠.&lt;/p&gt;&#xA;&lt;p&gt;슬프게도, 제가 스스로를 몰아붙인 것만큼이나 주변 사람들은 저를 더 힘들게 했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: LLM과 소프트웨어 개발에 대한 몇 가지 생각</title>
      <link>https://philipjkim.github.io/posts/20250908-some-thoughts-on-llms-and-software-development/</link>
      <pubDate>Mon, 08 Sep 2025 14:10:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250908-some-thoughts-on-llms-and-software-development/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://martinfowler.com/articles/202508-ai-thoughts.html&#34;&gt;https://martinfowler.com/articles/202508-ai-thoughts.html&lt;/a&gt; (translated by Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;저는 몇 주간 이 사이트 관리를 잠시 떠나려 합니다 (일부 휴가, 일부 업무). 일상적인 루틴에서 벗어나 몇 주를 보낼 생각을 하니, LLM과 AI의 현재 상태에 대한 산발적인 생각들을 나누고 싶은 충동을 느낍니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;AI가 소프트웨어 개발에 어떤 영향을 미치는지에 대한 초기 설문조사들을 몇 가지 봤습니다. 과연 개발 속도를 높여주고 있는지, 코드 품질을 향상시키는지 아니면 망치고 있는지에 대한 내용들이죠. 이런 설문조사들의 큰 문제점 중 하나는 사람들이 LLM을 &lt;strong&gt;어떻게&lt;/strong&gt; 사용하고 있는지 고려하지 않는다는 점입니다. 제가 아는 바로는 LLM 사용의 대다수가 코파일럿(Co-pilot)을 이용하는 것과 같은 단순한 자동 완성에 그치고 있습니다. 하지만 LLM으로부터 가장 큰 가치를 얻는다고 말하는 사람들은 자동 완성이 그다지 유용하지 않다고 생각하며, LLM이 소스 코드 파일을 직접 읽고 편집하여 작업을 수행하는 방식을 선호합니다. LLM을 사용하는 다양한 워크플로우를 무시하는 설문조사는 사람들을 잘못된 길로 이끌 수 있는 데이터를 만들어낼까 봐 걱정됩니다.&#xA;(또 다른 복잡한 문제는 모델마다 기능이 다르다는 점입니다.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>팁: 모두가 저지르는 14가지 바이크패킹 실수 (그리고 피하는 방법)</title>
      <link>https://philipjkim.github.io/posts/20250908-14-bikepacking-mistakes/</link>
      <pubDate>Mon, 08 Sep 2025 13:08:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250908-14-bikepacking-mistakes/</guid>
      <description>&lt;p&gt;우리 모두는 실수를 합니다. 노련한 사이클리스트부터 처음 도전하는 사람까지, 누구에게나 일어나는 일이죠. 수많은 변수가 존재하는 이런 종류의 모험에서는 당연한 일입니다. 최신 영상에서는 우리 BIKEPACKING.com 팀원 다수가 한 번쯤 저질렀던 14가지 실수를 공유하여 여러분이 미래에 같은 실수를 피할 수 있도록 돕고자 합니다. 아래 영상을 시청하시고, 관련 링크와 자료가 포함된 글 버전을 확인해 보세요.&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/I9Mes04hrxY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://bikepacking.com/plan/14-bikepacking-mistakes/&#34;&gt;https://bikepacking.com/plan/14-bikepacking-mistakes/&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Rust 의 목적성에 대한 질문과 답변</title>
      <link>https://philipjkim.github.io/posts/20250908-quora-is-rust-new-ruby/</link>
      <pubDate>Mon, 08 Sep 2025 11:28:08 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250908-quora-is-rust-new-ruby/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 &lt;a href=&#34;https://www.quora.com/Rust-is-not-so-much-about-memory-safety-as-it-is-about-being-able-to-hire-cheap-juniors-in-hope-they-can-now-do-the-job-of-experienced-seniors-by-using-Rust-Am-I-wrong-Is-Rust-the-new-Ruby&#34;&gt;Quora 에 Rust 관련 올라온 질문과 답변&lt;/a&gt;을 Gemini 를 통해 번역한 것입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;q-rust는-메모리-안전성보다는-rust를-사용해-경력-있는-시니어-개발자들의-일을-값싼-주니어들이-해낼-수-있을-거라는-희망을-품고-그들을-고용하는-것과-더-관련이-있는-것-아닌가요-제가-틀렸나요-rust가-새로운-ruby인가요&#34;&gt;Q: Rust는 &amp;lsquo;메모리 안전성&amp;rsquo;보다는 Rust를 사용해 경력 있는 시니어 개발자들의 일을 값싼 주니어들이 해낼 수 있을 거라는 희망을 품고 그들을 고용하는 것과 더 관련이 있는 것 아닌가요? 제가 틀렸나요? Rust가 새로운 Ruby인가요?&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;a1-matt-laine의-답변&#34;&gt;A1 (Matt Laine의 답변):&lt;/h3&gt;&#xA;&lt;p&gt;어떤 프로그래밍 언어의 기능이든 홍보되는 데는 이유가 있습니다. 어떤 기능들은 언어 설계자가 멋지다고 생각해서 홍보되죠. 또 다른 기능들은 개발 속도를 높여준다거나, 특정 관리자들이 골치 아프다고 여기는 종류의 오류들을 제거해준다거나, 비즈니스에 도움이 되는 어떤 지표를 향상시켜 준다는 약속을 하는 것으로 해석될 수 있기 때문에 홍보됩니다. 또 어떤 기능들은 그저 과대광고를 철석같이 믿고 다른 사람들도 그렇게 해주기를 바라는 &amp;lsquo;언어 전도사들&amp;rsquo;에 의해 홍보되기도 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 이승환 - Human (1995): 90년대 대중음악의 정점을 찍은 블록버스터 앨범</title>
      <link>https://philipjkim.github.io/posts/20250908-album-review-human/</link>
      <pubDate>Mon, 08 Sep 2025 11:11:02 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250908-album-review-human/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/wZtkbEOpD6dDP-Ck4ZGF-4AmOyxPYAig6iI7fHuJQg6caFXMbxTpZR89wlxB3lcOAQTsRkTpbYxgl2ToYyXtUuYhsdOVrp_rqTwBoFAUh_om9bdBMQRoVZRSVXaMssbMI24_dnH2OyM19ElBIiH5Qw.webp&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1995년 6월 발매된 이승환의 4집 정규 앨범 &lt;em&gt;Human&lt;/em&gt;은 90년대 대한민국 대중음악의 기술적, 예술적 성취가 정점에 달했음을 보여주는 기념비적인 작품입니다. 당대 최고의 작곡가, 연주자들과 함께 미국 로스앤젤레스에서 완성된 이 앨범은 압도적인 스케일의 사운드와 인간의 희로애락을 깊이 있게 탐구한 주제 의식을 통해, 상업적 성공과 비평적 찬사를 동시에 거머쥐며 한국 대중음악사에 길이 남을 명반으로 기록되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;이승환-끊임없이-진화하는-라이브의-황제&#34;&gt;이승환: 끊임없이 진화하는 &amp;lsquo;라이브의 황제&amp;rsquo;&lt;/h2&gt;&#xA;&lt;p&gt;이승환은 1989년 데뷔 이래 30년 넘게 최정상의 자리를 지키고 있는 대한민국 대중음악의 살아있는 전설입니다. 그는 단순히 노래를 잘하는 가수를 넘어, 자신만의 음악 세계를 구축한 완벽주의자 뮤지션이자, 공연 문화를 혁신한 선구적인 공연가입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 제임스 본드의 창조자, 이언 플레밍의 세계</title>
      <link>https://philipjkim.github.io/posts/20250908-introduction-to-fleming/</link>
      <pubDate>Mon, 08 Sep 2025 10:04:16 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250908-introduction-to-fleming/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.guim.co.uk/img/media/cd00797a8739324ecb5a27d25cf95f2ea5bf31d5/0_397_3107_1864/master/3107.jpg?width=1200&amp;amp;height=900&amp;amp;quality=85&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;s=c43ff714ae7a6a0e51eb1aaaeec2c4ff&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이언 플레밍(Ian Fleming, 1908-1964)은 20세기 대중문화의 가장 상징적인 아이콘 중 하나인 &amp;lsquo;제임스 본드(James Bond)&amp;lsquo;를 창조한 영국의 소설가입니다. 그는 자신의 경험과 상상력을 바탕으로 현대 스파이 스릴러의 원형을 제시했으며, 그의 작품은 오늘날까지 영화, 게임 등 다양한 매체로 끊임없이 재창조되고 있습니다. 이 글은 이언 플레밍의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;플레밍의-생애와-작품-활동&#34;&gt;플레밍의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;이언 플레밍의 삶은 그가 창조한 제임스 본드 캐릭터에 많은 영감을 주었습니다. 그는 1908년 영국의 유복하고 영향력 있는 정치 가문에서 태어나 명문 이튼 칼리지를 졸업했습니다. 젊은 시절 그는 로이터 통신사의 기자로 활동하며 모스크바에 파견되기도 했고, 이후에는 주식 중개인으로 일하는 등 다양한 경력을 쌓았습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>포커(텍사스 홀덤) 초보자가 단계별로 Aggressive 유형으로 진화하기 위한 방법</title>
      <link>https://philipjkim.github.io/posts/20250905-from-lp-to-lag/</link>
      <pubDate>Fri, 05 Sep 2025 15:46:04 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250905-from-lp-to-lag/</guid>
      <description>&lt;p&gt;&lt;em&gt;포커 플레이 유형 변화를 위한 훈련 방법 요청에 대한 Gemini 2.5 pro 의 응답입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;텍사스 홀덤에서 초보자들이 가장 흔하게 겪는 문제이자 가장 빠르게 칩을 잃는 원인은 &amp;lsquo;루즈-패시브(Loose-Passive)&amp;rsquo; 플레이 스타일입니다. 하지만 이 단계를 벗어나는 과정에서 많은 플레이어들은 또 다른 함정인 &amp;lsquo;타이트-패시브(Tight-Passive)&amp;rsquo; 스타일에 머무르게 됩니다. 이는 칩을 빠르게 잃지는 않지만, 결코 돈을 딸 수도 없는 정체된 상태를 의미합니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글의 목적은 루즈-패시브 성향의 초보자가 장기적으로 승리하는 플레이어로 진화하기 위한 체계적인 4단계 훈련 방법론(&lt;strong&gt;LP → TP → TAG → LAG&lt;/strong&gt;)을 제시하는 것입니다. 각 단계의 특징과 문제점을 명확히 진단하고, 다음 단계로 넘어가기 위한 구체적인 훈련법과 실제 게임 예시를 통해 이론을 실전에 적용하는 방법을 상세히 다룰 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>텍사스 홀덤 학습 로드맵: 제로부터 영웅까지</title>
      <link>https://philipjkim.github.io/posts/20250905-poker-learning-roadmap/</link>
      <pubDate>Fri, 05 Sep 2025 14:44:22 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250905-poker-learning-roadmap/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://roarcdn.fitting-solutions.at/mgm/poker/en/blog/wp-content/uploads/2023/12/21115217/Body-2-ROAR-BetMGM-Dec116-Poker.jpg?strip=all&amp;amp;lossy=1&amp;amp;ssl=1&amp;amp;fit=1080%2C610&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;포커 학습 로드맵 요청에 대한 Gemini 2.5 pro 의 응답입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-초급-beginner-기본-규칙과-생존-전략&#34;&gt;👑 초급 (Beginner): 기본 규칙과 생존 전략&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;목표:&lt;/strong&gt; 게임의 규칙을 완벽히 이해하고, 큰 실수 없이 돈을 잃지 않는 단단한 플레이의 기반을 다진다. &amp;lsquo;내 카드&amp;rsquo;가 얼마나 강한지에만 집중하는 단계.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-게임의-법칙과-용어-완벽-숙지&#34;&gt;&lt;strong&gt;Step 1: 게임의 법칙과 용어 완벽 숙지&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;핸드 족보 (Hand Rankings):&lt;/strong&gt; 로열 플러시부터 하이 카드까지 순서를 즉각적으로 알 수 있도록 완벽하게 암기해야 합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;게임 진행 순서:&lt;/strong&gt; 프리플랍(Pre-flop), 플랍(Flop), 턴(Turn), 리버(River) 각 베팅 라운드의 진행 방식을 이해합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;기본 용어:&lt;/strong&gt; 버튼(Button), 블라인드(Blinds), 팟(Pot), 벳(Bet), 콜(Call), 레이즈(Raise), 폴드(Fold), 첵(Check) 등의 용어에 익숙해져야 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;step-2-포지션position의-절대적인-중요성-이해&#34;&gt;&lt;strong&gt;Step 2: 포지션(Position)의 절대적인 중요성 이해&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;개념:&lt;/strong&gt; 테이블에서 나의 앉은 위치가 왜 가장 중요한 정보인지 배웁니다. 나중에 액션을 할수록(Late Position) 상대방의 정보를 더 많이 얻어 유리하다는 것을 이해하는 것이 초급 단계의 가장 큰 성과입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;학습 내용:&lt;/strong&gt; 얼리 포지션(EP), 미들 포지션(MP), 레이트 포지션(LP), 블라인드 포지션의 유불리를 배우고, 좋은 포지션에서 더 넓은 범위의 핸드로 플레이해야 하는 이유를 학습합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;step-3-프리플랍-핸드-선택-pre-flop-hand-selection&#34;&gt;&lt;strong&gt;Step 3: 프리플랍 핸드 선택 (Pre-flop Hand Selection)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;개념:&lt;/strong&gt; 모든 핸드로 게임에 참여하는 것이 왜 나쁜지를 깨닫고, 좋은 스타팅 핸드만 골라서 플레이하는 &amp;lsquo;타이트한(Tight)&amp;rsquo; 전략을 배웁니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;학습 내용:&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;스타팅 핸드 차트:&lt;/strong&gt; 포지션별로 어떤 핸드로 플레이에 참여하고, 어떤 핸드로 폴드해야 하는지 정리된 차트를 보고 따라 하며 감을 익힙니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PFR (Pre-Flop Raise):&lt;/strong&gt; 내가 판에 처음 들어갈 때는 콜만으로 따라 들어가는 &amp;lsquo;림프(Limp)&amp;rsquo; 대신, 주도권을 잡기 위해 항상 레이즈하는 습관을 들입니다. 이것이 &lt;strong&gt;PFR&lt;/strong&gt;의 기본 개념입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;step-4-베팅의-기본-원리-왜-베팅하는가&#34;&gt;&lt;strong&gt;Step 4: 베팅의 기본 원리: 왜 베팅하는가?&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;개념:&lt;/strong&gt; 베팅에는 두 가지 목적밖에 없다는 것을 배웁니다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;밸류 벳 (Value Bet):&lt;/strong&gt; 나보다 약한 핸드에게 돈을 받아내기 위해.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;블러프 (Bluff):&lt;/strong&gt; 나보다 강한 핸드를 포기시키기 위해.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;학습 내용:&lt;/strong&gt; 초급 단계에서는 무리한 블러핑을 시도하기보다, 내가 강한 핸드를 가졌을 때 확실하게 밸류 벳을 해서 팟을 키우는 연습에 집중합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-중급-intermediate-수학적-접근과-상대방-읽기&#34;&gt;🏆 중급 (Intermediate): 수학적 접근과 상대방 읽기&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;목표:&lt;/strong&gt; &amp;lsquo;내 카드&amp;rsquo;만 보던 시야에서 벗어나 &amp;lsquo;상대방의 카드&amp;rsquo;와 &amp;lsquo;팟의 크기&amp;rsquo;를 함께 고려하는 수학적, 전략적 사고를 시작한다. 이제 포커는 운이 아닌 실력의 게임이라는 것을 깨닫는 단계.&lt;/p&gt;</description>
    </item>
    <item>
      <title>개발 팁: 읽기 쉽고 확장 가능한 if 구문 리팩토링 가이드</title>
      <link>https://philipjkim.github.io/posts/20250905-how-to-replace-if-statements/</link>
      <pubDate>Fri, 05 Sep 2025 13:02:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250905-how-to-replace-if-statements/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/20250905_refactoring_if.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;프로그래밍에서 if 를 사용하는 조건부 로직을 대체할 수 있는 방법들에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;모든 예제 코드는 Go 로 작성되었으나, 다른 프로그래밍 언어에 공통적으로 적용할 수 있는 내용들입니다.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-조건문의-확산과-기술-부채의-축적&#34;&gt;서론: 조건문의 확산과 기술 부채의 축적&lt;/h2&gt;&#xA;&lt;p&gt;소프트웨어 개발에서 &lt;code&gt;if-else&lt;/code&gt; 문은 제어 흐름을 구성하는 가장 기본적인 도구 중 하나입니다. 그러나 이 근본적인 구조는 종종 오용되어, 시간이 지남에 따라 시스템의 건강을 심각하게 해치는 주범이 되기도 합니다. 복잡하게 중첩되거나 끝없이 이어지는 &lt;code&gt;if-else&lt;/code&gt; 체인은 가독성을 저해하고 유지보수를 악몽으로 만들며, 이는 소프트웨어 공학에서 &amp;ldquo;코드 스멜(code smell)&amp;ldquo;이라 불리는 명백한 위험 신호입니다. [1, 2, 3]&lt;/p&gt;</description>
    </item>
    <item>
      <title>뮤지션 소개: 타워 오브 파워(Tower of Power): 펑크(Funk)의 교과서를 쓴 그루브의 건축가들</title>
      <link>https://philipjkim.github.io/posts/20250905-introduction-to-tower-of-power/</link>
      <pubDate>Fri, 05 Sep 2025 10:25:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250905-introduction-to-tower-of-power/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.thefactorystl.com/wp-content/uploads/TowerOfPower-750x450-1.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1960년대 후반 캘리포니아 오클랜드에서 결성된 타워 오브 파워(Tower of Power)는 단순한 펑크(Funk) 밴드를 넘어, 하나의 음악적 기관(Institution)으로 평가받는 전설적인 그룹입니다. 50년이 넘는 시간 동안 이들이 구축해 온 강력한 브라스 섹션과 독보적인 리듬 섹션의 조합은 수많은 뮤지션들에게 영감을 주었으며, 특히 베이시스트 프란시스 로코 프레스티아와 드러머 데이비드 가리발디가 만들어낸 그루브는 펑크 음악의 교과서로 남아있습니다. 본 포스트에서는 이 위대한 밴드의 음악 세계를 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 20세기의 양심, 조지 오웰의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250905-introduction-to-orwell/</link>
      <pubDate>Fri, 05 Sep 2025 10:10:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250905-introduction-to-orwell/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://insidestory.org.au/wp-content/uploads/orwell_tea.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;조지 오웰(George Orwell, 1903-1950)은 20세기 가장 중요한 작가 중 한 명이자, 전체주의의 위험성을 날카롭게 경고한 시대를 앞서간 예언자입니다. 그는 명료하고 정직한 문체로 당대의 정치적 위선을 고발하고, 인간의 자유와 존엄이라는 보편적 가치를 옹호했습니다. 이 글은 조지 오웰의 치열했던 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;오웰의-생애와-작품-활동&#34;&gt;오웰의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;조지 오웰의 본명은 에릭 아서 블레어(Eric Arthur Blair)입니다. 그는 1903년 영국령 인도에서 태어나 영국의 명문 이튼 칼리지에서 교육받았으나, 계급 사회에 대한 반감으로 대학 진학을 포기하고 버마(현 미얀마)에서 제국 경찰로 근무했습니다. 이때의 경험은 그에게 제국주의의 폭력성과 모순을 절감하게 했고, 이는 훗날 그의 작품 세계에 깊은 영향을 미쳤습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 테드 그린(Ted Greene) - Solo Guitar (1977): 기타 한 대로 구현한 오케스트라</title>
      <link>https://philipjkim.github.io/posts/20250903-album-review-solo-guitar/</link>
      <pubDate>Wed, 03 Sep 2025 09:35:06 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250903-album-review-solo-guitar/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://f4.bcbits.com/img/a0625898306_16.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1977년 발매된 테드 그린의 &lt;em&gt;Solo Guitar&lt;/em&gt;는 화려한 스포트라이트나 상업적 성공과는 거리가 먼, 조용하지만 지극히 심오한 울림을 남긴 앨범입니다. 연주자보다 교육자로 더 유명했던 은둔의 거장이 남긴 유일한 정규 솔로 앨범인 이 작품은, 단 한 대의 기타로 어디까지 풍성하고 아름다운 화성을 만들어낼 수 있는지 보여준 기념비적인 기록입니다. 본 포스트에서는 기타라는 악기의 가능성을 재정의한 이 앨범을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 단 한 권의 신화, 마거릿 미첼의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250903-introduction-to-mitchell/</link>
      <pubDate>Wed, 03 Sep 2025 09:28:27 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250903-introduction-to-mitchell/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn.britannica.com/13/153113-050-24BD3BAD/Margaret-Mitchell-1938.jpg?w=400&amp;amp;h=225&amp;amp;c=crop&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;마거릿 미첼(Margaret Mitchell, 1900-1949)은 단 한 편의 소설 『바람과 함께 사라지다』로 미국 문학사에 지워지지 않는 족적을 남긴 작가입니다. 그녀는 미국 남부의 격동적인 역사를 배경으로, 강인한 여성의 생존과 사랑을 그려내며 전 세계 독자들의 마음을 사로잡았습니다. 이 글은 마거릿 미첼의 생애와 그녀의 유일한 작품이 지닌 특징, 그리고 그 문학적 유산을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;미첼의-생애와-작품-활동&#34;&gt;미첼의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;마거릿 미첼의 삶은 그녀의 소설처럼 미국 남부, 특히 조지아 주 애틀랜타와 깊이 연결되어 있습니다. 그녀는 1900년, 남북전쟁에 참전했던 외할아버지를 둔 유서 깊은 남부 가문에서 태어났습니다. 어린 시절부터 어머니와 친척들로부터 남북전쟁 당시의 생생한 이야기를 들으며 자란 경험은 훗날 그녀의 유일한 작품에 대한 풍부한 자양분이 되었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 패닉(Panic) - 밑 (1996): 주류 음악계를 향한 가장 기괴하고 아름다운 반기</title>
      <link>https://philipjkim.github.io/posts/20250902-album-review-meet/</link>
      <pubDate>Tue, 02 Sep 2025 13:58:19 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250902-album-review-meet/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://m.pinkmusic.co.kr/web/product/big/202103/c1cb61dcfaca5567b5ca88060a994340.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1996년 9월 발매된 패닉의 2집 &lt;em&gt;밑&lt;/em&gt;은 90년대 대한민국 대중음악사에 기록된 가장 충격적이고 전위적인 걸작 중 하나입니다. 1집의 대히트곡 &amp;ldquo;달팽이&amp;quot;가 만들어낸 서정적인 이미지에 대한 정면 반박이자, 당대 주류 음악계에 대한 통렬한 야유였던 이 앨범은, 사회의 어둡고 기괴한 이면을 파고드는 독창적인 콘셉트와 실험적인 사운드로 전무후무한 예술적 성취를 이루어냈습니다. 본 포스트에서는 이 문제적 앨범을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;패닉panic-90년대의-이단아-이적과-김진표&#34;&gt;패닉(Panic): 90년대의 이단아, 이적과 김진표&lt;/h2&gt;&#xA;&lt;p&gt;패닉은 1995년 결성된 남성 듀오로, 작사, 작곡, 노래를 책임지는 이적과 랩을 맡은 김진표로 구성되었습니다. 이들은 데뷔와 동시에 주류 음악계의 문법을 뒤흔든 이단아였습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 하드보일드 문체의 거장, 어니스트 헤밍웨이의 세계</title>
      <link>https://philipjkim.github.io/posts/20250902-introduction-to-hemingway/</link>
      <pubDate>Tue, 02 Sep 2025 13:33:56 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250902-introduction-to-hemingway/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://d3i6fh83elv35t.cloudfront.net/static/2018/08/ernest_hemingway-1024x820.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;어니스트 헤밍웨이(Ernest Hemingway, 1899-1961)는 20세기 미국 문학을 상징하는 가장 영향력 있는 작가 중 한 명이자, 간결하고 힘 있는 &amp;lsquo;하드보일드(Hard-boiled)&amp;rsquo; 문체의 대가입니다. 그는 전쟁과 허무주의 속에서 인간의 존엄을 지키려는 인물들을 통해 &amp;lsquo;상실의 시대(Lost Generation)&amp;lsquo;의 정신을 그려냈습니다. 이 글은 헤밍웨이의 역동적인 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;헤밍웨이의-생애와-작품-활동&#34;&gt;헤밍웨이의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;헤밍웨이의 삶은 그의 작품만큼이나 모험과 열정, 그리고 비극으로 가득 차 있습니다. 그는 1899년 미국 일리노이 주 오크파크에서 태어나 어린 시절부터 낚시와 사냥 등 야외 활동을 즐겼습니다. 고등학교 졸업 후에는 기자가 되어 간결하고 객관적인 글쓰기 스타일의 기초를 닦았습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>깊은 모듈 대 작은 함수: 오스터하우트와 마틴의 소프트웨어 설계 철학 및 커뮤니티 수용에 대한 비교 분석</title>
      <link>https://philipjkim.github.io/posts/20250901-ousterhout-vs-martin/</link>
      <pubDate>Mon, 01 Sep 2025 15:49:15 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250901-ousterhout-vs-martin/</guid>
      <description>&lt;p&gt;본 연구 보고서는 오스터하우트와 마틴이 제시하는 두 가지 상이한 소프트웨어 설계 철학을 심층적으로 비교 분석하는 것을 목표로 한다. 두 철학은 단순히 기법의 차이를 넘어, 문제의 정의 자체에서부터 근본적인 시각차를 드러낸다. 오스터하우트는 시스템적 &lt;strong&gt;복잡성&lt;/strong&gt;을 주된 적으로 간주하며, 이를 인지 부하(cognitive load)와 변경 증폭(change amplification)이라는 구체적인 지표로 측정한다.[1] 반면, 마틴은 코드의 지역적 &lt;strong&gt;불명확성&lt;/strong&gt;을 가장 경계해야 할 대상으로 보며, 이를 가독성(readability)과 이해 용이성(ease of comprehension)으로 평가한다.[2, 3]&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Ousterhout 와 Martin 의 소프트웨어 설계 철학의 공통점, 차이점 및 충돌 부분에 대한 여러 의견과 관점들에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: Herbie Hancock - Head Hunters (1973): 재즈-펑크의 시대를 연 혁명적 그루브</title>
      <link>https://philipjkim.github.io/posts/20250901-album-review-head-hunters/</link>
      <pubDate>Mon, 01 Sep 2025 13:12:56 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250901-album-review-head-hunters/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/en/5/54/Herbie-Hancock-Head-Hunters.png&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1973년 10월 발매된 허비 행콕의 12번째 스튜디오 앨범 &lt;em&gt;Head Hunters&lt;/em&gt; 는 재즈의 역사에서 가장 중요한 변곡점 중 하나로 평가받는 작품입니다. 이전의 아방가르드하고 난해했던 &amp;lsquo;므완디시(Mwandishi)&amp;rsquo; 밴드 시기를 뒤로하고, 슬라이 앤 더 패밀리 스톤(Sly and the Family Stone), 제임스 브라운(James Brown) 등 당대의 펑크(Funk)와 R&amp;amp;B 사운드를 전면적으로 수용한 이 앨범은, 재즈에 대한 대중의 인식을 완전히 바꾸어 놓았습니다. 본 포스트에서는 재즈-펑크라는 새로운 장르의 탄생을 알린 이 기념비적인 앨범을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 윤종신 - 5집 愚 (1996): &#39;어리석음&#39;을 예술로 승화시킨 명반</title>
      <link>https://philipjkim.github.io/posts/20250901-album-review-woo/</link>
      <pubDate>Mon, 01 Sep 2025 10:46:46 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250901-album-review-woo/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.kpop2gether.com/shopimages/912enter/0050030009012.jpg?1742870439&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1996년 4월 발매된 윤종신의 5집 &lt;em&gt;愚(우)&lt;/em&gt; 는 90년대 한국 대중음악사에서 중요한 전환점을 마련한 명반입니다. 한 편의 영화처럼 사랑의 시작부터 끝까지 완전한 감정적 여정을 경험하게 만드는 이 앨범은 당시의 전형적인 발라드 문법에서 벗어나 새로운 감수성의 시대를 열었습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;윤종신-일상을-노래하는-음유시인&#34;&gt;윤종신: 일상을 노래하는 음유시인&lt;/h2&gt;&#xA;&lt;p&gt;윤종신은 1990년 그룹 015B의 객원 보컬로 데뷔한 이래, 싱어송라이터, 프로듀서, 방송인으로 30년 넘게 한국 대중문화의 중심에서 활동해 온 아티스트입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 미국 남부 문학의 거장, 윌리엄 포크너의 세계</title>
      <link>https://philipjkim.github.io/posts/20250901-introduction-to-faulkner/</link>
      <pubDate>Mon, 01 Sep 2025 10:40:12 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250901-introduction-to-faulkner/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://extendedstudies.ucsd.edu/getmedia/46358e9b-3401-40c1-bb4e-95c1563e0439/faulkner.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;윌리엄 포크너(William Faulkner, 1897-1962)는 20세기 미국 문학을 대표하는 가장 혁신적이고 위대한 작가 중 한 명이자, 미국 남부의 역사와 신화를 자신만의 독창적인 문학 세계로 창조한 거장입니다. 그는 의식의 흐름, 다중 시점, 비선형적 서사 등 과감한 실험을 통해 인간 내면의 복잡성과 미국 남부가 짊어진 역사의 무게를 탐구했습니다. 이 글은 포크너의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: G3: Live in Concert (1996): 세 락 기타 거장들의 교감</title>
      <link>https://philipjkim.github.io/posts/20250829-album-review-g3-live-in-concert/</link>
      <pubDate>Fri, 29 Aug 2025 13:19:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250829-album-review-g3-live-in-concert/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.scdn.co/image/ab67616d0000b273d4eddbf090d33cba3c2433a8&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1996년, 기타 연주계에 하나의 사건과 같은 프로젝트가 시작되었습니다. 조 새트리아니(Joe Satriani), 스티브 바이(Steve Vai), 에릭 존슨(Eric Johnson)이라는, 당대 가장 독창적이고 뛰어난 세 명의 기타리스트가 &amp;lsquo;G3&amp;rsquo;라는 이름으로 함께 무대에 올랐습니다. &amp;lsquo;G3: Live in Concert&amp;rsquo; 앨범은 이 역사적인 첫 투어의 열기와 각 아티스트의 정제된 연주, 그리고 세 거장의 교감을 생생하게 담아낸 라이브 실황 음반입니다. 이 앨범은 단순한 공연 기록을 넘어, 1990년대 인스트루멘탈 록(Instrumental Rock)의 정점을 기록한 기념비적인 작품으로 평가받습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 본능의 탐험가, D. H. 로런스의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250829-introduction-to-d-h-lawrence/</link>
      <pubDate>Fri, 29 Aug 2025 13:08:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250829-introduction-to-d-h-lawrence/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://m.media-amazon.com/images/M/MV5BZWQ0YmMxMjctMDViYy00MzBmLTk3MDMtOTY5ZWZhZGZmZDYyXkEyXkFqcGc@._V1_.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;데이비드 허버트 로런스(David Herbert Lawrence, 1885-1930)는 20세기 영국 모더니즘 문학의 가장 독창적이고 논쟁적인 작가 중 한 명입니다. 그는 산업화된 근대 문명이 억압하는 인간의 원초적인 생명력과 본능, 특히 성(性)의 문제를 정면으로 다루며 당대 사회에 큰 충격을 안겼습니다. 이 글은 로런스의 치열했던 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;로런스의-생애와-작품-활동&#34;&gt;로런스의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;로런스의 삶과 문학은 그의 출신 배경인 계급 갈등과 깊이 연관되어 있습니다. 그는 1885년 영국 노팅엄셔의 광산촌에서 광부인 아버지와 교사 출신의 어머니 사이에서 태어났습니다. 거칠고 육체적인 아버지는 산업 노동 계급을, 교양 있고 정신적인 가치를 중시하는 어머니는 중산층을 상징했으며, 이 두 세계 사이의 긴장감은 그의 작품 전반에 걸쳐 나타나는 핵심적인 주제가 되었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: The Allman Brothers Band - At Fillmore East (1971): 라이브 앨범의 역사를 바꾼 즉흥 연주의 정수</title>
      <link>https://philipjkim.github.io/posts/20250828-album-review-at-fillmore-east/</link>
      <pubDate>Fri, 29 Aug 2025 10:17:42 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250828-album-review-at-fillmore-east/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sfae.blob.core.windows.net/media/ecommercesite/media/sfae/sfae.artwork/800-allmanbroslivefillmoreeast-ot-1_1.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1971년 7월에 발매된 올맨 브라더스 밴드의 라이브 앨범 &lt;em&gt;At Fillmore East&lt;/em&gt;는 단순한 공연 실황 음반을 넘어, 록 음악 역사상 가장 위대한 라이브 앨범으로 꼽히는 작품입니다. 스튜디오 앨범에서는 미처 다 담아내지 못했던 밴드의 폭발적인 에너지와 신기에 가까운 즉흥 연주를 생생하게 포착한 이 앨범은, 밴드를 슈퍼스타의 반열에 올려놓았을 뿐만 아니라 &amp;lsquo;라이브 앨범&amp;rsquo;이라는 장르 자체의 위상을 바꿔놓았습니다. 본 포스트에서는 이 전설적인 기록물을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: Fourplay - Fourplay (1991): 스무드 재즈의 시대를 연 슈퍼그룹의 출사표</title>
      <link>https://philipjkim.github.io/posts/20250828-album-review-fourplay/</link>
      <pubDate>Thu, 28 Aug 2025 15:14:01 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250828-album-review-fourplay/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn11.bigcommerce.com/s-rdecee92oy/products/37419/images/6366769/12evocd671__67368.1746915566.500.750.jpg?c=2&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1991년 발매된 포플레이의 셀프 타이틀 데뷔 앨범 &lt;em&gt;Fourplay&lt;/em&gt;는 컨템포러리 재즈와 스무드 재즈의 역사를 논할 때 빼놓을 수 없는 기념비적인 작품입니다. 밥 제임스, 리 릿나워, 네이던 이스트, 하비 메이슨이라는, 각자의 분야에서 이미 전설이 된 네 명의 거장이 모여 만든 이 앨범은 발매와 동시에 장르의 새로운 표준을 제시하며 상업적, 비평적으로 엄청난 성공을 거두었습니다. 본 포스트에서는 스무드 재즈의 교과서로 불리는 이 앨범을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 현대 문학의 예언자, 프란츠 카프카의 세계</title>
      <link>https://philipjkim.github.io/posts/20250828-introduction-to-kafka/</link>
      <pubDate>Thu, 28 Aug 2025 07:58:05 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250828-introduction-to-kafka/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTV9HnftLamn9JYevSf2CHWuHEGUXWpaaOEGg&amp;amp;s&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;프란츠 카프카(Franz Kafka, 1883-1924)는 20세기 모더니즘 문학의 가장 중요한 작가 중 한 명이자, 현대 사회의 부조리와 그 속에서 소외된 개인의 불안을 누구보다 날카롭게 그려낸 예언자입니다. 그의 작품은 현실과 환상의 경계를 넘나드는 독특한 설정과 상징을 통해, 인간 실존의 근원적인 문제를 탐구합니다. 이 글은 카프카의 고독했던 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: N.EX.T - The Return of N.EX.T Part 1: The Being (1994): &#39;나&#39;를 향한 치열한 철학적 탐구</title>
      <link>https://philipjkim.github.io/posts/20250828-album-review-the-being/</link>
      <pubDate>Thu, 28 Aug 2025 07:50:36 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250828-album-review-the-being/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://image.bugsm.co.kr/album/images/500/32/3202.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1994년 발매된 N.EX.T(넥스트)의 정규 2집 &lt;em&gt;The Return of N.EX.T Part 1: The Being&lt;/em&gt; 은 90년대 한국 대중음악사에 기록된 가장 지적이고 심오한 콘셉트 앨범 중 하나입니다. 1집 &lt;em&gt;Home&lt;/em&gt; 에서 보여준 가능성을 넘어, &amp;lsquo;밴드&amp;rsquo; N.EX.T의 정체성을 확립하고 &amp;lsquo;개인&amp;rsquo;과 &amp;lsquo;자아&amp;rsquo;라는 철학적 주제를 정면으로 다룬 이 앨범은, 후속작인 &lt;em&gt;World&lt;/em&gt; 와 함께 한국 록의 서사적 깊이와 음악적 스케일을 한 차원 끌어올린 작품으로 평가받습니다. 본 포스트에서는 이 치열한 자기 성찰의 기록을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: Pink Floyd - The Dark Side of the Moon (1973): 광기를 탐험한 컨셉트 앨범의 정점</title>
      <link>https://philipjkim.github.io/posts/20250827-album-review-dark-side-of-the-moon/</link>
      <pubDate>Wed, 27 Aug 2025 20:05:32 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250827-album-review-dark-side-of-the-moon/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://e.snmc.io/i/600/s/b87ea178beaaaf0e0e4a39aaf9d1b834/12206378/pink-floyd-the-dark-side-of-the-moon-Cover-Art.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1973년 3월에 발매된 핑크 플로이드의 8번째 스튜디오 앨범 &lt;em&gt;The Dark Side of the Moon&lt;/em&gt;은 록 음악 역사상 가장 위대한 앨범 중 하나로 꼽히는 기념비적인 작품입니다. 시간, 탐욕, 갈등, 죽음, 그리고 광기라는 인간의 보편적인 주제를 하나의 유기적인 콘셉트로 엮어낸 이 앨범은 사운드 엔지니어링의 혁신과 철학적인 가사를 통해 단순한 노래의 모음을 넘어선 하나의 완결된 예술 작품으로 평가받습니다. 본 포스트에서는 록 음악의 패러다임을 바꾼 이 앨범을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 펄프 픽션의 제왕, 에드거 라이스 버로스의 세계</title>
      <link>https://philipjkim.github.io/posts/20250827-introduction-to-burroughs/</link>
      <pubDate>Wed, 27 Aug 2025 19:46:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250827-introduction-to-burroughs/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.saturdayeveningpost.com/wp-content/uploads/satevepost/Burroughs860.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;에드거 라이스 버로스(Edgar Rice Burroughs, 1875-1950)는 20세기 초 미국 대중문학의 지형을 바꾼 작가이자, &amp;lsquo;타잔&amp;rsquo;과 &amp;lsquo;존 카터&amp;rsquo;라는 불멸의 캐릭터를 창조한 &amp;lsquo;펄프 픽션(Pulp Fiction)&amp;lsquo;의 제왕입니다. 그의 작품은 순수 문학과는 거리가 있었지만, 경이로운 상상력과 박진감 넘치는 모험 서사로 수많은 독자를 사로잡았으며, 후대의 SF와 판타지 장르에 지대한 영향을 미쳤습니다. 이 글은 에드거 라이스 버로스의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: Michael Jackson - Dangerous (1991): 팝의 경계를 허문 혁명적 선언</title>
      <link>https://philipjkim.github.io/posts/20250827-album-review-dangerous/</link>
      <pubDate>Wed, 27 Aug 2025 15:22:16 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250827-album-review-dangerous/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn-p.smehost.net/sites/28d35d54a3c64e2b851790a18a1c4c18/wp-content/uploads/2018/12/181214_dangerous_feat.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1991년 발매된 마이클 잭슨의 8번째 스튜디오 앨범 &lt;em&gt;Dangerous&lt;/em&gt;는 팝의 황제가 스스로의 성공 신화를 넘어서기 위해 선택한 과감하고 혁명적인 결과물입니다. 퀸시 존스(Quincy Jones)와의 성공적인 파트너십을 뒤로하고, 테디 라일리(Teddy Riley)를 필두로 한 새로운 프로듀서들과 함께 만든 이 앨범은 팝, 록, R&amp;amp;B를 넘어 뉴 잭 스윙(New Jack Swing)과 인더스트리얼 사운드까지 흡수하며 90년대 대중음악의 새로운 방향을 제시했습니다. 본 포스트에서는 &lt;em&gt;Dangerous&lt;/em&gt; 앨범이 지닌 음악사적 가치와 그 내용을 분석합니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;나의 친구 승국이에게 이 글을 바칩니다.&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;michael-jackson-시대를-정의한-팝의-황제&#34;&gt;Michael Jackson: 시대를 정의한 &amp;lsquo;팝의 황제&amp;rsquo;&lt;/h2&gt;&#xA;&lt;p&gt;마이클 잭슨(1958-2009)은 20세기 대중음악과 문화를 상징하는 가장 위대한 아이콘입니다. 그의 영향력은 단순히 음악에 국한되지 않으며, 그의 삶과 예술은 하나의 거대한 서사시와 같습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: Pat Metheny Group - Offramp (1982): 재즈의 새로운 길을 제시한 이정표</title>
      <link>https://philipjkim.github.io/posts/20250827-album-review-offramp/</link>
      <pubDate>Wed, 27 Aug 2025 08:43:07 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250827-album-review-offramp/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/81Z3KD2oerL._UF1000,1000_QL80_.jpg&#34; alt=&#34;artwork&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Offramp 는 Pat Metheny Group(PMG)의 1982년 작은 재즈 퓨전 신(Scene)의 흐름을 바꾼 결정적인 앨범입니다. ECM 레코드를 통해 발매된 이 앨범은 그룹의 사운드가 한 단계 진화했음을 알리는 선언과도 같았으며, 특히 기타 신디사이저의 혁신적인 사용을 통해 동시대 뮤지션들에게 깊은 영감을 주었습니다. 이 앨범으로 PMG는 그래미 어워드 &amp;lsquo;최우수 재즈 퓨전 퍼포먼스&amp;rsquo; 부문을 수상하며 상업적, 비평적 성공을 모두 거머쥐었습니다. 본 포스트에서는 &lt;em&gt;Offramp&lt;/em&gt; 앨범을 심도 있게 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 세속의 관찰자, 서머싯 몸의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250827-introduction-to-maugham/</link>
      <pubDate>Wed, 27 Aug 2025 08:32:37 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250827-introduction-to-maugham/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn.shopify.com/s/files/1/2458/8207/files/vintage-somerset-maugham-country-house-library.jpg?v=1660829004&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;윌리엄 서머싯 몸(W. Somerset Maugham, 1874-1965)은 20세기 영국을 대표하는 소설가이자 극작가로, 당대 가장 높은 대중적 인기를 누렸던 작가 중 한 명입니다. 그는 인간 본성에 대한 냉소적인 통찰과 명료하고 직설적인 문체로, 문명과 사회적 관습 이면에 숨겨진 인간의 위선과 열정을 파헤쳤습니다. 이 글은 서머싯 몸의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 패키지 구조 컨벤션: Standard Go Project Layout</title>
      <link>https://philipjkim.github.io/posts/20250826-go-package-conventions/</link>
      <pubDate>Tue, 26 Aug 2025 19:34:33 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250826-go-package-conventions/</guid>
      <description>&lt;p&gt;Go 언어 프로젝트의 패키지 구조는 일반적으로 몇 가지 컨벤션을 따르며, &lt;code&gt;pkg&lt;/code&gt;와 &lt;code&gt;internal&lt;/code&gt; 디렉토리는 그중 핵심적인 역할을 합니다. 단순히 코드를 기능별로 묶는 것을 넘어, 패키지의 &lt;strong&gt;가시성(visibility)과 의존성 방향을 명확히&lt;/strong&gt; 하여 프로젝트의 유지보수성을 높이는 것이 목적입니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 Gemini 2.5 Pro 모델이 제 Go package convention 에 대한 질문에 답변한 내용입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Go 커뮤니티에서 널리 통용되는 표준 프로젝트 레이아웃(&lt;a href=&#34;https://github.com/golang-standards/project-layout&#34;&gt;golang-standards/project-layout&lt;/a&gt;)을 기반으로 각 디렉토리의 역할과 베스트 프랙티스를 자세히 설명해 드리겠습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;-pkg-디렉토리-공개-라이브러리-public-library&#34;&gt;📦 &lt;code&gt;pkg&lt;/code&gt; 디렉토리: 공개 라이브러리 (Public Library)&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;pkg&lt;/code&gt; 디렉토리&lt;/strong&gt;에는 &lt;strong&gt;외부 프로젝트에서 가져다 쓸 수 있는(importable) 공개 라이브러리 성격의 코드&lt;/strong&gt;를 위치시킵니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>과학: 현재의 지구 온난화: &#39;자연적 기후 주기&#39; 가설에 대한 평가</title>
      <link>https://philipjkim.github.io/posts/20250826-cause-of-global-warming/</link>
      <pubDate>Tue, 26 Aug 2025 18:41:38 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250826-cause-of-global-warming/</guid>
      <description>&lt;p&gt;&lt;em&gt;지구 온난화 원인에 대한 &amp;lsquo;자연적 기후 주기&amp;rsquo; 가설이 신빙성이 있는지에 대해 gemini 2.5 pro 에게 요청한 연구 결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;지구의 기후는 인류 문명이 존재하기 훨씬 이전부터 끊임없이 변화해 왔다는 것은 과학적으로 명백한 사실이다.[1, 2, 3] 과거 지구는 빙하기와 간빙기를 오가며 극적인 기온 변화를 겪었다. 이러한 역사적 사실에 근거하여, 일부에서는 현재 관측되는 급격한 지구 온도 상승이 인간의 산업 활동에 따른 온실가스 배출 때문이 아니라, 지구 본연의 장기적인 자연 순환 주기의 일부일 뿐이라는 주장을 제기한다.[4, 5] 이 주장은 현재의 온난화가 인간이 통제할 수 없는 거대한 자연의 흐름이며, 따라서 인간의 노력이 무의미할 수 있다는 함의를 담고 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 미국 상류사회의 해부학자, 이디스 워튼의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250826-introduction-to-wharton/</link>
      <pubDate>Tue, 26 Aug 2025 10:26:27 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250826-introduction-to-wharton/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mainstreetmag.com/wp-content/uploads/2025/03/edith.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이디스 워튼(Edith Wharton, 1862-1937)은 20세기 초 미국 문학을 대표하는 소설가이자, 자신이 태어난 뉴욕 상류사회의 허위와 관습을 누구보다 예리하게 포착한 작가입니다. 그녀는 섬세한 심리 묘사와 날카로운 사회 비판을 통해, 화려한 시대의 이면에 갇힌 개인, 특히 여성의 비극을 그려냈습니다. 이 글은 이디스 워튼의 생애와 작품 세계, 그녀의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;워튼의-생애와-작품-활동&#34;&gt;워튼의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;이디스 워튼의 삶은 그녀의 소설 속 배경과 밀접하게 연결되어 있습니다. 그녀는 1862년 남북전쟁 이전 뉴욕의 가장 부유하고 유서 깊은 가문 중 하나인 존스 가문에서 태어났습니다. 어린 시절부터 유럽을 오가며 가정교사에게 교육받았고, 아버지의 서재에서 수많은 고전을 탐독하며 문학적 소양을 키웠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 모더니즘의 선구자, 크누트 함순의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250825-introduction-to-hamsun/</link>
      <pubDate>Fri, 22 Aug 2025 15:21:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250825-introduction-to-hamsun/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSV2PCDbiehPHt_z0vFMcO5M4YvFbEOMlaubQ&amp;amp;s&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;크누트 함순(Knut Hamsun, 1859-1952)은 20세기 초반 노르웨이 문학을 넘어 세계 문학에 모더니즘의 도래를 알린 혁신적인 작가입니다. 그는 인간 내면의 비합리적이고 파편적인 의식의 흐름을 포착하여, 기존의 사실주의 문학과는 완전히 다른 새로운 길을 열었습니다. 그러나 그의 문학적 성취는 제2차 세계대전 당시 나치에 협력한 오점으로 인해 깊은 논쟁의 대상이 되기도 합니다. 이 글은 함순의 복잡한 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 영혼의 탐험가, 표도르 도스토옙스키의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250822-introduction-to-dostoevsky/</link>
      <pubDate>Fri, 22 Aug 2025 15:21:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250822-introduction-to-dostoevsky/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://imageio.forbes.com/specials-images/imageserve/66ec412983c576047f2b8911/Black-and-white-photo-of-Fyodor-Dostoyevsky-/0x0.jpg?format=jpg&amp;amp;crop=1575,1050,x2,y156,safe&amp;amp;width=960&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;표도르 도스토옙스키(Fyodor Dostoevsky, 1821-1881)는 톨스토이와 함께 19세기 러시아 문학을 대표하는 거장이자, 인간 내면의 가장 깊고 어두운 심연을 탐구한 작가입니다. 그는 인간 영혼의 문제를 집요하게 파고들며 신과 인간, 죄와 벌, 자유와 구원이라는 철학적 주제를 위대한 소설로 승화시켰습니다. 이 글은 도스토옙스키의 격동적인 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;도스토옙스키의-생애와-작품-활동&#34;&gt;도스토옙스키의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;도스토옙스키의 삶은 그의 소설만큼이나 고통과 격변으로 점철되었습니다. 그는 1821년 모스크바의 가난한 의사 집안에서 태어났습니다. 젊은 시절 공병 장교로 복무했으나 문학에 대한 열정으로 군을 떠나, 1846년 첫 소설 『가난한 사람들』을 발표하며 &amp;lsquo;제2의 고골&amp;rsquo;이라는 찬사를 받으며 화려하게 데뷔했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 미국의 셰익스피어, 허먼 멜빌의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250822-introduction-to-melville/</link>
      <pubDate>Fri, 22 Aug 2025 10:48:49 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250822-introduction-to-melville/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hips.hearstapps.com/hmg-prod/images/gettyimages-89865323.jpg?crop=1xw:0.75xh;center,top&amp;amp;resize=1200:*&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;허먼 멜빌(Herman Melville, 1819-1891)은 19세기 미국 문학을 넘어 세계 문학사에서 가장 위대한 작가 중 한 명으로 꼽힙니다. 그는 광활한 바다를 무대로 인간의 실존적 고뇌와 우주적 질서에 대한 깊은 철학적 질문을 던졌습니다. 생전에는 대중에게 외면받았으나, 사후에 그의 작품은 재평가받으며 미국 낭만주의 문학의 정점으로 자리매김했습니다. 이 글은 멜빌의 파란만장했던 삶과 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 빅토리아 시대의 거장, 찰스 디킨스의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250821-introduction-to-dickens/</link>
      <pubDate>Thu, 21 Aug 2025 17:48:22 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-introduction-to-dickens/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.msnocookie.com/image/ms/msimages/blog_gallery/charles-dickens-copyright-c-mary-evans-picture_3fa544e141.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;찰스 디킨스(Charles Dickens, 1812-1870)는 19세기 영국을 대표하는 소설가이자, 산업혁명기 런던의 명암을 누구보다 생생하게 그려낸 사회 비평가입니다. 그는 생생한 캐릭터와 흡입력 있는 스토리텔링을 통해 당대 대중의 폭발적인 사랑을 받았으며, 그의 작품은 오늘날까지 시대를 초월하는 고전으로 널리 읽히고 있습니다. 이 글은 디킨스의 생애와 작품 세계, 그의 문학이 지닌 독창성과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;디킨스의-생애와-작품-활동&#34;&gt;디킨스의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;디킨스의 삶은 그의 소설만큼이나 극적인 고난과 성공으로 가득 차 있습니다. 그는 1812년 영국 포츠머스에서 태어났으나, 해군 경리였던 아버지의 낭비벽으로 인해 어린 시절부터 힘겨운 삶을 살았습니다. 아버지가 빚 때문에 감옥에 수감되자, 불과 열두 살의 디킨스는 학교를 그만두고 구두약 공장에서 하루 10시간씩 노동을 해야 했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 변경 감지 테스트는 악몽입니다</title>
      <link>https://philipjkim.github.io/posts/20250821-tott-change-detector-tests-are-nightmare/</link>
      <pubDate>Thu, 21 Aug 2025 15:09:05 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-tott-change-detector-tests-are-nightmare/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2015/01/testing-on-toilet-change-detector-tests.html&#34;&gt;https://testing.googleblog.com/2015/01/testing-on-toilet-change-detector-tests.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;당신은 방금 코드의 동작을 수정하지 않고 리팩토링을 마쳤습니다. 그리고 커밋하기 전에 테스트를 실행했는데&amp;hellip; 수많은 단위 테스트가 실패합니다. 실패한 테스트들을 고치면서, 당신은 여러 테스트에 동일한 변환 작업을 기계적으로 적용하며 시간을 낭비하고 있다는 느낌을 받습니다. 아마도 당신은 어떤 메서드에 파라미터를 하나 추가했고, 이제 테스트 코드에 있는 100개의 해당 메서드 호출부에 빈 문자열을 전달하도록 업데이트해야 하는 상황일 겁니다.&lt;/p&gt;&#xA;&lt;p&gt;테스트를 기계적으로 작성한다는 것은 어떤 모습일까요? 여기 터무니없지만 명확한 예시가 있습니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>작가 소개: 사실주의의 거장, 오노레 드 발자크의 문학 세계</title>
      <link>https://philipjkim.github.io/posts/20250821-introduction-to-balzac/</link>
      <pubDate>Thu, 21 Aug 2025 12:23:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-introduction-to-balzac/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.thoughtco.com/thmb/b6neF6wzUa3YCnOyk4AtLHXGxLc=/1500x0/filters:no_upscale%28%29:max_bytes%28150000%29:strip_icc%28%29/GettyImages-526580970-5b93ff9c46e0fb0050f670bd.jpg&#34; alt=&#34;portrait&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;오노레 드 발자크(Honoré de Balzac, 1799-1850)는 19세기 프랑스 문학을 대표하는 소설가이자, 사실주의(Realism) 문학의 문을 연 선구자입니다. 그는 인간 사회를 하나의 거대한 유기체로 보고, 그 안에서 움직이는 개인의 욕망과 사회 구조의 관계를 집요하게 파고들었습니다. 이 글은 발자크의 생애와 작품 세계, 그의 문학이 지닌 독창적인 특징과 대표작들을 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;발자크의-생애와-작품-활동&#34;&gt;발자크의 생애와 작품 활동&lt;/h2&gt;&#xA;&lt;p&gt;발자크의 삶은 그의 작품만큼이나 극적이었습니다. 그는 1799년 프랑스 투르(Tours)에서 태어나 법률가의 길을 걸으라는 가문의 기대를 저버리고 문학에 투신했습니다. 초기에는 상업적인 성공을 위해 여러 필명으로 통속 소설을 쓰며 생계를 유지했지만, 큰 성공을 거두지는 못했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>개발자를 위한 게임 이론: 전략적 의사결정의 수학적 접근</title>
      <link>https://philipjkim.github.io/posts/20250821-game-theory-for-developers/</link>
      <pubDate>Thu, 21 Aug 2025 10:18:46 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-game-theory-for-developers/</guid>
      <description>&lt;p&gt;&lt;em&gt;개발자를 주 독자층으로 한 gemini pro 2.5 의 게임이론 연구결과입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-서론-게임-이론의-창시자-존-내쉬-john-nash&#34;&gt;1. 서론: 게임 이론의 창시자, 존 내쉬 (John Nash)&lt;/h2&gt;&#xA;&lt;p&gt;비협력 게임 이론 분야를 개척하고 전략적 상호작용에 대한 이해를 근본적으로 바꾼 인물인 존 포브스 내쉬 주니어(John Forbes Nash Jr.)를 소개하지 않고는 게임 이론을 논할 수 없다. 그의 지적 기여는 단순히 하나의 이론을 제시한 것을 넘어, 경제학, 컴퓨터 과학, 정치학 등 다양한 분야에서 합리적 행위자 간의 상호작용을 분석하는 패러다임을 전환시켰다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-천재-수학자의-생애와-학문적-여정&#34;&gt;1.1. 천재 수학자의 생애와 학문적 여정&lt;/h3&gt;&#xA;&lt;p&gt;1928년 6월 13일 웨스트버지니아주 블루필드에서 태어난 존 내쉬는 어린 시절부터 비범한 재능을 보였다.[1, 2] 그의 아버지는 전기 기술자였고 어머니는 교사였다. 학창 시절 그는 뛰어난 학생은 아니었지만, 독서를 통해 스스로 페르마 소정리를 증명하는 등 수학적 재능을 일찍부터 드러냈다. 아버지처럼 엔지니어가 되기 위해 카네기 멜런 대학교(당시 카네기 공과대학)에 입학했으나, 정형화된 교육 과정에 염증을 느끼고 그의 천재성을 알아본 교수들의 격려로 수학으로 전공을 바꾸었다.[1, 3]&lt;/p&gt;</description>
    </item>
    <item>
      <title>포커 수학의 첫걸음: 팟 오즈와 임플라이드 오즈</title>
      <link>https://philipjkim.github.io/posts/20250821-pot-odds-and-implied-odds/</link>
      <pubDate>Thu, 21 Aug 2025 09:33:12 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250821-pot-odds-and-implied-odds/</guid>
      <description>&lt;p&gt;포커는 심리 게임인 동시에 정교한 확률과 수학에 기반한 의사결정의 연속입니다. 감에 의존하는 플레이를 넘어 장기적으로 승리하는 플레이어가 되기 위해 반드시 알아야 할 두 가지 핵심 개념이 바로 &lt;strong&gt;팟 오즈(Pot Odds)&lt;/strong&gt; 와 &lt;strong&gt;임플라이드 오즈(Implied Odds)&lt;/strong&gt; 입니다. 이 두 개념은 현재의 베팅을 콜(Call)하는 것이 수학적으로 유리한지 불리한지를 판단하는 강력한 근거를 제공합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글의 주제에 대한 Gemini 2.5 pro 의 연구 결과를 일부 수정한 글입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;시작하기-전-필수-포커-용어&#34;&gt;시작하기 전: 필수 포커 용어&lt;/h2&gt;&#xA;&lt;p&gt;팟 오즈와 임플라이드 오즈를 이해하기 위해 다음 용어들을 먼저 알아야 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>포커 전략: C-Bet (지속 베팅) 가이드</title>
      <link>https://philipjkim.github.io/posts/20250820-what-is-c-bet-and-why-it-is-important/</link>
      <pubDate>Wed, 20 Aug 2025 19:50:57 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250820-what-is-c-bet-and-why-it-is-important/</guid>
      <description>&lt;p&gt;텍사스 홀덤에서 상대를 압박하고 팟(Pot)을 가져오는 가장 기본적인 기술 중 하나는 C-Bet(Continuation Bet, 지속 베팅)입니다. 프리플랍에서의 주도권을 플랍 이후까지 이어가는 이 전략은, 초보 플레이어에서 벗어나기 위해 반드시 이해해야 할 필수 개념입니다. 이 글은 C-Bet의 정의와 중요성, 그리고 기초적인 실행 전략에 대해 상세히 다룹니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;C-Bet 에 대한 Gemini 2.5 pro 의 연구 결과를 일부 수정한 글입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;c-bet-이전에-알아야-할-개념들&#34;&gt;C-Bet 이전에 알아야 할 개념들&lt;/h2&gt;&#xA;&lt;p&gt;C-Bet을 이해하기 위해서는 몇 가지 기본적인 용어에 대한 이해가 필요합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 구현 세부사항보다 Public API를 테스트하세요</title>
      <link>https://philipjkim.github.io/posts/20250820-tott-prefer-testing-public-apis/</link>
      <pubDate>Wed, 20 Aug 2025 16:29:38 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250820-tott-prefer-testing-public-apis/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2015/01/testing-on-toilet-prefer-testing-public.html&#34;&gt;https://testing.googleblog.com/2015/01/testing-on-toilet-prefer-testing-public.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;아래 클래스는 테스트가 필요할까요?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserInfoValidator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserInfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDateOfBirth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isInFuture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidationException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 클래스의 메서드에는 로직이 포함되어 있으니 테스트하는 것이 좋을 수 있습니다. 하지만 이 클래스를 사용하는 유일한 코드가 아래와 같다면 어떨까요?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserInfoService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserInfoValidator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserInfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 값이 유효하지 않으면 예외를 던짐&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeToDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;답은 다음과 같습니다: 아마도 &lt;code&gt;UserInfoValidator&lt;/code&gt;는 테스트가 필요 없을 것입니다. 왜냐하면 모든 경로를 &lt;code&gt;UserInfoService&lt;/code&gt;를 통해 테스트할 수 있기 때문입니다. 여기서 핵심적인 구분은 **이 클래스가 Public API가 아니라 구현 세부사항(implementation detail)**이라는 점입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 커트 로젠윙클, 브람스를 사색하다: &#39;The Brahms Project&#39; 리뷰</title>
      <link>https://philipjkim.github.io/posts/20250820-kurt-rosenwinkel-the-brahms-project/</link>
      <pubDate>Wed, 20 Aug 2025 10:45:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250820-kurt-rosenwinkel-the-brahms-project/</guid>
      <description>&lt;p&gt;현대 재즈 기타리스트 커트 로젠윙클이 쇼팽의 세계를 탐구했던 &amp;lsquo;The Chopin Project&amp;rsquo;에 이어, 이번에는 낭만주의 시대의 또 다른 거장 요하네스 브람스(Johannes Brahms)의 음악에 대한 깊은 존경과 재해석을 담은 앨범 &amp;lsquo;The Brahms Project&amp;rsquo;를 선보입니다. 이 앨범은 브람스 특유의 복잡한 화성과 깊은 서정성을 재즈의 언어로 풀어낸 또 하나의 기념비적인 결과물입니다. 이 글은 작곡가 브람스의 음악 세계를 소개하고, &amp;lsquo;The Brahms Project&amp;rsquo; 앨범의 탄생 배경과 모든 수록곡을 상세히 분석합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 언어의 풍부한 표준 라이브러리 (Batteries Included)</title>
      <link>https://philipjkim.github.io/posts/20250819-go-batteries-included/</link>
      <pubDate>Tue, 19 Aug 2025 12:55:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250819-go-batteries-included/</guid>
      <description>&lt;p&gt;Go 언어의 특징을 소개하는 시리즈의 세 번째 글입니다. 이전 글에서는 Go의 &lt;strong&gt;단순성&lt;/strong&gt;과 &lt;strong&gt;동시성&lt;/strong&gt;에 대해 다루었습니다. 이번에는 Go가 &amp;lsquo;건전지 포함(Batteries Included)&amp;rsquo; 철학을 어떻게 구현하고 있는지, 즉 강력하고 풍부한 표준 라이브러리에 대해 이야기하고자 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(이 글은 Gemini 2.5 Pro 모델에 의해 작성되었으며, 커버하고 있는 세부 항목들과 글의 톤/매너에 대한 요구사항들은 제가 정리해서 Gemini 에 요청했습니다. 내용에 잘못된 부분이 있을 수 있는데, 그런 경우 잘못된 정보에 대한 댓글을 남겨주시면 감사하겠습니다.)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;go-창시자들의-철학-실용성과-안정성&#34;&gt;Go 창시자들의 철학: 실용성과 안정성&lt;/h2&gt;&#xA;&lt;p&gt;Go 언어의 설계 철학은 구글의 대규모 프로덕션 환경에서 마주친 문제들을 해결하는 데서 출발했습니다. 언어의 창시자들인 &lt;strong&gt;로버트 그리즈머(Robert Griesemer)&lt;/strong&gt;, &lt;strong&gt;롭 파이크(Rob Pike)&lt;/strong&gt;, &lt;strong&gt;켄 톰슨(Ken Thompson)&lt;/strong&gt; 은 복잡한 외부 의존성 없이도 당장 현장에서 필요한 대부분의 기능을 수행할 수 있는 언어를 원했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 커트 로젠윙클, 쇼팽을 만나다: &#39;The Chopin Project&#39; 리뷰</title>
      <link>https://philipjkim.github.io/posts/20250819-kurt-rosenwinkel-the-chopin-project/</link>
      <pubDate>Tue, 19 Aug 2025 10:01:24 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250819-kurt-rosenwinkel-the-chopin-project/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;현대 재즈 기타의 지형을 논할 때 커트 로젠윙클(Kurt Rosenwinkel)의 이름을 빼놓을 수 없습니다. 그는 독창적인 화성 감각과 유려한 프레이징, 그리고 기타 사운드에 대한 혁신적인 접근으로 자신만의 독보적인 영역을 구축한 아티스트입니다. 2023년 발매된 앨범 &amp;lsquo;The Chopin Project&amp;rsquo;는 그가 클래식 음악의 거장 프레데리크 쇼팽(Frédéric Chopin)의 세계를 재즈의 언어로 탐구한 야심 찬 결과물입니다. 이 글은 커트 로젠윙클과 그의 음악 세계를 소개하고, &amp;lsquo;The Chopin Project&amp;rsquo; 앨범의 탄생 배경과 모든 수록곡을 상세히 분석합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>회사 소개: G&amp;L: 레오 펜더의 마지막 유산, 그 혁신의 역사와 특징</title>
      <link>https://philipjkim.github.io/posts/20250818-introduction-to-g-and-l/</link>
      <pubDate>Mon, 18 Aug 2025 10:26:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250818-introduction-to-g-and-l/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 G&amp;amp;L 에 대한 Gemini 2.5 pro 의 연구결과에 기반했습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;G&amp;amp;L은 일렉트릭 기타의 아버지, 레오 펜더가 그의 오랜 동료 조지 풀러턴(George Fullerton)과 함께 설립한 마지막 악기 제조사입니다. &amp;lsquo;G&amp;amp;L&amp;rsquo;이라는 이름 역시 George &amp;amp; Leo의 이니셜에서 비롯되었습니다. G&amp;amp;L은 펜더의 전통적인 디자인을 계승하면서도, 그가 평생에 걸쳐 완성하고자 했던 기술적 혁신을 집약한 브랜드로 평가받습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;gl의-탄생-레오-펜더의-마지막-여정&#34;&gt;G&amp;amp;L의 탄생: 레오 펜더의 마지막 여정&lt;/h2&gt;&#xA;&lt;p&gt;레오 펜더는 자신이 설립한 두 개의 회사, 펜더(Fender)와 뮤직맨(Music Man)을 떠나 G&amp;amp;L을 설립했습니다. 그 과정은 그의 &amp;lsquo;완벽한 악기&amp;rsquo;를 향한 끊임없는 열망을 보여줍니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>음반 소개: 유재하, 단 한 장의 유산: &#39;사랑하기 때문에&#39; 앨범 전체 리뷰</title>
      <link>https://philipjkim.github.io/posts/20250812-album-yoo-jae-ha-1st/</link>
      <pubDate>Tue, 12 Aug 2025 08:48:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250812-album-yoo-jae-ha-1st/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 저의 여러 요구사항에 대한 Gemini 2.5 pro 의 대답에 의해 초고가 작성되었으며, 이후 퇴고를 거쳤습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.namu.wiki/i/mqfiF1FrF_TU_5lJPkB4tY7FmaDUV0GF-hp3k_wX3Ydf-Xi5-v1SFGGtwDJj1YSIWn5wqUlSsuEqL5MfHePSLPaRnIiY_dtPr1dSCJWB0xxKG7UZXF4m72pVYfCjyQf8w8rRAxyJAJYQOYl8YwkXbw.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1987년 11월 1일, 스물다섯의 나이로 요절한 천재 뮤지션 유재하. 그가 세상을 떠나기 불과 3개월 전에 남긴 단 한 장의 앨범 &amp;lt;사랑하기 때문에&amp;gt;는 한국 대중음악사의 흐름을 완전히 바꿔놓은 기념비적인 작품으로 기록됩니다. 이 글은 그의 짧았던 삶을 돌아보고, 유일한 유작이 된 앨범의 모든 트랙을 상세히 분석하며, 그의 음악이 남긴 깊은 유산을 조망합니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;불꽃처럼-살다-간-천재-유재하&#34;&gt;불꽃처럼 살다 간 천재, 유재하&lt;/h2&gt;&#xA;&lt;p&gt;유재하(1962-1987)는 한양대학교 작곡과에서 클래식 음악을 전공한 인재였습니다. 그의 음악적 깊이는 클래식 화성학과 대중음악 팝/재즈의 감성을 결합하는 독창적인 능력에서 비롯되었습니다. 대학 시절 &amp;lsquo;조용필과 위대한 탄생&amp;rsquo;의 키보디스트로 발탁되었고, 이후 김현식의 3집 앨범에 참여해 명곡 &amp;lsquo;그대 내 품에&amp;rsquo;를 먼저 선보이며 실력을 입증했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>책 소개: 마침내 특이점이 시작된다: 레이 커즈와일의 예언, 20년 후의 현실</title>
      <link>https://philipjkim.github.io/posts/20250812-book-the-singularity-is-nearer/</link>
      <pubDate>Tue, 12 Aug 2025 08:21:10 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250812-book-the-singularity-is-nearer/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 &amp;ldquo;마침내 특이점이 시작된다&amp;rdquo; 책에 관련한 여러 가지 질문들에 대한 Gemini 2.5 pro 의 대답에 기반했으며 일부 내용은 수정되었습니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;레이 커즈와일(Ray Kurzweil)은 단순한 발명가나 컴퓨터 과학자를 넘어, 기술의 기하급수적 발전을 통해 인류 문명의 근본적 변화를 예고한 &amp;lsquo;현대의 노스트라다무스&amp;rsquo;로 불립니다. 2005년, 그는 저서 &amp;lt;특이점이 온다 (The Singularity Is Near)&amp;gt;를 통해 인공지능이 인간의 지능을 초월하는 &amp;lsquo;특이점&amp;rsquo;이 임박했음을 선언했습니다. 그리고 약 20년이 지난 지금, 그의 새로운 책 &amp;lt;마침내 특이점이 시작된다 (The Singularity Is Nearer)&amp;gt;는 그 예언이 현실로 다가오고 있음을 구체적인 증거와 함께 제시합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 존 2 사이클링 훈련: 유산소 지구력 향상 방법</title>
      <link>https://philipjkim.github.io/posts/20250811-zone-2-training-for-cycling/</link>
      <pubDate>Mon, 11 Aug 2025 15:15:04 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-zone-2-training-for-cycling/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.bikeradar.com/advice/fitness-and-training/cycling-endurance&#34;&gt;https://www.bikeradar.com/advice/fitness-and-training/cycling-endurance&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;적은 노력으로 더 멀리, 더 빠르게 라이딩하고 싶다면 속도를 늦춰야 할 수도 있습니다. 저강도 훈련은 주간 주행 기록의 필수 요소가 되어야 합니다. 유산소 발달과 유산소 지구력 구축을 위해 저-중강도로 훈련하십시오.&lt;/p&gt;&#xA;&lt;p&gt;일반적으로 존 2 훈련은 &amp;ldquo;기반&amp;quot;을 구축하는 데 사용됩니다. 이러한 유형의 훈련은 1시간에서 3시간, 심지어 4시간 이상 지속되는 길고 꾸준한 라이딩으로 구성됩니다. 이는 또한 길고 꾸준한 지구력 라이딩(보통 주말에 하지만 주중 아무 날이나 할 수 있습니다)을 할 때 유지해야 하는 강도와 동일합니다. 기반 훈련은 부상 예방에 좋을 뿐만 아니라, 유산소 발달을 촉진하기 위한 견고한 주행 기반을 구축할 수 있게 해줍니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 의 동시성 (concurrency) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250811-concurrency-of-go/</link>
      <pubDate>Mon, 11 Aug 2025 13:39:08 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-concurrency-of-go/</guid>
      <description>&lt;p&gt;현대의 컴퓨터는 멀티코어 프로세서를 기반으로 작동하며, 동시성(Concurrency)은 더 이상 선택이 아닌 필수적인 프로그래밍 패러다임이 되었습니다. Go 언어는 설계 초기부터 동시성을 핵심 기능으로 채택했으며, 전통적인 스레드-락(Thread-Lock) 모델의 복잡성을 해결하기 위한 명확한 철학을 제시합니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 동시성 모델이 어떠한 철학 위에서 탄생했는지 살펴보고, 다른 주류 언어들과의 접근 방식을 비교 분석합니다. 이를 통해 Go의 동시성이 갖는 장점과 현실적인 트레이드오프를 가감 없이 설명하고자 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(이 글은 Gemini 2.5 Pro 모델에 의해 작성되었으며, 커버하고 있는 세부 항목들과 글의 톤/매너에 대한 요구사항들은 제가 정리해서 Gemini 에 요청했습니다. 내용에 잘못된 부분이 있을 수 있는데, 그런 경우 잘못된 정보에 대한 댓글을 남겨주시면 감사하겠습니다.)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 3-벳(3-Bet) 완벽 해부</title>
      <link>https://philipjkim.github.io/posts/20250811-breaking-down-the-3-bet/</link>
      <pubDate>Mon, 11 Aug 2025 12:14:16 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-breaking-down-the-3-bet/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.pokerlistings.com/poker-strategies/breaking-down-the-threebet&#34;&gt;https://www.pokerlistings.com/poker-strategies/breaking-down-the-threebet&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;3-벳은 오늘날 포커 게임에서 가장 중요하고 자주 사용되는 전략 중 하나입니다. 3-벳을 올바르게 사용하는 방법을 마스터하는 것은 수익을 내는 플레이어가 되기 위한 핵심 단계입니다.&lt;/p&gt;&#xA;&lt;p&gt;이 가이드에서는 3-벳의 기본부터 시작하여, 언제, 왜, 그리고 어떻게 3-벳을 해야 하는지에 대한 모든 것을 다룰 것입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-벳이란-무엇인가&#34;&gt;3-벳이란 무엇인가?&lt;/h2&gt;&#xA;&lt;p&gt;포커에서 &amp;lsquo;벳(bet)&amp;lsquo;의 순서를 이해하는 것이 중요합니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;첫 번째 벳 (1-bet):&lt;/strong&gt; 빅 블라인드가 의무적으로 내는 것입니다. 이것이 판의 첫 번째 &amp;lsquo;베팅&amp;rsquo;입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;두 번째 벳 (2-bet):&lt;/strong&gt; 프리플랍(pre-flop)에서 처음으로 레이즈하는 것을 말합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;세 번째 벳 (3-bet):&lt;/strong&gt; 두 번째 벳(첫 레이즈)에 대해 다시 레이즈(리레이즈)하는 것을 &lt;strong&gt;3-벳&lt;/strong&gt;이라고 합니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;간단히 말해, &lt;strong&gt;3-벳은 프리플랍에서 나온 첫 번째 리레이즈&lt;/strong&gt;입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 서술적인 테스트 이름 작성하기</title>
      <link>https://philipjkim.github.io/posts/20250811-tott-writing-descriptive-test-names/</link>
      <pubDate>Mon, 11 Aug 2025 12:05:33 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-tott-writing-descriptive-test-names/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2014/10/testing-on-toilet-writing-descriptive.html&#34;&gt;https://testing.googleblog.com/2014/10/testing-on-toilet-writing-descriptive.html&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;여러분은 테스트 이름을 어떻게 짓나요? 아래 코드 샘플을 한번 보세요. 이 테스트가 무엇을 하는지, 어떤 동작을 검증하는지 즉시 파악할 수 있나요?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testLogin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 테스트는 사용자가 성공적으로 로그인하는 시나리오를 테스트할 수도 있고, 잘못된 비밀번호를 입력했을 때의 시나리오를 테스트할 수도 있습니다. 테스트가 무엇을 하는지 이해하려면 테스트의 본문을 읽어야만 합니다. 이제 아래의 다른 테스트 이름을 보세요.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;isUserLockedOut_lockOutUserAfterThreeInvalidLoginAttempts&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;이제 여러분은 테스트 본문을 읽지 않고도, 단지 테스트 이름만 읽는 것만으로 어떤 동작이 테스트되고 있는지 이해할 수 있어야 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Garmin Connect 의 주요 훈련 효과 (Primary Benefit)</title>
      <link>https://philipjkim.github.io/posts/20250811-garmin-primary-benefit/</link>
      <pubDate>Mon, 11 Aug 2025 11:56:17 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250811-garmin-primary-benefit/</guid>
      <description>&lt;p&gt;Garmin Connect에서 제공하는 &amp;lsquo;주요 훈련 효과(Primary Benefit)&amp;lsquo;는 운동이 신체에 미치는 주된 영향을 분석하여 보여주는 지표입니다. 이 지표는 심박수 데이터를 기반으로 운동 강도와 지속 시간을 평가하며, 사용자가 자신의 훈련 목표에 맞춰 운동 계획을 세우는 데 도움을 줍니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/20250811_primary_benefit_01.jpg&#34; alt=&#34;primary_benefit&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;심박수 구간은 일반적으로 최대 심박수(MHR)의 백분율로 계산됩니다. 최대 심박수 193을 기준으로 한 각 구간별 심박수는 다음과 같습니다. (최대 심박수는 사람마다 다르며 이 글에서 사용하는 193 은 philipjkim 개인의 최대 심박수)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zone 1 (회복):&lt;/strong&gt; 97-115 bpm (50-60%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zone 2 (기초):&lt;/strong&gt; 116-135 bpm (60-70%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zone 3 (템포):&lt;/strong&gt; 136-154 bpm (70-80%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zone 4 (역치):&lt;/strong&gt; 155-173 bpm (80-90%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zone 5 (최대):&lt;/strong&gt; 174-193 bpm (90-100%)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-무산소-anaerobic&#34;&gt;1. 무산소 (Anaerobic)&lt;/h2&gt;&#xA;&lt;p&gt;무산소 운동은 짧은 시간 동안 폭발적인 힘을 사용하는 고강도 활동을 의미합니다. 이 훈련은 산소 공급이 수요를 따라가지 못하는 상태에서 이루어지며, 젖산 역치를 넘어선 강도로 진행됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>러닝: 심박수를 주목해야 하는 이유</title>
      <link>https://philipjkim.github.io/posts/20250808-why-your-heart-rate-matters-when-you-run/</link>
      <pubDate>Fri, 08 Aug 2025 12:13:12 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250808-why-your-heart-rate-matters-when-you-run/</guid>
      <description>&lt;p&gt;&lt;em&gt;심박수 (heart rate) 에 대한 궁금한 점들을 모아 Gemini 2.5 pro 에 질문했고, 이 글은 그에 대한 대답입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;많은 러너들이 심박수 측정이 가능한 스마트워치나 가슴 스트랩을 착용하면서도, 정작 그 숫자가 무엇을 의미하는지, 어떻게 활용해야 하는지 잘 모르는 경우가 많습니다. &lt;strong&gt;심박수&lt;/strong&gt;는 단순히 심장이 얼마나 빨리 뛰는지를 보여주는 숫자를 넘어, 우리 몸이 현재 어떤 상태인지, 훈련이 제대로 되고 있는지를 알려주는 가장 정직한 지표입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;왜-러너는-심박수를-알아야-할까요&#34;&gt;왜 러너는 심박수를 알아야 할까요?&lt;/h2&gt;&#xA;&lt;p&gt;운전할 때 속도계를 보며 현재 속도를 파악하듯, 러닝 시 심박수를 확인하는 것은 &lt;strong&gt;운동 강도를 객관적으로 파악&lt;/strong&gt;하는 가장 좋은 방법입니다. 같은 페이스로 달려도 그날의 컨디션, 피로도, 날씨에 따라 우리 몸이 느끼는 부담은 천차만별입니다. 어제는 가볍게 느껴졌던 5분 페이스가 오늘은 유독 힘들게 느껴진다면, 아마 심박수가 평소보다 높게 나타날 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>용어 소개: AGI 란 무엇인가?</title>
      <link>https://philipjkim.github.io/posts/20250808-what-is-agi/</link>
      <pubDate>Fri, 08 Aug 2025 11:59:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250808-what-is-agi/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 글은 AGI 에 대한 정의와 개념, 현재 LLM 에서 사용되는 AI 와의 차이점 질문에 대한 Gemini 2.5 pro 의 대답입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;AGI(범용 인공지능)는 인간이 할 수 있는 모든 지적인 작업을 기계가 해낼 수 있는, 특정 작업에 국한되지 않은 포괄적인 인공지능을 의미합니다. 이는 주어진 데이터로 학습된 패턴에 따라 반응하는 현재의 AI를 넘어, 스스로 추론하고, 배우고, 새로운 상황에 적응하는 능력을 갖춘 지능을 말합니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;agi범용-인공지능란-무엇인가요-&#34;&gt;AGI(범용 인공지능)란 무엇인가요? 🧠&lt;/h2&gt;&#xA;&lt;p&gt;AGI(Artificial General Intelligence)는 종종 &amp;lsquo;강한 AI(Strong AI)&amp;lsquo;라고도 불립니다. 현재 우리가 사용하는 대부분의 AI는 &amp;lsquo;약한 AI(Weak AI)&amp;rsquo; 또는 &amp;lsquo;좁은 AI(Narrow AI)&amp;lsquo;로 분류되는데, 이는 언어 번역, 이미지 인식, 코드 생성 등 특정 작업에만 뛰어나도록 설계되었기 때문입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 의 단순함(simplicity) 더 들여다보기</title>
      <link>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</link>
      <pubDate>Thu, 07 Aug 2025 08:08:20 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250807-simplicity-of-go/</guid>
      <description>&lt;p&gt;Go 언어의 철학을 관통하는 가장 중요한 단어는 바로 &lt;strong&gt;&amp;lsquo;단순함(Simplicity)&amp;rsquo;&lt;/strong&gt; 입니다. 이는 단순히 기능이 적다는 의미가 아니라, 복잡한 문제를 명료하고 예측 가능하게 해결하기 위한 의도적인 설계 철학입니다. Go의 창시자 중 한 명인 롭 파이크(Rob Pike)는 &amp;ldquo;단순함은 복잡하다(Simplicity is Complicated)&amp;ldquo;고 말했습니다. 최고의 단순함을 성취하기 위해 수많은 고민과 트레이드오프가 있었음을 암시하는 말이죠.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 Go의 핵심 철학인 &amp;lsquo;단순함&amp;rsquo;이 코드 수준에서 어떻게 드러나는지, 그리고 이 철학이 왜 어떤 개발자에게는 최고의 장점이 되고 다른 개발자에게는 답답한 단점으로 여겨지는지 가감 없이 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>책 소개: VIBE CODING by Gene Kim and Steve Yegge</title>
      <link>https://philipjkim.github.io/posts/20250807-book-vibe-coding-preface/</link>
      <pubDate>Thu, 07 Aug 2025 07:44:08 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250807-book-vibe-coding-preface/</guid>
      <description>&lt;p&gt;&lt;em&gt;이 책의 존재를 알려준 &lt;a href=&#34;mailto:r@rsl.kr&#34;&gt;r@rsl.kr&lt;/a&gt; 에게 감사를 표합니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;이 책의 공개된 일부 내용은 &lt;a href=&#34;https://go.itrevolution.net/e/Xys/U3oak/7Qm/R2mkNon98&#34;&gt;https://go.itrevolution.net/e/Xys/U3oak/7Qm/R2mkNon98&lt;/a&gt; 에서 다운로드할 수 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;이 글은 제가 pdf 원문을 읽기 전 맥락을 먼저 갖기 위해 Gemini 에 번역/요약을 요청한 결과입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;책-소개-vibe-coding---무엇을-다루는가&#34;&gt;책 소개: &amp;ldquo;VIBE CODING&amp;rdquo; - 무엇을 다루는가?&lt;/h2&gt;&#xA;&lt;p&gt;이 책은 &lt;strong&gt;&amp;ldquo;바이브 코딩(Vibe Coding)&amp;rdquo;&lt;/strong&gt; 이라는 새로운 소프트웨어 개발 패러다임을 중심으로, 생성형 AI(GenAI), 챗(Chat), 에이전트(Agent)를 활용하여 실제 상용 수준의 소프트웨어를 구축하는 방법을 다룹니다. 저자들은 바이브 코딩이 단순히 코드를 빨리 짜는 기술을 넘어, 소프트웨어를 &lt;strong&gt;누가, 어떤 속도로, 얼마나 큰 야망을 가지고 만들 수 있는지&lt;/strong&gt;에 대한 근본적인 정의를 바꾸고 있다고 주장합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 형편없는 바이브 코더의 9가지 습관</title>
      <link>https://philipjkim.github.io/posts/20250806-9-habits-of-the-highly-ineffective-vibe-coder/</link>
      <pubDate>Wed, 06 Aug 2025 15:28:31 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250806-9-habits-of-the-highly-ineffective-vibe-coder/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.infoworld.com/article/4029093/9-habits-of-the-highly-ineffective-vibe-coder.html&#34;&gt;https://www.infoworld.com/article/4029093/9-habits-of-the-highly-ineffective-vibe-coder.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;바이브 코딩이 정말 그렇게 쉽다고요? AI의 현실 세계적 등가물인 집사를 생각해 보세요. 새로운 집사에게 아침 식사를 제공하거나 완벽한 마티니를 만드는 방법과 같은 기술을 가르치는 전문 학교가 있습니다. 하지만 이 학교들이 부자들에게 집사와 잘 지내는 방법을 가르치는 병행 과정도 있다는 것을 알고 계셨나요? 맞습니다. 부자들은 찻잔을 올바르게 잡는 방법을 배워서 집사가 우아하게 차를 채울 수 있도록 합니다. 심지어 어떤 종류의 요청이 적절하고 어떤 것이 그렇지 않은지도 배웁니다. 이것은 2분짜리 틱톡 비디오에서는 가르칠 수 없는 종류의 일입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 증강 코딩: 바이브를 넘어</title>
      <link>https://philipjkim.github.io/posts/20250806-augmented-coding-beyond-the-vibes/</link>
      <pubDate>Wed, 06 Aug 2025 09:22:00 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250806-augmented-coding-beyond-the-vibes/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://tidyfirst.substack.com/p/augmented-coding-beyond-the-vibes&#34;&gt;https://tidyfirst.substack.com/p/augmented-coding-beyond-the-vibes&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;이 글의 존재를 알려준 &lt;a href=&#34;mailto:r@rsl.kr&#34;&gt;r@rsl.kr&lt;/a&gt; 에게 감사를 표합니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;최근 증강 코딩을 사용하여 B+ 트리 라이브러리를 구축하려는 야심 찬 프로젝트에서 좋은 마무리를 지었습니다. 그 결과물은 &lt;a href=&#34;https://github.com/KentBeck/BPlusTree3&#34;&gt;&lt;em&gt;BPlusTree3&lt;/em&gt;&lt;/a&gt; - Rust 및 Python으로 구현된 성능 경쟁력이 있고, 어쩌면 프로덕션에 즉시 사용 가능한 구현입니다. 저는 친구와 앉아 저의 이야기를 나누고 GenAI 시대의 프로그래밍 미래에 대해 무엇을 시사하는지 생각해 보았습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;무엇이-당신을-b-트리를-먼저-구현하게-만들었나요&#34;&gt;무엇이 당신을 B+ 트리를 먼저 구현하게 만들었나요?&lt;/h2&gt;&#xA;&lt;p&gt;증강 코딩의 놀라운 힘을 깨닫기 시작했을 때, 저는 과거에 기술적으로 접근하기 어려웠던 프로젝트들을 떠올리기 시작했습니다. 그중 하나는 특수 목적 데이터베이스였습니다. 지금 그 데이터베이스 프로젝트를 구현하면서 B+ 트리 데이터 구조를 충분히 이해하지 못했다는 것을 깨달았고 그래서 목표를 바꿨습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI 코딩 시대의 그림자: LLM 의존이 개발자에게 미치는 잠재적 위험 5가지</title>
      <link>https://philipjkim.github.io/posts/20250805-shadows-of-ai-coding-era/</link>
      <pubDate>Tue, 05 Aug 2025 16:12:15 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250805-shadows-of-ai-coding-era/</guid>
      <description>&lt;p&gt;&lt;code&gt;vibe-coding&lt;/code&gt;, &lt;code&gt;agent-coding&lt;/code&gt; 이라는 말이 어색하지 않은 시대입니다. Claude, Gemini, GitHub Copilot과 같은 LLM(거대 언어 모델) 기반 코딩 도구들은 이제 단순히 코드 스니펫을 자동 완성해주는 수준을 넘어, 우리의 생각을 논리적으로 설명하면 프로젝트 전체의 구조를 짜고 방대한 양의 코드를 순식간에 만들어냅니다. 생산성의 혁신이라 부를 만한 이 변화는 분명 경이롭습니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 이 강력한 도구에 과도하게 의존하기 시작하면서, 우리는 이전에 겪어보지 못한 새로운 종류의 문제들에 직면하고 있습니다. 밝은 빛이 강할수록 그림자도 짙어지는 법입니다. 지난 주말 바이브코딩을 직접 경험해 보며 그런 그림자의 영역을 빠르게 체감할 수 있었습니다. 이 글에서는 LLM 기반 코딩에 대한 의존이 개발자 개인과 팀에 미칠 수 있는 5가지 잠재적 위험을 심도 있게 다뤄보고자 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>기업 소개: Thinking Machines Lab</title>
      <link>https://philipjkim.github.io/posts/20250805-introduction-to-thinking-machines-lab/</link>
      <pubDate>Tue, 05 Aug 2025 14:22:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250805-introduction-to-thinking-machines-lab/</guid>
      <description>&lt;h2 id=&#34;창립-배경&#34;&gt;창립 배경&lt;/h2&gt;&#xA;&lt;p&gt;2025년 2월, &lt;a href=&#34;https://thinkingmachines.ai/&#34;&gt;Thinking Machines Lab&lt;/a&gt; 는 인공지능 업계의 &amp;lsquo;드림팀&amp;rsquo;으로 불리는 전 OpenAI 핵심 인력들이 주축이 되어 설립되었습니다. CEO인 미라 무라티(Mira Murati)를 비롯해 존 슐먼(John Schulman), 바렛 조프(Barret Zoph), 릴리안 웽(Lilian Weng), 앤드류 툴로치(Andrew Tulloch) 등 OpenAI에서 ChatGPT와 GPT-4 개발을 이끌었던 최고 전문가들이 대거 합류하며 큰 주목을 받았습니다.&lt;/p&gt;&#xA;&lt;p&gt;이들은 기존 AI 기술의 한계를 넘어 인간과 더 안전하고 효과적으로 협력할 수 있는 차세대 인공지능을 구축하겠다는 공동의 목표를 가지고 OpenAI를 떠나 새로운 회사를 설립했습니다. 이는 단순히 더 강력한 AI 모델을 만드는 것을 넘어, 인공지능의 안전성, 투명성, 그리고 인간과의 상호작용 방식에 대한 근본적인 질문에 답하고자 하는 이들의 깊은 고민에서 비롯된 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>책 소개: 소프트웨어 설계의 철학</title>
      <link>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</link>
      <pubDate>Mon, 04 Aug 2025 18:13:51 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250804-a-philosophy-of-software-design/</guid>
      <description>&lt;p&gt;존 오스터하우트 (John Ousterhout) 의 &lt;a href=&#34;https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201&#34;&gt;소프트웨어 설계의 철학 - A Philosophy of Software Design&lt;/a&gt; 은 소프트웨어 복잡성을 줄이고 유지 관리가 용이한 코드를 작성하는 방법에 대한 심도 있는 통찰력을 제공합니다. 21개 챕터에 걸쳐 저자는 복잡성의 본질을 분석하고, 효과적인 모듈 설계를 위한 원칙을 제시하며, 코드의 가독성과 명확성을 높이는 구체적인 기법들을 소개합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;아래 내용은 Gemini 의 연구 결과에 약간의 퇴고를 거친 것입니다.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론-복잡성과의-전쟁&#34;&gt;서론: 복잡성과의 전쟁&lt;/h2&gt;&#xA;&lt;p&gt;존 오스터하우트의 저서 &amp;ldquo;소프트웨어 설계의 철학(A Philosophy of Software Design)&amp;ldquo;은 소프트웨어 개발의 가장 근본적인 한계가 성능이나 기능이 아니라, 우리가 만든 시스템을 우리 스스로 이해하는 능력에 있다는 주장으로 시작합니다.[1, 2] 이 책의 전체 철학은 단 하나의 적, 즉 &lt;strong&gt;복잡성(complexity)&lt;/strong&gt; 에 맞서기 위한 일련의 전략들로 구성되어 있습니다.[3, 4, 5, 6]&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 테스트에 로직을 넣지 마세요</title>
      <link>https://philipjkim.github.io/posts/20250804-tott-dont-put-logic-in-tests/</link>
      <pubDate>Mon, 04 Aug 2025 09:20:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250804-tott-dont-put-logic-in-tests/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2014/07/testing-on-toilet-dont-put-logic-in.html&#34;&gt;https://testing.googleblog.com/2014/07/testing-on-toilet-dont-put-logic-in.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;프로그래밍 언어는 우리에게 많은 표현력을 제공합니다. 연산자와 조건문 같은 개념들은 광범위한 입력을 처리하는 프로그램을 작성할 수 있게 해주는 중요한 도구입니다. 하지만 이러한 유연성은 복잡성 증가라는 대가를 치르게 하여, 우리 프로그램을 이해하기 어렵게 만듭니다.&lt;/p&gt;&#xA;&lt;p&gt;프로덕션 코드와 달리, 테스트에서는 유연성보다 &lt;strong&gt;단순성&lt;/strong&gt;이 더 중요합니다. 대부분의 단위 테스트는 단일의, 알려진 입력이 단일의, 알려진 출력을 생성하는지 검증합니다. 테스트는 입력과 출력을 계산하는 대신 직접 명시함으로써 복잡성을 피할 수 있습니다. 그렇지 않으면 테스트 자체에 버그가 생기기 쉽습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>인물 소개: 안드레이 카르파티(Andrej Karpathy)</title>
      <link>https://philipjkim.github.io/posts/20250803-introduction-to-andrej-karpathy/</link>
      <pubDate>Sun, 03 Aug 2025 21:04:27 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250803-introduction-to-andrej-karpathy/</guid>
      <description>&lt;h2 id=&#34;안드레이-카르파티는-누구인가&#34;&gt;안드레이 카르파티는 누구인가?&lt;/h2&gt;&#xA;&lt;p&gt;안드레이 카르파티는 10년 이상 딥러닝 혁명의 중심에 있었던 컴퓨터 과학자입니다. 그의 경력은 현대 AI 역사상 가장 중요한 세 기관인 스탠포드 대학교, 테슬라, 그리고 OpenAI에 걸쳐 있습니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;교육 및 초기 연구 (스탠포드 대학교):&lt;/strong&gt; 카르파티는 스탠포드 대학교에서 박사 학위를 받았으며, ImageNet 데이터셋의 창시자 중 한 명인 페이페이 리(Fei-Fei Li) 교수의 지도를 받았습니다. 그의 연구는 자연어 처리(NLP)와 컴퓨터 비전의 교차점에 초점을 맞췄습니다. 박사 과정 동안 그는 이미지의 내용을 자연어 문장으로 설명할 수 있는 획기적인 모델을 개발했습니다. 이미지 캡셔닝에 대한 이 연구는 기초가 되었으며, 복잡한 다중 모드 작업을 해결하기 위해 다양한 신경망 아키텍처(비전을 위한 합성곱 신경망과 언어를 위한 순환 신경망 등)를 결합하는 힘을 보여주었습니다. 그는 또한 스탠포드 최초의 딥러닝 강좌인 CS231n: &amp;ldquo;시각적 인식을 위한 합성곱 신경망&amp;quot;의 주 강사였으며, 이 강좌는 전 세계 학생들에게 중요한 자료가 되었습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 유해한 직장 환경을 나타내는 9가지 신호 - 그리고 대처법</title>
      <link>https://philipjkim.github.io/posts/20250731-sings-of-toxic-environment/</link>
      <pubDate>Thu, 31 Jul 2025 14:02:02 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250731-sings-of-toxic-environment/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.themuse.com/advice/toxic-work-environment&#34;&gt;https://www.themuse.com/advice/toxic-work-environment&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;대부분의 경력 기간 동안 저는 유해한 직장 환경을 피해 운이 좋다고 생각했습니다. 물론, 유해한 조직이 존재한다는 것을 알고 있었고, 이론적으로는 어떤 대가를 치르더라도 피해야 한다는 것을 알고 있었습니다. 하지만 유해한 직장이 실제로 어떤 모습인지 깨닫는 데는 수년이 걸렸습니다. 일단 깨닫고 나니, 저 역시 그런 직장에서 일했었다는 것을 알게 되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;당시에는 제가 문제라고 생각했기 때문에 깨닫지 못했습니다. 제 업무는 충분히 전략적이지 않았고, 관리자로서의 잠재력이 없었거나, 승진할 준비가 되지 않았다고 생각했지, 제가 일했던 조직이 문제라고는 생각하지 않았습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 는 왜 LLM 기반 Vibe-Coding에 적합한 언어인가?</title>
      <link>https://philipjkim.github.io/posts/20250731-golang-for-vibe-coding/</link>
      <pubDate>Thu, 31 Jul 2025 11:55:18 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250731-golang-for-vibe-coding/</guid>
      <description>&lt;p&gt;이 글에서는 LLM을 활용한 Vibe-Coding 시대에 Go 언어가 가지는 장점들을 알아봅니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(영문 글을 번역했던 블로그 대부분의 포스트와는 달리 이 글은 제가 초안을 작성하고, Gemini 의 도움을 받아 개선된 originality 가 있는 글입니다.)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-강력한-정적-타입-시스템과-컴파일-단계&#34;&gt;1. 강력한 정적 타입 시스템과 컴파일 단계&lt;/h2&gt;&#xA;&lt;p&gt;Go는 정적 타입 언어이며 컴파일을 통해 실행 파일을 만듭니다. 이는 코드가 실행되기 전, 즉 컴파일 시점에 타입 불일치, 함수 인자 오류, 존재하지 않는 변수 참조 등 수많은 오류를 미리 잡아낼 수 있음을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Gemini CLI: 소개 및 그 진정한 가치</title>
      <link>https://philipjkim.github.io/posts/20250730-gemini-cli-an-introduction-and-its-real-value/</link>
      <pubDate>Wed, 30 Jul 2025 09:08:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250730-gemini-cli-an-introduction-and-its-real-value/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://medium.com/@terrycho/gemini-cli-an-introduction-and-its-real-value-15bd070fb011&#34;&gt;https://medium.com/@terrycho/gemini-cli-an-introduction-and-its-real-value-15bd070fb011&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;얼마 전, Gemini CLI 발표 직후 구글의 Gemini 서버가 과부하되었다는 소식이 들려왔습니다. 사람들은 왜 Gemini CLI에 그렇게 열광하는 걸까요? 우리는 이미 웹과 데스크톱에서 사용할 수 있는 ChatGPT와 Claude, 그리고 Cursor와 Windsurf 같은 코딩 AI 도구, 심지어 Lovable과 V0 같은 바이브 코딩 도구까지 가지고 있습니다. 터미널 기반의 새로운 CLI 기반 AI가 이 시장에 어떤 영향을 미칠 수 있을까요?&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mnQoAMyjje5FOHG5TT85qA.png&#34; alt=&#34;img1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;무료 서비스 발표가 상당한 인기를 얻었지만, Gemini CLI는 전체 소프트웨어 개발 수명 주기(SDLC)를 아우르는 오케스트레이터로서 새로운 입지를 확립했습니다. 이는 소프트웨어 개발 전체를 포괄하려는 야심 찬 계획을 엿볼 수 있게 합니다. 이 글에서는 Gemini CLI가 왜 그렇게 인기 있는지, 그 특징과 차별점, 숨겨진 가치, 그리고 미래 개발 가능성에 대해 논의할 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Game Guide for Sampyong Hi-Lo (a.k.a. PLS7: Pot Limit Sampyong - 7 or better)</title>
      <link>https://philipjkim.github.io/posts/20250729-pls7-english-guide/</link>
      <pubDate>Tue, 29 Jul 2025 13:46:52 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250729-pls7-english-guide/</guid>
      <description>&lt;p&gt;Sampyong Hi-Lo (a.k.a. PLS7: Pot Limit Sampyong - 7 or better) is a new poker variant based on Pot-Limit Omaha Hi-Lo (PLO8), with modified rules to allow for a wider variety and more powerful hands to occur frequently.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-core-rules&#34;&gt;1. Core Rules&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Base Game&lt;/strong&gt;: Pot-Limit Omaha Hi-Lo. Betting is limited to the pot size, and the pot is split between the highest (High) and lowest (Low) hands.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hand Formation (Most Important Change)&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Each player receives &lt;strong&gt;3 cards&lt;/strong&gt; instead of 4. Five community cards are dealt on the board. (Total 8-card pool)&lt;/li&gt;&#xA;&lt;li&gt;Unlike Omaha&amp;rsquo;s &amp;lsquo;2 hole cards + 3 board cards&amp;rsquo; rule, in Sampyong Hi-Lo, players can &lt;strong&gt;freely use any number (0-3) of their hole cards&lt;/strong&gt; from the total 8-card pool to make the best 5-card High hand and Low hand.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Low Hand Rule&lt;/strong&gt;: Adheres to the strengthened &lt;strong&gt;&amp;lsquo;7-or-better&amp;rsquo;&lt;/strong&gt; rule, which is stricter than standard Hi-Lo games. This means a Low hand must consist of five different cards ranked 7 or below to qualify. (The best possible Low hand is &lt;code&gt;A, 2, 3, 4, 5&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Recommendation for 4 players or fewer&lt;/strong&gt;: For 4 or fewer players, it is recommended to play Sampyong (PLS) focusing only on High hands, excluding the Low rule. In 2-3 player games, frequent Hi/Lo pot splits can make the game slow.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-additional-special-hands&#34;&gt;2. Additional Special Hands&lt;/h2&gt;&#xA;&lt;p&gt;These new special hands add more excitement to Sampyong Hi-Lo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>삼평 하이로우 (PLS7 - Pot Limit Sampyong 7 or better) 게임 가이드</title>
      <link>https://philipjkim.github.io/posts/20250724-sampyeong-holdem-guide-v1-4/</link>
      <pubDate>Tue, 29 Jul 2025 13:46:52 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250724-sampyeong-holdem-guide-v1-4/</guid>
      <description>&lt;p&gt;삼평 하이로우(a.k.a. PLS7 : Pot Limit Sampyong - 7 or better)은 팟 리밋 오마하 하이-로우(PLO8)를 기반으로, 더 다양하고 강력한 핸드가 자주 나올 수 있도록 규칙을 변형한 새로운 방식의 포커 게임입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-핵심-규칙&#34;&gt;1. 핵심 규칙&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;기본 게임: 팟 리밋 오마하 하이-로우 (Pot-Limit Omaha Hi-Lo). 베팅은 팟 크기만큼만 가능하며, 가장 높은 패(High)와 가장 낮은 패(Low)가 팟을 나누어 가집니다.&lt;/li&gt;&#xA;&lt;li&gt;핸드 구성 방식 (가장 중요한 변경점):&#xA;&lt;ul&gt;&#xA;&lt;li&gt;각 플레이어는 4장이 아닌 &lt;strong&gt;3장&lt;/strong&gt;의 카드를 받습니다. 보드에는 5장의 공통 카드가 깔립니다. (총 8장의 카드 풀)&lt;/li&gt;&#xA;&lt;li&gt;오마하의 &amp;lsquo;핸드 2장 + 보드 3장&amp;rsquo; 규칙과 달리, 삼평 하이로우에서는 총 8장의 카드 중 &lt;strong&gt;원하는 개수(0~3장)의 핸드 카드를 자유롭게 사용&lt;/strong&gt;하여 최고의 5장짜리 하이(High) 핸드와 로우(Low) 핸드를 만듭니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;로우 핸드 규칙: 하이-로우 게임의 표준 규칙보다 강화된 &lt;strong&gt;&amp;lsquo;7-or-better&amp;rsquo;&lt;/strong&gt; 를 따릅니다. 즉, 로우 핸드는 서로 다른 7 이하의 숫자 5장으로 구성되어야 성립됩니다. (가장 좋은 로우 핸드는 &lt;code&gt;A, 2, 3, 4, 5&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;플레이어가 4명 이하일 경우는 로우 룰을 제외하고 하이로만 겨루는 삼평(PLS)을 추천합니다. 2~3인 플레이에서 하이/로우 스플릿이 되는 경우가 자주 발생하면 게임이 루즈해질 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-추가-특수-족보&#34;&gt;2. 추가 특수 족보&lt;/h2&gt;&#xA;&lt;p&gt;삼평 하이로우의 재미를 더하는 새로운 특수 족보입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 위험 중심 테스트 (Risk-Driven Test)</title>
      <link>https://philipjkim.github.io/posts/20250729-tott-risk-driven-testing/</link>
      <pubDate>Tue, 29 Jul 2025 10:35:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250729-tott-risk-driven-testing/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2014/05/testing-on-toilet-risk-driven-testing.html&#34;&gt;https://testing.googleblog.com/2014/05/testing-on-toilet-risk-driven-testing.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;우리는 모두 코드를 작성할 때 &lt;strong&gt;테스트를 작성하도록 길들여져 있습니다&lt;/strong&gt; : 단위, 기능, UI 등 모든 것을 말이죠. 우리는 결국 전문가입니다. 우리 중 많은 사람들은 작은 테스트가 작업을 빠르게 진행하게 하고, 더 큰 테스트가 안전과 마무리에 영감을 주는 것을 좋아합니다. 아니면 단순히 검토 중에 비난을 예상할 수도 있습니다. 우리는 이러한 테스트에 너무 익숙해져서 &lt;strong&gt;왜 테스트를 작성하는지 더 이상 질문하지 않는 경우&lt;/strong&gt;가 많습니다. 이것은 낭비적이고 위험할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 효과적인 테스트</title>
      <link>https://philipjkim.github.io/posts/20250728-tott-effective-testing/</link>
      <pubDate>Mon, 28 Jul 2025 10:24:47 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250728-tott-effective-testing/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2014/05/testing-on-toilet-effective-testing.html&#34;&gt;https://testing.googleblog.com/2014/05/testing-on-toilet-effective-testing.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;개별 단위 테스트를 작성하든 제품의 전체 테스트 프로세스를 설계하든, &lt;strong&gt;테스트가 코드의 버그를 얼마나 효과적으로 감지하고 보고하는지&lt;/strong&gt; 다시 한번 생각해보는 것이 중요합니다. 효과적이려면 모든 테스트가 극대화하려고 노력해야 하는 &lt;strong&gt;세 가지 중요한 품질&lt;/strong&gt;이 있습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;충실도-fidelity&#34;&gt;충실도 (Fidelity)&lt;/h2&gt;&#xA;&lt;p&gt;테스트 대상 코드가 손상되면 테스트는 실패합니다. &lt;strong&gt;고충실도 테스트는 테스트 대상 코드의 결함에 매우 민감하여 버그가 코드에 침투하는 것을 방지하는 데 도움이 됩니다.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;테스트가 코드의 모든 경로를 다루고 예상 상태에 대한 모든 관련 assertions 을 포함하는지 확인하여 충실도를 극대화하십시오.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 메서드가 아닌 동작을 테스트하라</title>
      <link>https://philipjkim.github.io/posts/20250725-tott-test-behaviors-not-methods/</link>
      <pubDate>Fri, 25 Jul 2025 09:17:03 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250725-tott-test-behaviors-not-methods/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2014/04/testing-on-toilet-test-behaviors-not.html&#34;&gt;https://testing.googleblog.com/2014/04/testing-on-toilet-test-behaviors-not.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;메서드를 작성한 후 메서드가 수행하는 모든 작업을 확인하는 테스트를 하나만 작성하기 쉽습니다. &lt;strong&gt;그러나 테스트와 public 메서드가 1:1 관계를 가져야 한다고 생각하는 것은 해로울 수 있습니다.&lt;/strong&gt; 우리가 정말로 테스트하고 싶은 것은 동작이며, 단일 메서드가 여러 동작을 나타낼 수 있고, 단일 동작이 때로는 여러 메서드에 걸쳐 있을 수도 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;전체 메서드를 확인하는 나쁜 테스트를 살펴보겠습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testProcessTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newUserWithBalance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW_BALANCE_THRESHOLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;plus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dollars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transactionProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;processTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Pile of Beanie Babies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dollars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertContains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;You bought a Pile of Beanie Babies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEmails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your balance is low&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEmails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSubject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;구매한 품목의 이름을 표시하고 잔액이 부족하다는 이메일을 보내는 것은 두 가지 별개의 동작이지만, 이 테스트는 동일한 메서드에 의해 트리거된다는 이유만으로 이 두 동작을 함께 살펴봅니다. &lt;strong&gt;이러한 테스트는 추가 동작이 계속 추가됨에 따라 시간이 지남에 따라 매우 커지고 유지 관리가 어려워지는 경우가 많습니다.&lt;/strong&gt; 결국에는 어떤 입력 부분이 어떤 단정(assertion)에 대한 책임이 있는지 파악하기가 매우 어려워질 것입니다. 테스트 이름이 메서드 이름을 직접적으로 반영한다는 사실 자체가 나쁜 징조입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 프로처럼 거짓말하는 법: 블러핑의 기술</title>
      <link>https://philipjkim.github.io/posts/20250724-how-to-lie-like-a-pro-the-art-of-bluffing/</link>
      <pubDate>Thu, 24 Jul 2025 10:24:27 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250724-how-to-lie-like-a-pro-the-art-of-bluffing/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://upswingpoker.com/bet-size-strategy-tips-rules/&#34;&gt;https://upswingpoker.com/bet-size-strategy-tips-rules/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;블러핑은 많은 포커 플레이어들에게 인기 있는 기술입니다. 하지만 블러핑을 너무 자주 사용하는 초보자들은 그 때문에 많은 돈을 잃습니다.&lt;/p&gt;&#xA;&lt;p&gt;프로페셔널 텍사스 홀덤 플레이어가 되고 싶다면, 블러핑을 너무 많이 하는 것을 자제해야 합니다.&lt;/p&gt;&#xA;&lt;p&gt;이 튜토리얼에서는 블러핑을 해야 하는 이유, 완벽한 블러핑을 성공시키는 방법, 블러핑을 얼마나 자주, 언제 사용해야 하는지 배울 것입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;텍사스-홀덤-nlh-에서-왜-블러핑을-해야-할까요&#34;&gt;텍사스 홀덤 (NLH) 에서 왜 블러핑을 해야 할까요?&lt;/h2&gt;&#xA;&lt;p&gt;블러핑은 두 가지 이점을 제공합니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;첫째, 실제 가지고 있는 패보다 훨씬 강한 패를 가지고 있는 것처럼 보여줌으로써 원래는 이길 수 없었던 팟을 가져갈 수 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;둘째, 포커 플레이에 예측 불가능한 분위기를 부여합니다. 텍사스 홀덤에서 상대방은 당신이 어떤 순간에 강한 패를 플레이하는지 약한 패를 플레이하는지 판단하기 어려울 것입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;텍사스-홀덤에서-완벽한-블러핑을-성공시키는-방법은-무엇일까요&#34;&gt;텍사스 홀덤에서 완벽한 블러핑을 성공시키는 방법은 무엇일까요?&lt;/h2&gt;&#xA;&lt;p&gt;예측 불가능성을 섞은 타이트하고 공격적인 플레이어의 이미지를 갖는 것도 중요합니다. 타이트하고 공격적인 이미지는 당신의 행동을 더 믿을 수 있게 만들 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 좋은 테스트란 무엇인가?</title>
      <link>https://philipjkim.github.io/posts/20250724-testing-on-the-toilet-what-makes-a-good-test/</link>
      <pubDate>Thu, 24 Jul 2025 10:02:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250724-testing-on-the-toilet-what-makes-a-good-test/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2014/03/testing-on-toilet-what-makes-good-test.html&#34;&gt;https://testing.googleblog.com/2014/03/testing-on-toilet-what-makes-good-test.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;단위 테스트는 코드의 정확성을 확인하는 중요한 도구입니다. 그러나 &lt;strong&gt;좋은 테스트를 작성하는 것은 단순히 정확성을 확인하는 것 이상입니다.&lt;/strong&gt; 좋은 단위 테스트는 읽기 쉽고 유지 보수 가능하도록 여러 다른 속성을 보여야 합니다.&lt;/p&gt;&#xA;&lt;p&gt;좋은 테스트의 한 가지 속성은 명확성입니다. &lt;strong&gt;명확성이란 테스트가 사람들에게 읽기 쉬운 문서 역할을 해야 하며, 테스트 중인 코드를 해당 public API 측면에서 설명해야 함을 의미합니다.&lt;/strong&gt; 테스트는 구현 세부 사항을 직접 참조해서는 안 됩니다. 클래스의 테스트 이름은 클래스가 하는 모든 것을 말해야 하며, 테스트 자체는 클래스 사용 방법에 대한 예시가 되어야 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 원하는 기술을 갖춘 사람을 고용하라</title>
      <link>https://philipjkim.github.io/posts/20250723-hire-for-the-skills-you-want/</link>
      <pubDate>Wed, 23 Jul 2025 07:42:17 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250723-hire-for-the-skills-you-want/</guid>
      <description>&lt;p&gt;원문: Pragmatic Programmers Newsletter (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;제인은 12번째 면접에 나타난다. 면접관은 그녀에게 마커를 건네고 화이트보드를 가리킨다. &amp;ldquo;연결되고 가중치가 있으며 무방향 그래프의 최소 신장 트리의 가중치를 계산하는 코드를 작성해 보세요.&amp;rdquo; 제인은 한숨을 쉬었다. 이달 들어 벌써 세 번째였다. 그녀는 작업을 시작했다.&lt;/p&gt;&#xA;&lt;p&gt;내 생각에, 그녀는 아무리 답변 연습을 했더라도 그 직업을 가져서는 안 된다.&lt;/p&gt;&#xA;&lt;p&gt;나에게 좋은 지원자라면 펜을 내려놓고 이렇게 물었을 것이다. &amp;ldquo;이것에 대한 맥락을 알려주시겠어요? 왜냐하면 프로그래머가 이런 종류의 문제를 처리하기 위해 AI(또는 라이브러리)를 사용하기를 원하실 테니까요. 저는 귀사의 AI가 할 수 없는 일을 할 수 있게 해주는 직업을 찾고 있었습니다.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 40대에는 다음을 깨달을 만큼 현명해져야 합니다</title>
      <link>https://philipjkim.github.io/posts/20250723-by-age-40-you-should-be-smart-enough-to-realize-these/</link>
      <pubDate>Wed, 23 Jul 2025 07:29:58 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250723-by-age-40-you-should-be-smart-enough-to-realize-these/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.quora.com/profile/Waleed-666/BY-AGE-40-YOU-SHOULD-BE-SMART-ENOUGH-TO-REALIZE-THIS-1-Someone-makes-10x-more-than-you-do-in-a-9-5-job-because-they-h&#34;&gt;https://www.quora.com/profile/Waleed-666/BY-AGE-40-YOU-SHOULD-BE-SMART-ENOUGH-TO-REALIZE-THIS-1-Someone-makes-10x-more-than-you-do-in-a-9-5-job-because-they-h&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;어떤 사람은 9-5시 직업에서 당신보다 10배 더 많이 버는데, 이는 그들의 업무에 더 많은 &amp;ldquo;레버리지&amp;quot;가 있기 때문입니다.&lt;/li&gt;&#xA;&lt;li&gt;산만함은 성공의 가장 큰 적입니다. 그것은 당신의 두뇌를 위축시키고 파괴합니다.&lt;/li&gt;&#xA;&lt;li&gt;당신이 되고 싶은 위치에 있지 않은 사람에게서 조언을 구해서는 안 됩니다.&lt;/li&gt;&#xA;&lt;li&gt;아무도 당신의 문제를 해결해주러 오지 않습니다. 당신의 삶은 100% 당신의 책임입니다.&lt;/li&gt;&#xA;&lt;li&gt;100권의 자기계발서가 필요한 것이 아니라, 필요한 것은 오직 행동과 자기 훈련입니다.&lt;/li&gt;&#xA;&lt;li&gt;특정 기술(예: 의사, 엔지니어, 변호사)을 배우기 위해 대학에 가지 않았다면, 다음 90일 안에 영업을 배우는 것만으로도 더 많은 돈을 벌 수 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;아무도 당신에게 신경 쓰지 않습니다. 그러니 부끄러워하지 말고 나가서 당신의 기회를 만드세요.&lt;/li&gt;&#xA;&lt;li&gt;당신보다 똑똑한 사람을 찾으면 경쟁하지 말고 그들과 함께 일하세요.&lt;/li&gt;&#xA;&lt;li&gt;흡연은 당신의 삶에 아무런 이점이 없습니다. 이 습관은 당신의 사고를 느리게 하고 집중력을 저하시킬 뿐입니다.&lt;/li&gt;&#xA;&lt;li&gt;편안함은 최악의 중독이자 우울증으로 가는 값싼 티켓입니다.&lt;/li&gt;&#xA;&lt;li&gt;사람들이 알아야 할 것 이상을 말하지 말고, 당신의 사생활을 존중하십시오.&lt;/li&gt;&#xA;&lt;li&gt;술은 어떤 대가를 치르더라도 피하십시오. 이성을 잃고 바보처럼 행동하는 것보다 더 나쁜 것은 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;당신의 기준을 높게 유지하고 단지 가능하다고 해서 어떤 것에 만족하지 마십시오.&lt;/li&gt;&#xA;&lt;li&gt;당신이 만드는 가족이 당신이 태어난 가족보다 더 중요합니다.&lt;/li&gt;&#xA;&lt;li&gt;99.99%의 정신적 문제로부터 자신을 구하기 위해 어떤 것도 개인적으로 받아들이지 않도록 훈련하십시오.&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>TotT: 구현이 아닌 동작을 테스트하세요</title>
      <link>https://philipjkim.github.io/posts/20250722-tott-test-behavior-not-implementation/</link>
      <pubDate>Tue, 22 Jul 2025 16:50:17 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250722-tott-test-behavior-not-implementation/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html&#34;&gt;https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;여러분의 신뢰할 수 있는 Calculator 클래스는 많은 행복한 사용자를 보유한 가장 인기 있는 오픈소스 프로젝트 중 하나입니다:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Calculator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한 제대로 작동하는지 확인하는 &lt;strong&gt;테스트&lt;/strong&gt;도 있습니다:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calculator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calculator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calculator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 새로운 멋진 라이브러리는 덧셈 연산자 대신 사용하면 코드에서 몇 배의 속도 향상을 약속합니다. 여러분은 이 라이브러리를 사용하기 위해 들뜬 마음으로 &lt;strong&gt;코드를 변경합니다&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 상태 테스트 vs. 상호작용 테스트</title>
      <link>https://philipjkim.github.io/posts/20250722-tott-testing-state-vs-testing-interactions/</link>
      <pubDate>Tue, 22 Jul 2025 13:11:07 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250722-tott-testing-state-vs-testing-interactions/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2013/03/testing-on-toilet-testing-state-vs.html&#34;&gt;https://testing.googleblog.com/2013/03/testing-on-toilet-testing-state-vs.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;단위 테스트가 테스트 중인 코드가 제대로 작동하는지 확인하는 방법은 일반적으로 두 가지가 있습니다: 상태 테스트 또는 상호작용 테스트. 이들의 차이점은 무엇일까요?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;상태 테스트는 테스트 중인 코드가 올바른 결과를 반환하는지 확인하는 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testSortNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NumberSorter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numberSorter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NumberSorter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quicksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bubbleSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 반환된 목록이 정렬되었는지 확인합니다. 어떤 정렬 알고리즘이 사용되었는지는 중요하지 않으며,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 올바른 결과가 반환되기만 하면 됩니다.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numberSorter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sortNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;상호작용 테스트는 테스트 중인 코드가 특정 메서드를 올바르게 호출하는지 확인하는 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: GUI 테스팅의 MVP 되기</title>
      <link>https://philipjkim.github.io/posts/20250722-tott-be-an-mvp-of-gui-testing/</link>
      <pubDate>Tue, 22 Jul 2025 10:49:31 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250722-tott-be-an-mvp-of-gui-testing/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2009/02/with-all-sport-drug-scandals-of-late.html&#34;&gt;https://testing.googleblog.com/2009/02/with-all-sport-drug-scandals-of-late.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;최근의 모든 스포츠 약물 스캔들로 인해 요즘 좋은 롤 모델을 찾기가 어렵습니다. 하지만 롤 모델이 도메인 모델(비즈니스 엔티티의 객체 모델)이라면 MVP가 되기 위해 속임수를 쓸 필요가 없습니다. Model-View-Presenter를 사용하세요!&lt;/p&gt;&#xA;&lt;p&gt;MVP는 MVC(Model-View-Controller)와 매우 유사합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;MVC에서는 아래 다이어그램과 같이 프레젠테이션 로직이 Controller와 View에 의해 공유됩니다.&lt;/strong&gt; View는 일반적으로 가시적인 GUI 프레임워크 구성 요소에서 직접 파생되며, 모델을 관찰하고 사용자에게 시각적으로 보여줍니다. Controller는 사용자 이벤트를 모델 변경으로 변환하는 방법을 결정하는 역할을 합니다. &lt;strong&gt;MVP에서는 프레젠테이션 로직이 Presenter라고도 알려진 Supervising Controller에 의해 전적으로 처리됩니다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 벳 사이즈 전략: 완벽한 벳 사이즈를 선택하는 데 도움이 되는 8가지 규칙</title>
      <link>https://philipjkim.github.io/posts/20250721-bet-size-strategy-tips-rules/</link>
      <pubDate>Mon, 21 Jul 2025 18:39:00 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250721-bet-size-strategy-tips-rules/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://upswingpoker.com/bet-size-strategy-tips-rules/&#34;&gt;https://upswingpoker.com/bet-size-strategy-tips-rules/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;노 리밋 홀덤에서 최고의 베팅 크기를 선택하는 것은 까다로운 작업입니다.&lt;/p&gt;&#xA;&lt;p&gt;모든 상황에서 사용할 수 있는 하나의 &amp;lsquo;완벽한&amp;rsquo; 베팅 크기는 없습니다. 최적의 베팅 크기는 다음과 같은 여러 요인에 따라 달라집니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;프리플랍 액션&lt;/li&gt;&#xA;&lt;li&gt;보드 텍스처&lt;/li&gt;&#xA;&lt;li&gt;스택 깊이&lt;/li&gt;&#xA;&lt;li&gt;누가 레인지 이점(range advantage)을 가지고 있는지&lt;/li&gt;&#xA;&lt;li&gt;…그리고 더 많은 것들!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;이 기사에서는 33% 팟 크기 베팅이든 엄청난 오버벳이든 어떤 상황에서도 승리하는 크기를 선택하는 데 도움이 되는 8가지 일반적인 규칙을 배우게 됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 오마하 최고의 시작 핸드: 빠른 가이드</title>
      <link>https://philipjkim.github.io/posts/20250721-omaha-best-starting-hands-a-quick-guide/</link>
      <pubDate>Mon, 21 Jul 2025 15:48:42 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250721-omaha-best-starting-hands-a-quick-guide/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://deepsolver.com/blog/omaha-best-starting-hands-a-quick-guide&#34;&gt;https://deepsolver.com/blog/omaha-best-starting-hands-a-quick-guide&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;노 리밋 홀덤의 경우, 가능한 최고의 시작 핸드를 정확히 찾아내는 것은 매우 쉽습니다: AA, KK, QQ, JJ, TT, 99 그리고 AK-AJ. 핸드 매트릭스에서 모든 가능한 조합을 시각화하는 것도 매우 쉽습니다. 하지만 &lt;a href=&#34;https://deepsolver.com/blog/meet-pot-limit-omaha-the-coolest-game-out-there&#34;&gt;팟 리밋 오마하&lt;/a&gt;에 대해 이야기할 때는 상황이 조금 달라집니다.&lt;/p&gt;&#xA;&lt;p&gt;결국, 홀 카드 수가 두 배로 늘어나 프리플랍에서 270,000가지 이상의 고유한 핸드 조합이 생성됩니다 (텍사스 홀덤에서는 1326가지에 불과합니다)!&lt;/p&gt;&#xA;&lt;p&gt;오마하 포커 경험이 있더라도 이렇게 엄청난 숫자를 이해하기는 쉽지 않습니다. 걱정 마세요. 저희가 최고의 오마하 시작 핸드와 특정 조합이 돋보이는 이유를 알려드리겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: GTO 위자드: 로우 스테이크 플레이어들이 저지르는 3가지 실수</title>
      <link>https://philipjkim.github.io/posts/20250721-gto-wizard-3-mistakes-low-stakes-players-make/</link>
      <pubDate>Mon, 21 Jul 2025 13:19:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250721-gto-wizard-3-mistakes-low-stakes-players-make/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/strategy/gto-wizard-low-stakes-mistakes-47867.htm&#34;&gt;https://www.pokernews.com/strategy/gto-wizard-low-stakes-mistakes-47867.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;많은 초보 플레이어들은 물론, 때로는 숙련된 포커 플레이어들도 본전치기 이상의 결과를 내거나 소액만 따는 데 어려움을 겪을 것입니다.&lt;/p&gt;&#xA;&lt;p&gt;이런 일이 발생하는 이유나 원인은 항상 있습니다. 단기적으로는 단순히 운이 나빠서 최근 카드 분배가 잘 안 되고 있을 수도 있습니다. 하지만 실망스러운 결과가 오랫동안 지속되었다면, 이 글에 나열된 세 가지 실수 중 하나를 저지르고 있을 가능성이 높으며, 저희는 오류를 수정하는 방법에 대한 조언을 드릴 것입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;실수-1-드라이-보드에서-슬로우-플레이하기&#34;&gt;실수 #1: 드라이 보드&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;에서 슬로우 플레이&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;하기&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s.pnimg.net/sJk7K0OfF4s2t_3WkP8coAMCfLXfqUKG3IEadctIO8I/pr:article-body-2x/aHR0cHM6Ly9wbmlt/Zy5uZXQvdy9hcnRp/Y2xlcy1hdHRhY2ht/ZW50cy8wLzY3Yy83/NGJjM2MyM2M2LnBu/Zw.webp&#34; alt=&#34;mistake_1&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 자전거를 탈 때의 손목 통증</title>
      <link>https://philipjkim.github.io/posts/20250721-hand-and-wrist-pain-on-the-bike/</link>
      <pubDate>Mon, 21 Jul 2025 10:21:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250721-hand-and-wrist-pain-on-the-bike/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.britishcycling.org.uk/knowledge/training/health-recovery/article/izn20140820-Physiotherapy-Ask-the-Experts--Hand-and-wrist-pain-on-the-bike-0&#34;&gt;https://www.britishcycling.org.uk/knowledge/training/health-recovery/article/izn20140820-Physiotherapy-Ask-the-Experts--Hand-and-wrist-pain-on-the-bike-0&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;자전거를 탈 때의 &lt;a href=&#34;https://www.britishcycling.org.uk/knowledge/article/izn20140123-All-Cycling-Are-you-sitting-comfortably--0&#34;&gt;안장 통증&lt;/a&gt; 및 &lt;a href=&#34;https://www.britishcycling.org.uk/knowledge/article/izn20141104-Physiotherapy-Foot-Pain-on-the-Bike-0&#34;&gt;발 통증&lt;/a&gt;과 같은 미묘한 문제를 다루었으므로 이제 손과 손목으로 주의를 돌리겠습니다. 많은 자전거 타는 사람들이 손이나 손목에 통증이나 무감각을 겪으며, 이는 라이딩의 즐거움과 잠재적으로는 성능에도 영향을 미칩니다. 이 글에서는 잠재적인 원인과 불편함을 예방하고 완화하기 위해 할 수 있는 일에 대해 살펴보겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;손과 손목에 불편함, 통증, 따끔거림 또는 무감각을 유발할 수 있는 두 가지 주요 질환이 있습니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;핸들바-마비&#34;&gt;핸들바 마비&lt;/h3&gt;&#xA;&lt;p&gt;의학적으로 척골 신경 병증이라고도 불리지만 핸들바 마비로도 알려진 자전거 타는 사람들에게 비교적 흔한 증상입니다. 이는 약지와 새끼손가락에 신경을 공급하는 척골 신경의 압박으로 인해 발생하며, 손가락에 따끔거림, 무감각 또는 통증, 또는 손에 약화로 나타납니다. 압박 외에도 신경의 과신전도 유사한 증상을 유발할 수 있으며, 이는 드롭을 잡고 장시간 라이딩할 때 발생할 수 있습니다. 이러한 증상이 나타나면 즉시 조치를 취해야 합니다. 해결하기가 매우 어렵기 때문입니다. 전문적인 의학적 조언을 구하고 아래에 설명된 예방 조치를 적용하십시오.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 인터페이스 테스트하기</title>
      <link>https://philipjkim.github.io/posts/20250721-tott-testing-against-interfaces/</link>
      <pubDate>Mon, 21 Jul 2025 10:01:35 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250721-tott-testing-against-interfaces/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/07/tott-testing-against-interfaces.html&#34;&gt;https://testing.googleblog.com/2008/07/tott-testing-against-interfaces.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;부족함에 대한 지속적인 느낌을 억누르기 위해, 당신은 공학 분야의 진정한 통과 의례인 자신만의 행성 파괴 광선총을 만드는 데 시간을 들였습니다. 축하합니다. 그리고 당신은 매우 자랑스러워했지만, 그 다음 주말에 이워크&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 해설이 포함된 한정판 스타워즈 3부작을 구매하여 데스스타&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;가 알데라안&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;을 파괴하는 것을 보고 잘못된 결정을 내렸다는 것을 깨달았습니다. 당신의 행성 파괴 광선총은 파란색 레이저를 가지고 있지만, 녹색 레이저가 훨씬 더 멋있어 보입니다. 하지만 라디오셱&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;에 가서 기존의 파괴 광선총에 끼울 수 있는 녹색 레이저를 사는 것은 간단한 문제가 아닙니다. 녹색 레이저를 가지려면 처음부터 다른 행성 파괴 광선총을 만들어야 할 것입니다. 두 개의 파괴 광선총을 소유하는 것이 하나보다 이웃들의 질투심을 더 자극할 것이므로 당신에게는 괜찮습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>인물 소개: 필 아이비(Phil Ivey), 살아있는 전설</title>
      <link>https://philipjkim.github.io/posts/20250718-about-phil-ivey/</link>
      <pubDate>Fri, 18 Jul 2025 09:23:52 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250718-about-phil-ivey/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.tightpoker.com/app/uploads/2023/05/Screenshot-2023-04-13-at-17.37.02-874x492-1.jpg&#34; alt=&#34;phil_ivey_1&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;당신은 당신의 방식대로 칩을 따세요, 나는 내 방식대로 딸 테니까요.&amp;rdquo; (You get your chips your way, I’ll get my chips mine.)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;통계로-증명되는-그의-위대함&#34;&gt;통계로 증명되는 그의 위대함&lt;/h2&gt;&#xA;&lt;p&gt;필 아이비가 &amp;lsquo;포커계의 타이거 우즈&amp;rsquo;로 불리며 역사상 가장 위대한 포커 플레이어(GOAT, Greatest Of All Time) 중 한 명으로 꼽히는 이유는 그의 통산 기록, 즉 숫자가 가장 강력하게 증명합니다. 그의 커리어는 단순한 상금 액수를 넘어, 꾸준함, 다재다능함, 그리고 라이브와 온라인을 가리지 않는 압도적인 지배력으로 요약됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: &#34;Static Cling&#34; 퇴치하기</title>
      <link>https://philipjkim.github.io/posts/20250717-tott-defeat-static-cling/</link>
      <pubDate>Thu, 17 Jul 2025 17:03:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250717-tott-defeat-static-cling/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/06/defeat-static-cling.html&#34;&gt;https://testing.googleblog.com/2008/06/defeat-static-cling.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;당신은 페어 프로그래밍을 하고 있고, 많은 뛰어난 사람들이 그렇듯이 소리 내어 말하고 있습니다. &amp;ldquo;목을 만들고, 주입하고, 테스트를 다시 실행할 거야. 통과해야 하는데&amp;hellip; 젠장!&amp;rdquo; 당신의 파트너는 예외 &lt;code&gt;&amp;quot;ConnectionFactory not initialized&amp;quot;&lt;/code&gt;를 발견합니다. &amp;ldquo;뭐?&amp;rdquo; 그녀는 말합니다. &amp;ldquo;뭔가가 데이터베이스를 사용하고 있어? 젠장, 이건 작은 테스트여야 했는데.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;검사해보니 당신의 클래스가 다른 클래스의 정적 메서드를 호출하고 있다는 것을 발견했습니다. Static Cling&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이 발생한 것입니다! 만약 정적 메서드에 의존하는 코드를 생성하는 데이터 지속성 레이어를 (잘못) 사용하고, &lt;em&gt;주의를 기울이지 않았다면&lt;/em&gt;, 당신의 코드는 다음과 같을 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 당신이 꼭 알아야 할 필수 포커 통계지표</title>
      <link>https://philipjkim.github.io/posts/20250718-essential-poker-statistics-you-need-to-know/</link>
      <pubDate>Thu, 17 Jul 2025 13:13:39 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250718-essential-poker-statistics-you-need-to-know/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://pokercopilot.com/essential-poker-statistics&#34;&gt;https://pokercopilot.com/essential-poker-statistics&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;가장-중요한-포커-통계지표는-무엇인가요&#34;&gt;가장 중요한 포커 통계지표는 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;저희 (pokercopilot.com) 포커 HUD 소프트웨어는 많은 통계를 제공합니다. 어떤 통계가 관련성이 있고 중요한지 아는 것은 당신에게 큰 힘이 됩니다. 포커 소프트웨어를 처음 사용하는 경우 필수적인 세 가지 포커 통계를 제외한 모든 통계를 처음에는 무시할 수 있습니다. 기본 통계를 사용하는 방법을 이해하면 플레이 스타일과 선택한 테이블 크기에 따라 더 많은 통계를 추가할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;세 가지 주요 포커 통계(및 한 가지 보너스 통계):&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: King&#39;s Bounty 전략</title>
      <link>https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/</link>
      <pubDate>Thu, 17 Jul 2025 10:49:03 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://gamefaqs.gamespot.com/pc/577442-kings-bounty/faqs/7416&#34;&gt;https://gamefaqs.gamespot.com/pc/577442-kings-bounty/faqs/7416&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;이미지 출처: &lt;a href=&#34;https://shot97retro.blogspot.com/2018/06/kings-bounty-in-depth-written-amiga.html&#34;&gt;https://shot97retro.blogspot.com/2018/06/kings-bounty-in-depth-written-amiga.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;King&amp;rsquo;s Bounty 전략, (C) Chris Jones 2000&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;이름&lt;/th&gt;&#xA;          &lt;th&gt;KINGS BOUNTY&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;제작사&lt;/td&gt;&#xA;          &lt;td&gt;ELECTRONIC ARTS/NEW WORLD COMPUTING&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;장르&lt;/td&gt;&#xA;          &lt;td&gt;STRATEGY/RPG&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;연도&lt;/td&gt;&#xA;          &lt;td&gt;1990&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;난이도&lt;/td&gt;&#xA;          &lt;td&gt;EASY / NORMAL / HARD/ IMPOSSIBLE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;플랫폼&lt;/td&gt;&#xA;          &lt;td&gt;SEGA MEGADRIVE(GENESIS) / PC DOS&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;1&lt;/th&gt;&#xA;          &lt;th&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#1-%ea%b8%b0%ec%b4%88&#34;&gt;기초&lt;/a&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#2-%ec%a2%85%ec%a1%b1&#34;&gt;종족&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#3-%ec%9c%a0%eb%ac%bc&#34;&gt;유물&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#4-%ec%95%85%eb%8b%b9&#34;&gt;악당&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#5-%ec%9d%bc%eb%b0%98-%ec%a0%84%ec%88%a0&#34;&gt;일반 전술&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/98GHma4.jpg&#34; alt=&#34;title&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-기초&#34;&gt;1: 기초&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;시작:&lt;/strong&gt;&#xA;게임을 시작할 때, 성 안의 모든 유닛은 잊고 캐릭터가 보호를 위해 얻을 수 있는 최대량의 파이크맨(Pikemen)만 생각하세요. 가장 가까운 마을로 가서 보트를 빌리세요. 이 보트를 타고 현재 대륙의 가장자리를 따라 이동하며 발견하는 모든 금을 농민들에게 주어 리더십으로 전환하세요. 가능한 한 빨리 다음 대륙으로 이동하려고 노력하세요.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 직원들을 아기 다루듯 (babysitting) 대하지 마세요: 효과적인 리더십을 위한 가이드</title>
      <link>https://philipjkim.github.io/posts/20250717-stop-babysitting-your-employees-a-guide-to-effective-leadership/</link>
      <pubDate>Thu, 17 Jul 2025 10:21:58 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250717-stop-babysitting-your-employees-a-guide-to-effective-leadership/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.linkedin.com/pulse/stop-babysitting-your-employees-guide-effective-leadership-hakes-1ddpc/&#34;&gt;https://www.linkedin.com/pulse/stop-babysitting-your-employees-guide-effective-leadership-hakes-1ddpc/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;직원들을 실제로 이끄는 것보다 보모처럼 돌보는 데 더 많은 시간을 보낸다고 느껴본 적이 있나요? 마치 하루에 세 번씩 모든 작업 현장에 끊임없이 나타나지 않고, 모든 작은 세부 사항에 대한 프로세스를 만들지 않고, 직접 문제 해결에 뛰어들지 않으면 모든 것이 무너질 것 같은 느낌이 드나요? 네, 저도 그런 경험이 있습니다. 그것은 지치고, 좌절감을 주며, 솔직히 성공적인 사업을 구축하는 방식이 아닙니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/SucD5ko9AxI?si=cnPjs37gfPnizdj-&#34;&gt;새로운 쇼인 토랜도 온 비즈니스의 첫 번째 에피소드&lt;/a&gt;에서 저는 리더십 코치 &lt;a href=&#34;https://www.linkedin.com/in/brittanydrozd/&#34;&gt;브리트니 드로즈&lt;/a&gt;와 함께 이 너무나 흔한 문제를 분석하기 위해 앉았습니다. 그리고 솔직히 말씀드리자면, 우리는 정말 귀중한 것을 발견했습니다. 요점은 다음과 같습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 판타지 농구 작동 방식: 최고의 전략 가이드 및 팁 2025</title>
      <link>https://philipjkim.github.io/posts/20250716-how-does-fantasy-basketball-work/</link>
      <pubDate>Wed, 16 Jul 2025 13:41:01 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-how-does-fantasy-basketball-work/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.rotowire.com/basketball/advice/&#34;&gt;https://www.rotowire.com/basketball/advice/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;판타지-농구-플레이-방법&#34;&gt;판타지 농구 플레이 방법&lt;/h2&gt;&#xA;&lt;p&gt;판타지 스포츠를 처음 접하는 분이든, 새로운 도전을 찾는 노련한 판타지 풋볼 선수이든, 이 가이드는 판타지 농구에 접근하는 방법에 대해 알려드리는 것을 목표로 합니다. 성공을 위한 전략과 RotoWire가 판타지 리그 및 콘테스트에서 승리하는 데 어떻게 도움이 되는지 알아보려면 계속 읽으십시오.&lt;/p&gt;&#xA;&lt;p&gt;판타지 농구는 다른 판타지 스포츠와 동일한 기본 원리로 작동합니다. 게임은 각 리그의 선수로 팀을 구성하고 실제 경기력을 기반으로 포인트를 획득하는 것을 기반으로 합니다. 획득한 포인트는 당일, 주, 또는 시즌의 승패를 결정합니다. 판타지 농구는 일반적으로 다른 판타지 게임보다 정규 형식에서 드래프트되는 선수가 적기 때문에 다른 판타지 스포츠보다 쉽게 시작할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>게임 소개: 추억의 명작, 제3차 슈퍼로봇대전</title>
      <link>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</link>
      <pubDate>Wed, 16 Jul 2025 11:08:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/srw3.jpg&#34; alt=&#34;srw3_poster&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;서문-우리들의-청춘을-불태웠던-강철의-거인들&#34;&gt;서문: 우리들의 청춘을 불태웠던 강철의 거인들&lt;/h3&gt;&#xA;&lt;p&gt;1993년, 슈퍼 패미컴(SFC)의 황금기. 수많은 게임들 속에서도 유독 소년들의 가슴을 뜨겁게 달구었던 이름이 있습니다. 바로 &lt;strong&gt;&amp;lsquo;제3차 슈퍼로봇대전&amp;rsquo;&lt;/strong&gt; (alias: 슈로대3, SRW3) 입니다.&lt;/p&gt;&#xA;&lt;p&gt;단순한 크로스오버를 넘어, &amp;lsquo;DC전쟁&amp;rsquo; 이후의 독자적인 오리지널 스토리를 본격적으로 펼쳐 보이며 &amp;lsquo;슈퍼로봇대전&amp;rsquo; 시리즈의 정체성을 확립한 기념비적인 작품. 건담과 마징가, 겟타로보가 나란히 서서 미지의 적과 싸운다는 꿈같은 상상을 현실로 만들어준 게임. 누군가에게는 밤새워 공략집을 뒤적이며 숨겨진 유닛을 얻었던 추억으로, 또 다른 누군가에게는 친구와 분기점에 대해 열띤 토론을 벌였던 기억으로 남아있을 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 의지할 수 있는 친구들</title>
      <link>https://philipjkim.github.io/posts/20250716-tott-friends-you-can-depend-on/</link>
      <pubDate>Wed, 16 Jul 2025 10:47:04 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-tott-friends-you-can-depend-on/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/06/tott-friends-you-can-depend-on.html&#34;&gt;https://testing.googleblog.com/2008/06/tott-friends-you-can-depend-on.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;테스트 환경에서 사용하기 너무 어렵거나 느린 것에 의존하는 코드를 테스트하고 싶을 때는, 의존성 대신 테스트 더블을 사용하세요.&#xA;더미(Dummy)는 API를 만족시키기 위해 가짜 입력 값을 전달합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITEM_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITEM_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;스텁(Stub)&lt;/strong&gt; 은 실제 객체를 오버라이드하고 하드코딩된 값을 반환합니다. 스텁만을 사용한 테스트는 상태 기반 테스트입니다. 시스템을 실행한 다음 시스템이 예상된 상태인지 확인합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ItemPricer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pricer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ItemPricer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigDecimal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getPrice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRICE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pricer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dummyItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRICE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITEM_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;목(Mock)&lt;/strong&gt; 은 값을 반환할 수 있지만, 메서드가 호출되는 방식에도 신경을 씁니다. (&amp;ldquo;엄격한 목(strict mocks)&amp;rdquo; 은 메서드 호출 순서에 신경을 쓰는 반면, &amp;ldquo;유연한 목(lenient mocks)&amp;rdquo; 은 그렇지 않습니다.) 목을 사용한 테스트는 상호작용 기반 테스트입니다. 목에 기대값을 설정하고, 목은 실행될 때 기대값을 검증합니다. 이 예시는 JMock을 사용하여 목을 생성합니다(EasyMock, Mockito 도 유사합니다):&lt;/p&gt;</description>
    </item>
    <item>
      <title>은하영웅전설, 두 영웅의 리더십 비교: 라인하르트 vs 양 웬리</title>
      <link>https://philipjkim.github.io/posts/20250716-legend-of-the-galactic-heroes-reinhard-vs-yang/</link>
      <pubDate>Wed, 16 Jul 2025 10:26:02 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-legend-of-the-galactic-heroes-reinhard-vs-yang/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/lotgh.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;소설 &amp;lsquo;은하영웅전설&amp;rsquo;의 두 주인공, 은하제국의 &lt;strong&gt;&amp;lsquo;상승의 천재&amp;rsquo;&lt;/strong&gt; 라인하르트 폰 로엔그람과 자유행성동맹의 &lt;strong&gt;&amp;lsquo;불패의 마술사&amp;rsquo;&lt;/strong&gt; 양 웬리는 시대를 대표하는 위대한 전략가이자 리더이지만, 그들의 리더십 스타일은 극명한 대조를 이룹니다. 두 영웅의 리더십을 장점과 단점으로 나누어 비교하면 다음과 같습니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;라인하르트-폰-로엔그람-reinhard-von-lohengramm---카리스마적-전제군주형-리더&#34;&gt;&lt;strong&gt;라인하르트 폰 로엔그람 (Reinhard von Lohengramm) - 카리스마적 전제군주형 리더&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&amp;ldquo;우주를 손에 넣겠다&amp;quot;는 개인의 야망을 원동력으로 삼아, 압도적인 카리스마와 천재적인 능력으로 부하들을 이끌고 낡은 체제를 무너뜨리는 혁명가입니다.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;구분&lt;/th&gt;&#xA;          &lt;th&gt;상세 설명&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;1. 압도적인 카리스마와 비전 제시&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;명확하고 거대한 목표(우주 통일, 골덴바움 왕조 타도)를 제시하고, 스스로가 그 선두에 서서 불가능을 가능으로 만드는 모습을 통해 부하들에게 절대적인 충성심과 열광적인 지지를 이끌어 냅니다. 그의 존재 자체가 조직의 구심점이자 원동력입니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;2. 신속하고 과감한 의사결정&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;모든 권한이 자신에게 집중되어 있어, 복잡한 보고나 합의 과정 없이 위기 상황에서 빠르고 대담한 결정을 내릴 수 있습니다. 이는 급변하는 전장에서 결정적인 승기를 잡는 데 유리하게 작용합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;3. 능력 위주의 파격적인 인재 등용&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;낡은 문벌 귀족 사회를 혐오하여 신분이나 배경에 상관없이 오직 &amp;lsquo;능력&amp;rsquo;만으로 인재를 발탁하고 적재적소에 배치합니다. 이는 조직에 새로운 활력을 불어넣고 건강한 경쟁을 유도하여 최상의 효율을 이끌어냅니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;4. 청렴하고 공명정대한 신상필벌&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;스스로 사치를 멀리하고, 부패와 무능을 가장 큰 죄악으로 여겨 엄격하게 처벌합니다. 공을 세운 자에게는 그에 합당한 파격적인 보상을 내림으로써 부하들의 동기를 극대화합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;1. 시스템보다 개인에 의존하는 한계&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;조직의 모든 것이 &amp;lsquo;라인하르트&amp;rsquo;라는 개인의 역량과 카리스마에 의존합니다. 그의 부재는 곧 시스템 전체의 붕괴로 이어질 수 있다는 치명적인 구조적 약점을 가집니다. 후계자나 시스템 구축에 대한 고민이 부족했습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;2. 독단적 결정과 소통 부재&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;자신과 대등한 위치에서 의견을 나눌 상대를 인정하지 않으며, 중요한 결정을 소수의 측근과 독단적으로 내리는 경향이 있습니다. 이는 유능한 부하들의 의견이 묵살되거나, 잘못된 판단을 내렸을 때 견제할 장치가 없다는 위험을 내포합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;3. 감정적인 취약성과 인간관계의 미숙함&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;유일한 안식처였던 누나 안네로제나 친구 키르히아이스와 관련된 일에는 이성적인 판단력이 흔들리는 모습을 보입니다. 이는 리더로서의 안정성을 저해하는 요소이며, 그의 가장 큰 약점이었습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;4. 비판과 반대를 용납하지 않는 경직성&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;자신에 대한 반대 의견이나 비판을 &amp;lsquo;반역&amp;rsquo;이나 &amp;lsquo;도전&amp;rsquo;으로 받아들이는 경향이 있습니다. 이는 조직 내 건전한 비판 문화를 위축시키고, 리더가 잘못된 길로 들어섰을 때 누구도 제지할 수 없게 만듭니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;양-웬리-yang-wen-li---민주적-합리주의자형-리더&#34;&gt;&lt;strong&gt;양 웬리 (Yang Wen-li) - 민주적 합리주의자형 리더&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&amp;ldquo;최선의 독재보다 최악의 민주주의가 낫다&amp;quot;는 신념을 바탕으로, 개인의 자유와 인권을 존중하며, 토론과 합의를 통해 합리적인 결론을 도출해내는 지휘관입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 포커 불리(bully)를 물리치려면 이 한 가지 비밀만 알면 됩니다</title>
      <link>https://philipjkim.github.io/posts/20250715-to-defeat-a-poker-bully-you-only-need-to-know-this-one-secret/</link>
      <pubDate>Tue, 15 Jul 2025 20:28:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-to-defeat-a-poker-bully-you-only-need-to-know-this-one-secret/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/strategy/to-defeat-a-poker-bully-you-only-need-to-know-this-one-secre-19523.htm&#34;&gt;https://www.pokernews.com/strategy/to-defeat-a-poker-bully-you-only-need-to-know-this-one-secre-19523.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;불리는 포커 플레이어 중 흔한 유형입니다. 테이블에 너무 오래 앉아있으면 반드시 한 명쯤은 마주치게 됩니다. 그들은 무모하게 베팅하고 레이즈합니다. 그들과 맞서 플레이하는 것은 마치 날뛰는 야생마를 타는 것처럼 무서울 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;포커 불리와 맞서 싸우는 세 가지 일반적인 전략에 대해 이야기해 봅시다. 두 가지는 틀렸고, 한 가지는 옳습니다.&lt;/p&gt;&#xA;&lt;p&gt;한 가지 유혹은 불리에게 더 심한 불리짓을 하려고 노력하는 것입니다. 그가 때리는 것보다 훨씬 더 세게 되받아치는 것입니다. 문제는 당신이 난폭하게 휘두르는 것에 불과하다는 것입니다. 마치 &amp;ldquo;크리스마스 이야기(A Christmas Story)&amp;ldquo;에서 랄피가 결국 이성을 잃고 불리 스컷 파커스&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;에게 미쳐 날뛰는 것과 같습니다. 효과가 있을 수도 있지만, 위험하고 비용이 많이 듭니다. 포커 상황에서는, 당신이 미지근한 패로 서로 불리가 되려고 할 때, 괴물같은 패로 당신 둘 다를 덫에 걸리게 하려고 기다리는 똑똑한 다른 플레이어들에게 쉽게 이용당할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 포커 배리언스 이해는 하향세에 대처하는 데 도움이 될 것입니다</title>
      <link>https://philipjkim.github.io/posts/20250715-understanding-poker-variance-will-help-you-cope-with-downswings/</link>
      <pubDate>Tue, 15 Jul 2025 19:57:28 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-understanding-poker-variance-will-help-you-cope-with-downswings/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.888poker.com/magazine/strategy/understanding-poker-variance-will-help-you-cope-downswings&#34;&gt;https://www.888poker.com/magazine/strategy/understanding-poker-variance-will-help-you-cope-downswings&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;질문을 하나 드리겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;7,000명이 참가하는 온라인 일요 토너먼트를 플레이한다고 가정해 봅시다. 참가자의 16%에게 상금이 지급됩니다. 이 메이저 대회에서 당신의 ROI는 50%입니다.&lt;/p&gt;&#xA;&lt;p&gt;이 토너먼트를 10년 동안 매주 일요일 플레이한다고 가정해 봅시다.&lt;/p&gt;&#xA;&lt;p&gt;10년 동안, 당신은 일요일을 한 번도 빠뜨리지 않습니다.&lt;/p&gt;&#xA;&lt;p&gt;결혼식에 가지 않고,&lt;/p&gt;&#xA;&lt;p&gt;라이브 토너먼트에 가지 않고,&lt;/p&gt;&#xA;&lt;p&gt;아무것도 하지 않습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;이 10년 동안 당신이 돈을 잃을 확률은 몇 퍼센트라고 생각하십니까?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;많은 사람들이 이 질문에 혼란스러워하는 것 같습니다. “ROI가 50%이고, 10년 동안 매주 일요일 플레이한다고요? 그렇다면 거의 항상 수익을 내야 하는 거 아닌가요?”&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 포커에서 넛(Nuts)이란 무엇인가? 의미 &#43; 전략 가이드</title>
      <link>https://philipjkim.github.io/posts/20250715-what-are-the-nuts-in-poker/</link>
      <pubDate>Tue, 15 Jul 2025 17:49:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-what-are-the-nuts-in-poker/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.888poker.com/magazine/poker-terms/nuts&#34;&gt;https://www.888poker.com/magazine/poker-terms/nuts&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;포커에서 넛이란 무엇일까요? 포커에서 &lt;em&gt;넛&lt;/em&gt;이란 핸드의 어떤 단계에서든 가능한 최고의 카드를 의미합니다. 리버에서 넛을 가진 플레이어는 핸드를 폴드하거나 잠들지 않는 한 핸드를 잃을 수 없습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;포켓 에이스&lt;/em&gt;는 플롭 전에 가장 강한 핸드이므로 종종 &amp;lsquo;&lt;em&gt;프리플롭 넛&lt;/em&gt;&amp;lsquo;라고 불립니다. 하지만 이 명칭은 넛이 5장의 카드를 필요로 하는 텍사스 홀덤 핸드의 자격을 갖추기 때문에 플롭 이후의 개념이므로 약간 오해의 소지가 있습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;포커에서-넛이란-무엇이며-어떤-핸드가-자격을-갖출까&#34;&gt;포커에서 넛이란 무엇이며 어떤 핸드가 자격을 갖출까?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;로열 플러시&lt;/em&gt;를 가지고 있다면 항상 포커 넛이 될 것입니다. 항상 로열 플러시를 만들 수 있는 것은 아니므로, 넛는 트리플처럼 약할 수도 있습니다. 예를 들어, 2♥️3♠️7♦️J♣️K♠️ 보드에서 당신이 KK를 가지고 있다면 넛이 될 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 싱글턴을 피하기 위한 의존성 주입 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250715-tott-using-dependency-injection-to-avoid-singletons/</link>
      <pubDate>Tue, 15 Jul 2025 14:06:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-tott-using-dependency-injection-to-avoid-singletons/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/05/tott-using-dependancy-injection-to.html&#34;&gt;https://testing.googleblog.com/2008/05/tott-using-dependancy-injection-to.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;싱글턴을 사용하는 코드를 테스트하기는 어렵습니다. 일반적으로 테스트하려는 코드는 싱글턴 인스턴스와 강력하게 결합되어 있습니다. 싱글턴 객체가 종종 정적 생성자나 정적 메서드에서 생성되기 때문에 싱글턴 객체의 생성을 제어할 수 없습니다. 결과적으로 싱글턴 인스턴스의 동작을 시뮬레이션할 수도 없습니다.&lt;/p&gt;&#xA;&lt;p&gt;싱글턴 클래스의 구현 변경이 불가능하지만, 싱글턴 클라이언트는 변경이 가능하다면 간단한 리팩터링으로 테스트를 더 쉽게 만들 수 있습니다. 싱글턴 인스턴스로 &lt;code&gt;Server&lt;/code&gt;를 사용하는 메서드가 있다고 가정해 봅시다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Client&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;retrieveData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;를 리팩터링하여 의존성 주입을 사용하고 싱글턴 패턴의 사용을 완전히 피할 수 있습니다. 어떤 기능도 잃지 않았고, &lt;code&gt;Server&lt;/code&gt;의 싱글턴 인스턴스만 존재해야 한다는 요구 사항도 잃지 않았습니다. 유일한 차이점은 &lt;code&gt;Server&lt;/code&gt; 인스턴스를 정적 &lt;code&gt;getInstance&lt;/code&gt; 메서드에서 가져오는 대신, &lt;code&gt;Client&lt;/code&gt;가 생성자에서 받는다는 것입니다. 클래스를 테스트하기 더 쉽게 만들었습니다!&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 판타지 야구 포인트 리그 전략: 야후의 기본 설정에 대해 알아야 할 모든 것</title>
      <link>https://philipjkim.github.io/posts/20250715-fantasy-baseball-points-league-strategy/</link>
      <pubDate>Tue, 15 Jul 2025 00:44:21 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-fantasy-baseball-points-league-strategy/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://sports.yahoo.com/fantasy/article/fantasy-baseball-points-league-strategy-everything-you-need-to-know-about-playing-yahoos-default-format-153238465.html&#34;&gt;https://sports.yahoo.com/fantasy/article/fantasy-baseball-points-league-strategy-everything-you-need-to-know-about-playing-yahoos-default-format-153238465.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;많은 판타지 야구 작가들이 기사를 쓸 때 주로 로티서리 (rotisserie) 형식을 생각하지만, 포인트 리그 (H2H points) 는 야후를 포함한 많은 인기 사이트에서 기본 설정이 되었습니다. 그리고 로토 형식과 달리 포인트 리그 채점 시스템은 사이트마다 크게 다릅니다.&lt;/p&gt;&#xA;&lt;p&gt;다행히 &lt;a href=&#34;https://help.yahoo.com/kb/default-league-settings-fantasy-baseball-sln6785.html&#34;&gt;야후의 기본 설정&lt;/a&gt;은 어떤 플랫폼에서든 가장 합리적인 설정입니다. 실제로 2024년 최종 선수 순위를 보면, 대부분의 선수들이 로토와 야후 포인트 점수에서 각자의 포지션에서 비슷한 위치에 랭크되었습니다. 상위 7명의 타자(Shohei Ohtani, Aaron Judge, Bobby Witt Jr., Juan Soto, José Ramírez, Gunnar Henderson)는 두 형식 모두에서 동일했으며, 상위 3명의 선발 투수(Tarik Skubal, Zack Wheeler, Chris Sale)도 마찬가지였습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: PLO8 (오마하 하이로우) 초보자를 위한 규칙</title>
      <link>https://philipjkim.github.io/posts/20250715-plo8-rules-for-beginners/</link>
      <pubDate>Tue, 15 Jul 2025 00:23:54 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-plo8-rules-for-beginners/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.getcoach.poker/articles/omaha-hi-lo-rules-for-beginners/&#34;&gt;https://www.getcoach.poker/articles/omaha-hi-lo-rules-for-beginners/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;하이와-로우는-무엇인가요&#34;&gt;하이와 로우는 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;하이는 가능한 가장 강한 조합입니다. 인기 있는 포커 게임 (텍사스 홀덤과 오마하)에서 이 조합은 로얄 플러시입니다.&lt;/p&gt;&#xA;&lt;p&gt;로우는 정반대, 즉 게임에서 가능한 가장 약한 조합입니다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 그 조합에는 몇 가지 요구 사항이 있습니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;로우는 8보다 높은 카드를 가질 수 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;에이스는 가장 낮은 카드로 간주됩니다.&lt;/li&gt;&#xA;&lt;li&gt;스트레이트와 플러시는 로우에 고려되지 않습니다. 예를 들어, A-2-3-4-5 다이아몬드 패는 최고의 로우 핸드로 간주됩니다.&lt;/li&gt;&#xA;&lt;li&gt;하나의 핸드가 로우와 하이 조합 모두가 될 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;plo8-은-일반-plo-팟-리밋-오마하-와-어떻게-다른가요&#34;&gt;PLO8 은 일반 PLO (팟 리밋 오마하) 와 어떻게 다른가요?&lt;/h2&gt;&#xA;&lt;p&gt;오마하 하이로우 (PLO8)는 가장 인기 있는 하이로우 포커 게임입니다. 클래식 또는 5카드 오마하와의 주요 차이점은 참가자들 사이의 포커 뱅크 분할입니다. 절반은 최고의 하이 조합을 가진 플레이어에게 가고, 나머지 절반은 최고의 로우 조합을 가진 플레이어에게 갑니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 시간은 무작위</title>
      <link>https://philipjkim.github.io/posts/20250714-tott-time-is-random/</link>
      <pubDate>Mon, 14 Jul 2025 10:30:17 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250714-tott-time-is-random/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/04/tott-time-is-random.html&#34;&gt;https://testing.googleblog.com/2008/04/tott-time-is-random.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;메서드의 입력값을 명확하게 식별할 수 없을 때 어떻게 제대로 테스트할 수 있을까요? 다음 Java 메서드를 살펴보세요.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/** 현재 시간으로부터 다음 분의 시작을 나타내는 Date 객체를 반환합니다. */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;nextMinuteFromNow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nowAsMillis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nowAsMillis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;60000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMilliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 메서드를 효과적으로 테스트하는 데에는 두 가지 장벽이 있습니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;코너 케이스&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 테스트하기 쉽지 않습니다. 시스템 클럭이 입력 조건을 제공하는 데에 좌우됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;nextMinuteFromNow()&lt;/code&gt; 가 반환될 때, 시간이 변경됩니다. 이는 테스트가 단언이 아니라 추측이 될 것이며, 재현하기 어려운 저빈도 실패를 생성할 수 있습니다&amp;hellip; 불안정성입니다! 예를 들어 클래스 로딩 및 가비지 컬렉션 일시 중지가 이에 영향을 미칠 수 있습니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt; 가 무작위 숫자 제공자처럼 보이기 시작하나요? 맞습니다! 현재 시간은 *비결정성 (non-determinism)*의 또 다른 원천입니다. &lt;code&gt;nextMinuteFromNow()&lt;/code&gt; 의 결과는 입력으로부터 쉽게 결정될 수 없습니다. 다행히도 이것은 쉽게 해결할 수 있습니다. 현재 시간을 제어할 수 있는 입력 매개변수로 만드세요.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 너무 많은 테스트</title>
      <link>https://philipjkim.github.io/posts/20250714-tott-too-many-tests/</link>
      <pubDate>Mon, 14 Jul 2025 10:20:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250714-tott-too-many-tests/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/02/in-movie-amadeus-austrian-emperor.html&#34;&gt;https://testing.googleblog.com/2008/02/in-movie-amadeus-austrian-emperor.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;영화 &lt;em&gt;아마데우스&lt;/em&gt;에서 오스트리아 황제는 모차르트의 음악에 “음표가 너무 많다”고 비판합니다. 하나의 기능을 테스트하는 데 “너무 많은” 테스트는 몇 개일까요?&lt;/p&gt;&#xA;&lt;p&gt;메서드 &lt;code&gt;decide&lt;/code&gt;를 고려해 봅시다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;decide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DoOneThing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DoAnother&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 공간 제약 때문에 한 글자 변수 이름을 사용했습니다.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 더 나은 이름을 사용해야 합니다. 제가 하는 대로 하지 말고, 제가 시키는 대로 하세요. :-)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;얼마나 많은 테스트를 작성할 수 있을까요? 각 변수에 대해 &lt;code&gt;int&lt;/code&gt; 값의 전체 범위를 실행하려면 2^192개의 테스트가 필요할 것입니다. 이렇게 계속한다면 구골 개수의 테스트를 하게 될 것입니다! 너무 많은 테스트입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 모든 것을 공격으로 해석하는 사람과 대화하기</title>
      <link>https://philipjkim.github.io/posts/20250711-talking-to-someone-who-interprets-everything-as-an-attack/</link>
      <pubDate>Fri, 11 Jul 2025 14:05:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250711-talking-to-someone-who-interprets-everything-as-an-attack/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&#34;&gt;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;어떤 말이나 제안이라도 상대방을 화나게 할까 봐 조심스러웠던 적이 있나요? 우리는 때때로 우리가 하는 모든 말을 비난으로 해석하는 사람을 불쾌하게 하거나, 우리가 의도한 대화의 요점을 놓치게 하는 특정 단어를 사용할 수도 있습니다. 대화가 언제 터질지 모르는 지뢰밭처럼 느껴질 때 믿을 수 없을 정도로 어렵고 심지어 좌절감을 느끼기도 합니다. 그렇다면 모든 것을 공격으로 해석하는 방어적인 사람과 긴장을 고조시키지 않고 어떻게 대화할 수 있을까요?&lt;/p&gt;&#xA;&lt;p&gt;모든 언급을 개인적인 공격으로 생각하는 방어적인 사람과 대화하는 것은 지칠 수 있습니다. 이것은 대화를 어렵게 만들고 관계에 큰 부담을 줄 수 있습니다. 가족, 친구, 동료와 관계없이 상황을 처리하는 방법을 아는 것이 존중과 평화를 유지하는 데 중요합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>변역글: 갈등 회피가 종종 갈등을 유발할 수 있다</title>
      <link>https://philipjkim.github.io/posts/20250711-avoiding-conflict-can-often-cause-conflict/</link>
      <pubDate>Fri, 11 Jul 2025 13:55:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250711-avoiding-conflict-can-often-cause-conflict/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&#34;&gt;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;젊은 관리자들을 멘토링할 때, 일반적으로 가장 개발하기 어려운 기술은 갈등을 다루고 갈등이 긍정적인 결과로 이어지도록 하는 것입니다. 침묵하는 승인이나 갈등 회피는 직원 갈등에 기여할 뿐만 아니라 상황을 악화시키는 경향이 있습니다. 이러한 관리자/리더들은 갈등을 무시하거나 상황에 관여하기를 거부합니다. 관리자가 모호하고, 회피적이며, 사람이나 문제를 무시하거나 회피하는 행동은 갈등 회피를 실행할 수 있습니다. 문제를 회피하거나 대결을 지연시키는 대신, 이는 양 당사자에게 손실을 초래하는 상황이 됩니다.&lt;/p&gt;&#xA;&lt;p&gt;갈등 관리는 개발하기 어려운 기술이지만, 관리자와 리더가 감정적으로나 직업적으로 이 기술을 습득하는 것이 필수적입니다. 갈등은 나쁜 것이 아닙니다! 권위에 대한 두려움, 성별 고정관념, 다른 관점, 위협, 자신감 부족은 모두 개인이 갈등을 피하는 데 기여하는 요인입니다. 갈등을 다루는 데 대한 결과에 대한 두려움이나 다른 사람의 반응에 대한 불안감은 너무 압도적이어서 관리자가 상황을 피하게 될 수 있습니다. 예상되는 반응을 다루는 고통스러운 생각은 너무 고통스러워서 다루고 해결할 수 없습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 스트룹 효과</title>
      <link>https://philipjkim.github.io/posts/20250711-tott-the-stroop-effect/</link>
      <pubDate>Fri, 11 Jul 2025 10:49:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250711-tott-the-stroop-effect/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/02/tott-stroop-effect.html&#34;&gt;https://testing.googleblog.com/2008/02/tott-stroop-effect.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/The_Stoop_Effect.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;아래 두 행동을 얼마나 빨리 할 수 있나요?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&amp;hellip;25개 단어를 모두 소리 내어 읽기: 빨강, 초록, 파랑, &amp;hellip; (지금 시도해 보세요!)&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;25가지 색깔을 모두 소리 내어 말하기: 초록, 노랑, 하양&amp;hellip; (지금 시도해 보세요!)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;두 번째 작업이 더 많은 시간과 노력을 필요로 했나요? 그렇다면, 여러분은 스트룹 효과를 경험하고 있는 것입니다. 스트룹 효과는 대략적으로 &lt;em&gt;레이블&lt;/em&gt;(이 경우 단어)이 &lt;em&gt;내용&lt;/em&gt;(색깔)과 같은 영역에 있고 의미가 충돌할 때, 레이블이 내용을 이해하는 능력에 방해가 된다는 것을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 스텁이 단위 테스트 속도를 높여줍니다</title>
      <link>https://philipjkim.github.io/posts/20250710-tott-stubs-speed-up-your-unit-tests/</link>
      <pubDate>Thu, 10 Jul 2025 16:01:59 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250710-tott-stubs-speed-up-your-unit-tests/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2007/04/tott-stubs-speed-up-your-unit-tests.html&#34;&gt;https://testing.googleblog.com/2007/04/tott-stubs-speed-up-your-unit-tests.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Michael Feathers는 좋은 단위 테스트의 특징을 &amp;ldquo;빠르게 실행되고 문제 위치를 파악하는 데 도움이 된다&amp;quot;고 정의합니다. 코드에 데이터베이스 액세스, 다른 서버와의 통신, 시간 의존성 등이 있을 때는 이를 달성하기 어렵습니다.&lt;/p&gt;&#xA;&lt;p&gt;모듈의 일부 종속성에 커스텀 객체를 대체하여 코드를 철저히 테스트하고, 커버리지를 높이며, 1초 이내에 실행할 수 있습니다. 데이터베이스 오류와 같은 드문 시나리오도 시뮬레이션하여 오류 처리 코드를 테스트할 수도 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;이러한 &amp;ldquo;커스텀 객체&amp;quot;를 지칭하는 다양한 용어가 사용됩니다. 용어를 명확히 하기 위해 Gerard Meszaros는 다음 정의를 제공합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: ExecutorService invokeAll 과 가상 스레드 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250710-using-executor-service-invoke-all-with-virtual-threads/</link>
      <pubDate>Thu, 10 Jul 2025 09:41:55 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250710-using-executor-service-invoke-all-with-virtual-threads/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://davidvlijmincx.com/posts/loom/invoke-all-with-virtual-threads/&#34;&gt;https://davidvlijmincx.com/posts/loom/invoke-all-with-virtual-threads/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;invokeAll&lt;/code&gt; 은 &lt;code&gt;ExecutorService&lt;/code&gt; 의 메서드로, 여러 제출된 작업을 동시에 시작합니다. &lt;code&gt;ExecutorService&lt;/code&gt; 는 스레드 풀에서 플랫폼 스레드를 사용하여 제출된 작업을 실행합니다. 이 비싸고 리소스 집약적인 플랫폼 스레드를 사용하는 대신, 가상 스레드를 사용하여 &lt;code&gt;ExecutorService&lt;/code&gt; 에 제출된 작업을 실행할 수도 있습니다. 이 글에서는 &lt;code&gt;invokeAll&lt;/code&gt; 메서드를 가상 스레드 (virtual threads), 구조화된 동시성 (structured concurrency) 및 플랫폼 스레드 (platform threads) 와 함께 구현하는 모든 방법을 다룰 것입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;가상-스레드를-사용한-invokeall&#34;&gt;가상 스레드를 사용한 &lt;code&gt;invokeAll&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;우리가 살펴볼 첫 번째 예제는 가상 스레드 (virtual threads) 를 사용합니다. 각 작업에 대해 가상 스레드를 생성하는 Executor 를 생성하는 try-with-resources 문이 있습니다. 7행에서 &lt;code&gt;invokeAll&lt;/code&gt; 메서드가 작업 목록과 함께 호출됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: PLO (팟 리밋 오마하) 에서 효과적인 블러핑</title>
      <link>https://philipjkim.github.io/posts/20250709-effective-bluffing-in-pot-limit-omaha/</link>
      <pubDate>Wed, 09 Jul 2025 10:20:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250709-effective-bluffing-in-pot-limit-omaha/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://ggpoker.com/blog/beginner-strategy/effective-bluffing-in-pot-limit-omaha/&#34;&gt;https://ggpoker.com/blog/beginner-strategy/effective-bluffing-in-pot-limit-omaha/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;속임수의-기본-원리&#34;&gt;속임수의 기본 원리&lt;/h2&gt;&#xA;&lt;p&gt;“포커는 펠트 테이블에서 하는 게임이지만, 플레이어들의 마음속에서 승리하는 게임이다”와 같은 말을 들어보셨을 것입니다. 이 말이 얼마나 정확하다고 생각하십니까? PLO에서 블러핑의 복잡한 부분에 더 깊이 들어가기 전에, 몇 가지 기본을 다져봅시다.&lt;/p&gt;&#xA;&lt;p&gt;포커 세계에 막 발을 들여놓은 분들을 위한 블러핑은 상대방에게 실제보다 더 좋은 패를 가지고 있다고 믿게 만드는 전술입니다. 베팅이나 레이즈를 하여 상대방이 두려움 때문에 폴드하도록 유도하는 것입니다. 하지만 여기에 함정이 있습니다 – 이것은 무모한 도박이 아니라 예술 형식입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 더 현명한 질문을 하는 기술</title>
      <link>https://philipjkim.github.io/posts/20250708-the-art-of-asking-smarter-questions/</link>
      <pubDate>Tue, 08 Jul 2025 14:21:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250708-the-art-of-asking-smarter-questions/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://hbr.org/2024/05/the-art-of-asking-smarter-questions&#34;&gt;https://hbr.org/2024/05/the-art-of-asking-smarter-questions&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;미국 칩 제조업체 엔비디아의 공동 설립자이자 CEO인 젠슨 황은 민첩하고 혁신적인 사고가 필요한 고속 산업에서 일합니다. 그의 리더십 스타일이 어떻게 발전했는지 회상하며 그는 &lt;em&gt;뉴욕 타임스&lt;/em&gt;에 “나는 아마도 답변을 덜 하고 질문을 훨씬 더 많이 한다….이제는 하루 종일 질문만 하고 지내는 것이 거의 가능할 것 같다”고 말했습니다. 그는 계속해서 “탐색을 통해 나는 [나의 경영진]이…탐색할 필요가 있다고 생각하지 못했던 아이디어를 탐색하도록 돕는다”고 덧붙였습니다.&lt;/p&gt;&#xA;&lt;p&gt;기술 기업들이 오랫동안 직면해 온 긴급성과 예측 불가능성은 더욱 성숙한 부문으로 확산되어 질문을 필수적인 기술로 끌어올렸습니다. AI의 발전은 답변이 중요했던 세상에서 질문이 중요해지는 세상으로의 엄청난 변화를 야기했습니다. 큰 차이점은 더 이상 정보에 대한 접근성이 아니라 스마트 프롬프트를 만드는 능력입니다. 씨티은행의 CEO인 제인 프레이저는 &lt;em&gt;포춘&lt;/em&gt;지에 “리더로서 당신은 답을 가지고 있지 않다. 당신의 직원들이 [가지고 있다], 당신의 사람들이 [가지고 있다]”고 말했습니다. “그것은 조직을 이끌어가는 방식을 완전히 바꿔놓았다. 창의성을 발휘해야 한다….혁신은 회사 정상에 있는 천재가 모든 답을 내놓기 때문에 일어나는 것이 아니다.”&lt;/p&gt;</description>
    </item>
    <item>
      <title>밈 소개: 홀덤에서 오마하로 종목전환</title>
      <link>https://philipjkim.github.io/posts/20250708-holdem-to-omaha-meme/</link>
      <pubDate>Tue, 08 Jul 2025 13:34:39 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250708-holdem-to-omaha-meme/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.reddit.com/r/poker/comments/109llkw/switching_from_hold_em_to_omaha/&#34;&gt;https://www.reddit.com/r/poker/comments/109llkw/switching_from_hold_em_to_omaha/&lt;/a&gt; (Explanation by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://preview.redd.it/switching-from-hold-em-to-omaha-v0-j6awvkn0yjba1.jpg?width=320&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=1bef6890bafa047cb8d9b219758ad609292d6aa3&#34; alt=&#34;holdem_to_omaha_meme&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;밈meme의-흐름-해설&#34;&gt;밈(Meme)의 흐름 해설&lt;/h2&gt;&#xA;&lt;p&gt;이 밈은 4컷 만화 형식으로 되어 있습니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;1~3컷&lt;/strong&gt;: 한 남자가 &amp;ldquo;와, 돈이 너무 많아!&amp;rdquo;, &amp;ldquo;젠장, 이 돈을 다 어떡하지?&amp;rdquo;, &amp;ldquo;주머니에서 돈이 막 떨어지네! 누가 제발 이 돈 좀 가져가 줘!&amp;ldquo;라고 외칩니다. 즉, &lt;strong&gt;주체할 수 없을 정도로 돈이 많아서 제발 누가 이 돈을 좀 가져가 줬으면 하는 비현실적인 상황&lt;/strong&gt;을 보여줍니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;4컷&lt;/strong&gt;: 갑자기 이 남자가 정장을 입고 전문가처럼 등장합니다. 이미지 위에는 &lt;strong&gt;&amp;ldquo;PLO&amp;rdquo;&lt;/strong&gt; (팟 리밋 오마하)라는 글자가 쓰여 있습니다. 그리고 그는 이렇게 말합니다. &amp;ldquo;아무튼, 저는 우리의 타겟 고객을 이렇게 생각합니다.&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;핵심은 1~3컷의 &amp;lsquo;돈을 잃고 싶어 안달 난 사람&amp;rsquo;이 바로 4컷의 &amp;lsquo;PLO라는 게임이 노리는 이상적인 고객&amp;rsquo;이라는 점입니다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 화장실에서 테스팅 (Testing on the Toilet) 소개</title>
      <link>https://philipjkim.github.io/posts/20250708-introducing-testing-on-the-toilet/</link>
      <pubDate>Tue, 08 Jul 2025 10:31:22 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250708-introducing-testing-on-the-toilet/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html&#34;&gt;https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;업데이트 - 2024년 12월&lt;/strong&gt;: TotT 의 의미는 &lt;em&gt;화장실에서 테스팅 (Testing on the Toilet)&lt;/em&gt; 에서 이제 *화장실에서 기술 (Tech on the Toilet)*로 변경되었습니다. 자세한 내용은 다음 게시물을 읽어보세요: &lt;a href=&#34;https://testing.googleblog.com/2024/12/tech-on-toilet-driving-software.html&#34;&gt;&lt;strong&gt;화장실에서 기술: 한 번의 화장실 휴식으로 소프트웨어 우수성 향상&lt;/strong&gt;&lt;/a&gt;. 아래는 2007년의 원본 게시물입니다.&lt;/p&gt;&#xA;&lt;p&gt;블로거 커멘트: 앞으로 TotT 시리즈를 시간이 날 때마다 하나씩 번역해서 포스팅할 예정입니다. (이미 먼저 포스팅된 글들도 있습니다.)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;저희는 여러분이 더 많은 테스트를 작성하기를 바랍니다. 네, 바로 여러분입니다. 테스트는 코드를 리팩토링해야 할 때나 다른 개발자가 기능을 추가할 때 여러분을 보호하는 안전망이라는 말을 이미 들었을 것입니다. 심지어 테스트가 코드 디자인에 도움이 될 수 있다는 것도 알고 있을 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: PLO (팟 리밋 오마하) 스타팅 핸드: 반드시 고려해야 할 3가지</title>
      <link>https://philipjkim.github.io/posts/20250707-pot-limit-omaha-starting-hands/</link>
      <pubDate>Mon, 07 Jul 2025 20:22:29 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-pot-limit-omaha-starting-hands/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://upswingpoker.com/pot-limit-omaha-starting-hands-plo-preflop-strategy/&#34;&gt;https://upswingpoker.com/pot-limit-omaha-starting-hands-plo-preflop-strategy/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;NLH 플레이어는 다음과 같은 보기 쉬운 레인지 매트릭스를 사용할 수 있습니다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://upswingpoker.com/wp-content/uploads/2017/07/https-i-gyazo-com-b38ff2ed5ea81eb5909d086d23581b.png&#34; alt=&#34;nlh_range_matrix&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;PLO 플레이어에게는 이러한 편리한 레인지 매트릭스가 없습니다. 모든 것을 포함하는 것은 실질적으로 비실용적이기 때문입니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2018년 수정:&lt;/strong&gt; 위 내용은 이 기사가 게시되었을 때 사실이었지만, 저희는 실제로 실용적이고 사용하기 쉬운 새로운 &lt;a href=&#34;https://upswingpoker.com/plo-solver-preflop/&#34;&gt;프리플랍 PLO 도구&lt;/a&gt; 를 출시했습니다.&lt;/p&gt;&#xA;&lt;p&gt;이것이 이 게임이 매우 역동적인 이유 중 하나입니다. 다양한 가능한 핸드가 있기 때문에 PLO는 플레이어에게 끊임없이 독특한 상황을 제공합니다. PLO에서 프리플랍 핸드 선택 전략을 세우는 것은 어려울 수 있지만, 여전히 승리할 스타팅 핸드를 선택하기 위해 고려할 수 있는 여러 요소가 있습니다. 이 기사에서는 그중 3가지를 설명하겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Go의 동시성: 심층 분석</title>
      <link>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</link>
      <pubDate>Mon, 07 Jul 2025 13:43:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&#34;&gt;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;h3 id=&#34;동시성이란-무엇인가&#34;&gt;동시성이란 무엇인가?&lt;/h3&gt;&#xA;&lt;p&gt;동시성은 독립적인 활동들의 구성으로 느슨하게 정의될 수 있습니다. 반드시 병렬 실행을 필요로 하지는 않지만, 여러 태스크가 겹치는 시간 동안 진행되도록 허용합니다. 컴퓨팅의 맥락에서 동시 프로그래밍은 여러 태스크가 실행에서 &lt;strong&gt;인터리브(interleave - 여러 대상을 번갈아 가며 실행하거나 배치)&lt;/strong&gt; 될 수 있도록 보장하며, 이는 특히 I/O 바운드 태스크나 수많은 이벤트를 동시에 처리해야 하는 애플리케이션(예: 웹 서버에서 여러 클라이언트 연결 처리)에서 중요합니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;동시성-vs-병렬성&#34;&gt;동시성 vs. 병렬성&lt;/h3&gt;&#xA;&lt;p&gt;비공식적인 대화에서 종종 혼용되지만, 동시성과 병렬성은 다른 개념입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 더 나은 테스트를 위한 가짜(Fake) 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250707-testing-on-toilet-fake-your-way-to/</link>
      <pubDate>Mon, 07 Jul 2025 13:23:12 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-testing-on-toilet-fake-your-way-to/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html&#34;&gt;https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;수년간 블로그를 운영한 후, 블로그 플랫폼의 API를 사용해보기로 결정했습니다. 이리저리 사용해보다가 문득 깨닫습니다: 원격 블로그 서버와 통신하지 않고도 코드가 작동하는지 어떻게 알 수 있을까요?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;deletePostsWithTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAllPosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;deletePost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;가짜(Fakes)가 해결책입니다! 가짜는 실제 구현체처럼 작동하지만, 프로덕션 환경에 적합하지 않은 API의 가벼운 구현체입니다. 블로그 서비스의 경우, 중요한 것은 게시물을 가져오고 삭제하는 기능뿐입니다. 실제 블로그 서비스는 데이터베이스와 여러 프런트엔드 서버가 필요하겠지만, 코드를 테스트하는 데는 그런 것이 필요 없습니다. 필요한 것은 블로그 서비스 API의 어떤 구현체든 상관없습니다. 간단한 인메모리 구현체로 이를 달성할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 헤르메틱 서버 (Hermetic Servers)</title>
      <link>https://philipjkim.github.io/posts/20250707-hermetic-servers/</link>
      <pubDate>Mon, 07 Jul 2025 13:08:09 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-hermetic-servers/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2012/10/hermetic-servers.html&#34;&gt;https://testing.googleblog.com/2012/10/hermetic-servers.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;종단-간-테스트&#34;&gt;&amp;ldquo;종단 간&amp;rdquo; 테스트&lt;/h2&gt;&#xA;&lt;p&gt;Google 테스트 세계에서 종단 간 테스트는 사용자 요청부터 응답까지 전체 서버 스택을 실행하는 테스트입니다. 다음은 종단 간 테스트가 검증할 시스템 테스트 대상(SUT)의 간략한 모습입니다. SUT의 프런트엔드 서버가 특정 사용자 요청에 필요하지 않은 세 번째 백엔드에 연결된다는 점에 유의하십시오.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-lwP4J6FcN34/UGx-bU41ImI/AAAAAAAAAP8/l5M0J3A0Xgk/s640/1-SUT.jpg&#34; alt=&#34;system_under_test&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이러한 시스템에 대한 빠르고 신뢰할 수 있는 종단 간 테스트를 작성하는 데 있어 한 가지 과제는 네트워크 액세스를 피하는 것입니다. 네트워크 액세스가 포함된 테스트는 로컬 리소스만 액세스하는 테스트보다 느리며, 외부 서버에 액세스하면 비결정성 또는 외부 서버의 가용성 부족으로 인해 &lt;a href=&#34;http://googletesting.blogspot.com/2008/04/tott-avoiding-flakey-tests.html&#34;&gt;불확실성&lt;/a&gt;이 발생할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 목(Mock)을 과도하게 사용하지 마세요</title>
      <link>https://philipjkim.github.io/posts/20250707-testing-on-the-toilet-dont-overuse-mocks/</link>
      <pubDate>Mon, 07 Jul 2025 10:53:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-testing-on-the-toilet-dont-overuse-mocks/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html&#34;&gt;https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;코드를 테스트할 때, 코드의 의존성을 목으로 처리하여 무시하는 것이 쉬워 보일 수 있습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testCreditCardIsCharged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isServerAvailable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;beginTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockTransactionManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockTransactionManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isOverMaxBalance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;processPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;dollars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하지만 목을 사용하지 않으면 때로는 더 간단하고 유용한 테스트를 만들 수 있습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testCreditCardIsCharged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;processPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;dollars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMostRecentCharge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;목을 과도하게 사용하면 몇 가지 문제가 발생할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 더위 속에서 자전거를 타면서 살아남기 위한 9가지 팁: 얼마나 마셔야 하는지부터 뜨거운 물에 목욕해야 하는 이유까지</title>
      <link>https://philipjkim.github.io/posts/20250707-9-tips-to-survive-cycling-in-the-heat/</link>
      <pubDate>Mon, 07 Jul 2025 10:22:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-9-tips-to-survive-cycling-in-the-heat/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.bikeradar.com/advice/fitness-and-training/cycling-in-hot-weather&#34;&gt;https://www.bikeradar.com/advice/fitness-and-training/cycling-in-hot-weather&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;달리기 또는 비수상 팀 스포츠와 비교할 때, 사이클링은 분명 폭염 속에서 가장 즐거운 활동입니다. 속도 증가와 자전거로 생성되는 공기의 움직임은 라이더에게 일종의 시원한 담요를 제공합니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 그 바람 냉각은 기만적일 수 있으며 우리가 얼마나 열심히 운동하고 있는지, 얼마나 더운지, 얼마나 땀을 흘리고 있는지를 숨길 수 있습니다. 이것이 이번 여름에 자전거를 타면서 수분을 유지하는 것이 라이딩 성능과 즐거움에 가장 중요한 이유입니다.&lt;/p&gt;&#xA;&lt;p&gt;성능 측면에서, &lt;a href=&#34;https://research.monash.edu/en/publications/effects-of-heat-stress-on-physiological-responses-and-exercise-pe&#34;&gt;호주 연구&lt;/a&gt;에 따르면 사이클리스트가 32°C 더위에서 운동할 때 파워 출력이 6.5% 감소하며, 자전거에서 불충분한 연료 공급의 위험으로는 탈수, 경련 및 저나트륨혈증(혈액 내 나트륨 농도가 비정상적으로 낮을 때)이 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 푸싱 &amp; 풀링: PLO에서 중요한 프리플랍 전술을 활용하는 방법</title>
      <link>https://philipjkim.github.io/posts/20250704-how-to-utilize-a-crucial-preflop-tactics-in-plo/</link>
      <pubDate>Fri, 04 Jul 2025 14:11:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250704-how-to-utilize-a-crucial-preflop-tactics-in-plo/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://upswingpoker.com/pushing-pulling-plo-preflop-tactic/&#34;&gt;https://upswingpoker.com/pushing-pulling-plo-preflop-tactic/&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;A♠️A♦️K♠️K♦️는 PLO에서 가장 좋은 스타팅 핸드라고 할 수 있습니다. T♠️8♣️4♣️2♥️에 대한 지분을 살펴보겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://upswingpoker.com/wp-content/uploads/2017/08/equity.png&#34; alt=&#34;https://upswingpoker.com/wp-content/uploads/2017/08/equity.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이런 형편없는 핸드도 절대적인 몬스터 핸드에 대해 34% 이상의 지분을 가지고 있습니다. &lt;strong&gt;지분 차이가 작을수록 엣지가 작아지기 때문에 PLO(팟-리밋 오마하)가 NLH(노-리밋 홀덤)보다 도박처럼 느껴지는 이유입니다.&lt;/strong&gt; 하지만 프리플랍에서 엣지를 극대화하고 포스트플랍 성공을 위한 준비를 할 수 있는 전술들이 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 &amp;lsquo;&lt;strong&gt;푸싱&lt;/strong&gt;&amp;lsquo;과 &amp;lsquo;&lt;strong&gt;풀링&lt;/strong&gt;&amp;lsquo;이라는 두 가지 프리플랍 전술에 대해 이야기할 것입니다. 이 전술들은 종종 혼란스러운 프리플랍 PLO의 세계에 구조를 부여하는 데 도움이 될 수 있습니다. 바로 본론으로 들어가겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 브롬톤: 한 오너의 인상</title>
      <link>https://philipjkim.github.io/posts/20250704-the-brompton-the-owners-impression/</link>
      <pubDate>Fri, 04 Jul 2025 10:31:46 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250704-the-brompton-the-owners-impression/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://lovelybike.blogspot.com/2012/06/brompton-owners-impression.html&#34;&gt;https://lovelybike.blogspot.com/2012/06/brompton-owners-impression.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://live.staticflickr.com/8157/7323945542_49ba921f60_z.jpg&#34; alt=&#34;https://live.staticflickr.com/8157/7323945542_49ba921f60_z.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;몇 달 전 우리는 브롬톤 접이식 자전거의 주인이 되었습니다. 제가 이 자전거를 얼마나 좋아하는지에 대해 여전히 놀랍고 조금은 부끄럽습니다. 왜 이런 복합적인 감정이 드는 걸까요? 글쎄요, 이 구매나 사양에 대해 제가 공을 세울 수 없기 때문입니다. 대부분 남편의 아이디어였거든요! 오해하지 마세요. 저는 몇 년 동안 브롬톤을 동경해왔고, 여기 블로그에 동경하는 마음으로 글을 쓰기도 했습니다. 작년 여름에는 긴 시간 동안 시승도 해보았죠. 결국 저는 브롬톤을 소유할 필요가 있거나 원한다는 확신이 서지 않았습니다. 하지만 남편은 확신했고, 우리가 동시에 두 대를 사는 것이 합리적이라고 주장했습니다. 그가 강하게 원했기 때문에 저도 결국 동의했지만, 제 사용량이 이 구매를 정당화하지 못할까 봐 계속 불안했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 전문적인 환경에서 사용할 수 있는 11가지 토론 기술</title>
      <link>https://philipjkim.github.io/posts/20250703-11-debate-techniques-to-use-in-a-professional-setting/</link>
      <pubDate>Thu, 03 Jul 2025 10:48:11 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250703-11-debate-techniques-to-use-in-a-professional-setting/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.indeed.com/career-advice/career-development/debate-techniques&#34;&gt;https://www.indeed.com/career-advice/career-development/debate-techniques&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;직장에서-사용할-수-있는-11가지-토론-기술&#34;&gt;직장에서 사용할 수 있는 11가지 토론 기술&lt;/h2&gt;&#xA;&lt;p&gt;다음은 전문적인 맥락에서 사용할 수 있는 11가지 토론 기술입니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-청중-정의하기&#34;&gt;1. 청중 정의하기&lt;/h3&gt;&#xA;&lt;p&gt;직장에서 토론을 할 때 주요 청중 중 한 명은 당신이 토론하는 상대방입니다. 상대방의 입장과 신념을 고려하여 당신의 주장에 공감하도록 만드는 방법을 결정하십시오. 예를 들어, 상사와 토론하는 경우 &lt;a href=&#34;https://www.indeed.com/career-advice/career-development/what-is-productivity&#34;&gt;생산성&lt;/a&gt; 향상에 대한 상사의 욕구에 호소하도록 주장을 구성할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;직장 토론에는 당신이 토론하는 상대방 외에 추가 청중이 있을 수 있다는 점을 인지하십시오. 당신의 주장을 듣는 사람들을 설득하고 싶다면 그들의 욕구에도 호소하는 것을 고려하십시오. 청중의 원하는 바를 충족시키면 당신의 주장이 더욱 설득력 있어지고 당신의 주장에 대한 지지를 얻을 수 있습니다. 당신이 토론하는 상대방이 당신의 주장이 다른 사람들에게도 호소력이 있다는 것을 알게 되면 당신의 입장을 더 잘 이해할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 최대 산소 섭취량(VO2 Max): 무엇이며 어떻게 향상하는가</title>
      <link>https://philipjkim.github.io/posts/20250703-vo2-max-what-is-it-and-how-to-improve-it/</link>
      <pubDate>Thu, 03 Jul 2025 10:19:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250703-vo2-max-what-is-it-and-how-to-improve-it/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.hss.edu/health-library/move-better/vo2-max&#34;&gt;https://www.hss.edu/health-library/move-better/vo2-max&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;사람을 좋은 주자로 만드는 데는 여러 가지 요인이 있습니다. 그중 가장 중요한 것 중 하나는 최대 산소 섭취량입니다. HSS 스포츠 재활 및 퍼포먼스 팀의 운동 생리학자인 Kate Baird, MA, ACSM-CEP, CSCS는 “최대 산소 섭취량, 즉 유산소 능력을 이해하면 자신의 체력 수준을 측정하는 기준점을 갖게 됩니다.”라고 말합니다. “최대 산소 섭취량을 개선하는 것은 장수와 건강뿐만 아니라 달리기 능력에도 도움이 됩니다.”&lt;/p&gt;&#xA;&lt;h2 id=&#34;최대-산소-섭취량vo2-max이란-무엇인가요&#34;&gt;최대 산소 섭취량(VO2 Max)이란 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;생물학 수업으로 돌아가 보겠습니다. 우리가 숨을 들이쉴 때 폐는 산소를 받아들입니다. 심장과 혈액은 그 산소를 근육으로 운반하고, 이는 근육이 움직이도록 하는 화학 반응을 일으키는 연료가 됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 난치병을 겪고 있는 사람으로서, 살아있는 사람들에게 어떤 조언을 해주고 싶으신가요?</title>
      <link>https://philipjkim.github.io/posts/20250703-advice-to-the-living-as-a-dying-person/</link>
      <pubDate>Thu, 03 Jul 2025 09:58:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250703-advice-to-the-living-as-a-dying-person/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.quora.com/As-a-dying-person-what-is-your-advice-to-the-living&#34;&gt;https://www.quora.com/As-a-dying-person-what-is-your-advice-to-the-living&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;2009년 저는 &lt;strong&gt;교모세포종&lt;/strong&gt;이라는 4등급 뇌종양 진단을 받았습니다. 수술 후 종양 전문의는 통계가 매우 좋지 않다는 슬픈 소식을 전하며 9개월간의 치료와 6개월에서 1년 정도의 수명을 예상했습니다.&lt;/p&gt;&#xA;&lt;p&gt;저는 몇 달 후 결혼할 예정으로 약혼한 상태였습니다. 하지만 우리는 헤어졌는데, 제가 그녀를 과부로 만들고 마음을 아프게 할 이유가 없다고 생각했습니다. 그 이후로 삶에서 어떤 것도 더 이상 추구하고 싶은 마음이 없었습니다. 완전히 모든 것을 중단했던 시기였습니다.&lt;/p&gt;&#xA;&lt;p&gt;직장을 그만두고 싶었지만, 제 상사들이 편안한 스케줄로 저를 설득해서 계속 일하게 했습니다. 그들은 저에게 통계를 다시 가르쳐주기 시작했습니다. 평균 수명 1년이라는 것은 어떤 사람은 3년 후에 죽고, 어떤 사람은 6개월 후에 죽는다는 의미이며, 저는 &lt;strong&gt;장기 생존 쪽에 속할 것이라는 긍정적인 마음&lt;/strong&gt;을 가져야 한다고 했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 엔듀런스 vs 그래블 바이크 - 어떤 것을 선택해야 할까요?</title>
      <link>https://philipjkim.github.io/posts/20250702-endurance-vs-gravel-bike/</link>
      <pubDate>Wed, 02 Jul 2025 13:42:56 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250702-endurance-vs-gravel-bike/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.canyon.com/en-kr/blog-content/gravel-bike-news/endurance-vs-gravel-bike/b16042024.html&#34;&gt;https://www.canyon.com/en-kr/blog-content/gravel-bike-news/endurance-vs-gravel-bike/b16042024.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;엔듀런스-vs-그래블-바이크-모든-도로-영역을-깊이-탐험하기&#34;&gt;엔듀런스 vs 그래블 바이크: 모든 도로 영역을 깊이 탐험하기&lt;/h2&gt;&#xA;&lt;p&gt;엔듀런스 바이크는 전통적인 로드 레이싱 바이크와 비슷해 보일 수 있지만, 더 수직이고 편안한 라이딩 포지션을 특징으로 합니다. 안장에서 더 긴 하루를 보낼 수 있도록 설계되었으며, 디자인에 편안함뿐만 아니라 성능과 효율성을 갖추고 있다는 사실 때문에 &amp;lsquo;엔듀런스&amp;rsquo;라는 이름을 얻었습니다. Canyon 의 엔듀런스 로드 바이크 제품군은 편안함과 속도의 경계를 허물고 안장에서 더 많은 지지를 제공하도록 설계되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;그래블 바이크는 로드, 산악, 사이클로크로스 바이크의 요소를 차용합니다. 더 넓은 타이어, 견고한 프레임, 디스크 브레이크, 장비를 위한 추가 마운트를 갖추고 있어 아스팔트에서 트레일까지 다양한 지형을 다룰 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Golang 공동 창시자 Rob Pike: Go가 잘한 것과 잘못한 것</title>
      <link>https://philipjkim.github.io/posts/20250702-what-go-got-right-and-wrong/</link>
      <pubDate>Wed, 02 Jul 2025 10:28:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250702-what-go-got-right-and-wrong/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://thenewstack.io/golang-co-creator-rob-pike-what-go-got-right-and-wrong/&#34;&gt;https://thenewstack.io/golang-co-creator-rob-pike-what-go-got-right-and-wrong/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gophercon.com.au/&#34;&gt;GopherCon AU&lt;/a&gt; 참석자들은 Go의 사양이 처음 작성된 도시인 호주 시드니에서 특별한 대접을 받았습니다. Go의 공동 설계자 중 한 명인 &lt;a href=&#34;https://github.com/robpike&#34;&gt;Rob Pike&lt;/a&gt;는 Go 프로그래밍 언어가 출시된 지 14주년이 되는 날을 기념하며 “무엇을 제대로 했고, 무엇을 잘못했는지” 돌아보는 강연을 했습니다.&lt;/p&gt;&#xA;&lt;p&gt;Pike는 2009년 11월 10일 웹사이트가 처음 공개되던 순간을 기억하며 “세상이 우리가 무엇을 해왔는지 알게 되었다”고 말했습니다.&lt;/p&gt;&#xA;&lt;p&gt;“14년이 지난 지금, 돌아볼 것이 많습니다.”라고 Pike는 청중에게 말하며 “더 큰 교훈들”을 탐구하겠다고 약속했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 분산 시스템 개발자를 위한 기도</title>
      <link>https://philipjkim.github.io/posts/20250701-a-prayer-for-distrubuted-systems-developers/</link>
      <pubDate>Tue, 01 Jul 2025 13:55:13 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250701-a-prayer-for-distrubuted-systems-developers/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://philipotoole.com/a-prayer-for-distributed-systems-developers/&#34;&gt;https://philipotoole.com/a-prayer-for-distributed-systems-developers/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;16년이 넘는 시간 동안 저는 전체 스택을 오르내리며 소프트웨어를 작성했습니다. 제 경력 초기에 저는 특수 임베디드 장치를 위한 &lt;a href=&#34;http://en.wikipedia.org/wiki/Booting&#34;&gt;부트 ROM&lt;/a&gt; 소프트웨어를 작성했습니다. 이런 종류의 프로그래밍은 컴퓨터가 &lt;strong&gt;정말로&lt;/strong&gt; 어떻게 작동하는지에 대해 많은 것을 가르쳐주었습니다.&lt;/p&gt;&#xA;&lt;p&gt;대부분의 프로그래머는 컴퓨터가 어떻게 작동하는지 안다고 생각하지만, &lt;strong&gt;그들은 단지 소프트웨어가 어떻게 작동하는지 알 뿐입니다.&lt;/strong&gt; 이 프로그래머들은 &lt;a href=&#34;http://en.wikipedia.org/wiki/Interrupt_handler&#34;&gt;인터럽트 서비스 루틴&lt;/a&gt;이 어떻게 호출되는지, 컴퓨터가 두 숫자를 어떻게 더하는지, 마이크로프로세서가 다음 명령어를 RAM에 어떻게 로드하는지 정말로 알지 못합니다. 하지만 괜찮습니다. 그럴 필요도 없고, 관심도 없습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Java 스레드 성능 vs. 가상 스레드 vs. Kotlin 코루틴</title>
      <link>https://philipjkim.github.io/posts/20250630-java-thread-vs-virtual-thread-vs-kotlin-coroutine/</link>
      <pubDate>Mon, 30 Jun 2025 14:40:25 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250630-java-thread-vs-virtual-thread-vs-kotlin-coroutine/</guid>
      <description>&lt;p&gt;원문 (아래 리스트 순으로 번역되어 있음. Translated by Google Gemini) :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-03/Java-Thread-Performance-vs.-Virtual-Threads&#34;&gt;https://blog.behzadian.info/2024-05-03/Java-Thread-Performance-vs.-Virtual-Threads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-06/Java-Virtual-Threads-Performance-vs.-Kotlin-Coroutines&#34;&gt;https://blog.behzadian.info/2024-05-06/Java-Virtual-Threads-Performance-vs.-Kotlin-Coroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-26/Java-Thread-Performance-vs.-Virtual-Threads-Part-2&#34;&gt;https://blog.behzadian.info/2024-05-26/Java-Thread-Performance-vs.-Virtual-Threads-Part-2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;java-스레드-vs-가상-스레드-pt1&#34;&gt;Java 스레드 vs. 가상 스레드 Pt.1&lt;/h2&gt;&#xA;&lt;p&gt;면접 중에 한 면접관이 저에게 Java 스레드와 가상 스레드의 성능 차이에 대해 물었습니다. 저는 가상 스레드가 실제로는 JVM이 처리하는 경량 스레드이기 때문에 더 빠를 것이라고 답했지만, 둘 사이의 정확한 성능 차이가 궁금했습니다. 그래서 가상 스레드의 성능 향상을 확인하기 위해 간단한 벤치마크를 수행했습니다.&lt;/p&gt;&#xA;&lt;p&gt;이것은 매우 간단한 테스트입니다. 저는 매우 많은 수의 스레드와 가상 스레드를 생성하며, 각각이 완료되는 데 5초가 걸리도록 했습니다. 그런 다음 앱 실행 시간을 계산합니다. 이 벤치마크에 사용한 Java 코드는 다음과 같습니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 오마하 하이-로우 규칙 - 오마하 하이-로우 (PLO8) 플레이 방법</title>
      <link>https://philipjkim.github.io/posts/20250630-omaha-hi-lo-rules/</link>
      <pubDate>Mon, 30 Jun 2025 10:09:24 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250630-omaha-hi-lo-rules/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/poker-rules/omaha-hi-lo.htm&#34;&gt;https://www.pokernews.com/poker-rules/omaha-hi-lo.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;오마하-하이-로우-포커란-무엇인가요&#34;&gt;오마하 하이 로우 포커란 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;팟-리밋 오마하 (또는 &amp;ldquo;오마하 하이&amp;rdquo;) 플레이 방법을 알고 있다면, 오마하 하이-로우 플레이 방법을 배우는 데 거의 다 왔습니다.&lt;/p&gt;&#xA;&lt;p&gt;이름에서 알 수 있듯이 오마하 하이-로우는 오마하 포커의 &amp;ldquo;스플릿-팟&amp;rdquo; 버전으로, 플레이어는 팟의 &amp;ldquo;하이&amp;quot;와 &amp;ldquo;로우&amp;rdquo; 두 절반을 놓고 경쟁합니다. 오마하 하이-로우는 일반적으로 고정 리밋 베팅으로 플레이되며, 종종 &lt;a href=&#34;https://www.pokernews.com/poker-rules/horse.htm&#34;&gt;H.O.R.S.E.&lt;/a&gt; (오마하 하이-로우가 &amp;ldquo;O&amp;quot;인 경우) 또는 인기 있는 8-게임 믹스와 같은 &amp;ldquo;믹스 게임&amp;rdquo; 형식으로 나타납니다.&lt;/p&gt;&#xA;&lt;p&gt;팟-리밋 및 노-리밋 버전의 오마하 하이-로우도 인기가 많으며, 특히 온라인 현금 게임이나 토너먼트로 인기가 많습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 오마하 소개 - 가장 운이 좋은 사람이 항상 이길까?</title>
      <link>https://philipjkim.github.io/posts/20250626-introduction-to-omaha/</link>
      <pubDate>Thu, 26 Jun 2025 09:02:35 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250626-introduction-to-omaha/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/strategy/omaha-luckiest-always-win-2086.htm&#34;&gt;https://www.pokernews.com/strategy/omaha-luckiest-always-win-2086.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;소개&#34;&gt;소개&lt;/h2&gt;&#xA;&lt;p&gt;저는 최근에 $2/$4 리밋 오마하 하이 게임을 플레이했고, 나중에 그 게임의 다른 플레이어와 그것에 대해 이야기했습니다. 우리의 토론 주제는 낮은 레벨의 리밋 오마하가 온라인에서 이기기 가장 어려운 게임 중 하나인지 여부였습니다. 우리는 그 세션에서 각 핸드의 승자가 거의 예외 없이 플랍에서 또는 그 이전에 한참 뒤처져 있었다는 것을 알게 되었기 때문에 이 질문을 했습니다. 플랍, 턴, 리버의 카드는 프리미엄 핸드로 강하게 베팅하는 플레이어를 &amp;ldquo;뽑아내는&amp;rdquo; 것처럼 보였습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 2025년 AI 프롬프트 엔지니어링: 무엇이 효과적이고 무엇이 그렇지 않은가</title>
      <link>https://philipjkim.github.io/posts/20250625-ai-prompt-engineering-in-2025/</link>
      <pubDate>Wed, 25 Jun 2025 20:03:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-ai-prompt-engineering-in-2025/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.lennysnewsletter.com/p/ai-prompt-engineering-in-2025-sander-schulhoff&#34;&gt;https://www.lennysnewsletter.com/p/ai-prompt-engineering-in-2025-sander-schulhoff&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/eKuFqQKYRrA?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;이-에피소드에서-배우게-될-내용&#34;&gt;이 에피소드에서 배우게 될 내용&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;가장 효과적인 5가지 프롬프트 엔지니어링 기법&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;역할 프롬프트(role prompting)&amp;rdquo; 및 AI 위협이 더 이상 작동하지 않는 이유 및 대신해야 할 일&lt;/li&gt;&#xA;&lt;li&gt;두 가지 유형의 프롬프트 엔지니어링: 대화형 및 제품/시스템 프롬프트&lt;/li&gt;&#xA;&lt;li&gt;프롬프트 인젝션 및 AI 레드 팀에 대한 입문서 - 여전히 최고 모델을 속이는 실제 탈옥(jailbreak) 전술 포함&lt;/li&gt;&#xA;&lt;li&gt;AI 에이전트와 로봇이 다음 주요 보안 위협이 될 이유&lt;/li&gt;&#xA;&lt;li&gt;AI 레드 팀 및 프롬프트 엔지니어링을 시작하는 방법&lt;/li&gt;&#xA;&lt;li&gt;AI 제품에 적용할 수 있는 실용적인 방어책&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;몇-가지-핵심-내용&#34;&gt;몇 가지 핵심 내용&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;프롬프트 엔지니어링은 여전히 매우 활발하며 그 어느 때보다 중요합니다.&lt;/strong&gt; 오히려 기업들이 사용자 대면 기능 및 핵심 기능을 구동하기 위해 LLM에 의존함에 따라 더욱 중요해졌습니다. Sander는 프롬프트 품질이 AI 성능을 좌우할 수 있는 방법, 특히 제품 전반에 걸쳐 확장될 때의 중요성을 설명합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;프롬프트 엔지니어링에는 &amp;ldquo;대화형&amp;quot;과 &amp;ldquo;제품 중심형&amp;quot;이라는 두 가지 명확한 유형이 있습니다.&lt;/strong&gt; 대부분의 사람들은 프롬프팅을 ChatGPT와 채팅하는 것으로 생각하지만, Sander는 진정한 영향력은 제품 내에서 고성능 프롬프트를 만드는 것에서 온다고 설명합니다. 이러한 프롬프트는 대규모로 사용되고, 수백만 번 실행되며, 프로덕션 코드처럼 강화되고 최적화되어야 합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;ldquo;Few-shot 프롬프팅&amp;quot;은 정확도를 0%에서 90%로 향상시킬 수 있습니다.&lt;/strong&gt; 가장 강력한 기술 중 하나는 모델에 정확히 원하는 것의 예시를 보여주는 것입니다. 이를 few-shot 프롬프팅이라고 합니다. Sander는 이 단일 기술이 몇 가지 예시-레이블 쌍을 추가하는 것만으로 의료 코딩 사용 사례를 완전한 실패에서 거의 완벽한 결과로 바꾸어 놓았음을 공유합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할 프롬프트(예: &amp;ldquo;당신은 수학 교수입니다&amp;hellip;&amp;quot;)는 대부분의 사람들이 생각하는 것과 달리 대체로 비효율적입니다.&lt;/strong&gt; Sander는 역할 프롬프트가 어조나 글쓰기 스타일에는 도움이 될 수 있지만, 정확도를 높이는 데는 거의 효과가 없음을 보여주는 연구를 분석합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;분해(decomposition) 및 자기 비판(self-criticism)과 같은 고급 기술은 더 나은 성능을 끌어냅니다.&lt;/strong&gt; Sander는 모델에 먼저 문제를 하위 문제로 분해하거나(분해) 자신의 답변을 비판하도록 요청하는 것이 어떻게 더 똑똑하고 정확한 결과로 이어질 수 있는지 설명합니다. 이는 다단계 추론이 필요한 에이전트와 같은 설정에서 특히 가치가 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;컨텍스트(&amp;ldquo;추가 정보&amp;rdquo;)는 과소평가되어 있지만 엄청난 영향을 미칩니다.&lt;/strong&gt; 모델에 더 관련성 있는 배경 정보를 제공하는 것만으로도 성능을 크게 향상시킬 수 있습니다. Sander는 특히 올바른 형식과 순서로 포함되었을 때 추가 데이터(예: 이력, 연구 논문 또는 과거 상호 작용)를 포함하는 것이 프롬프트의 성공 여부를 결정했던 사례를 공유합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;프롬프트 인젝션은 실제적이고 위험하며 전통적인 의미에서는 해결 불가능합니다.&lt;/strong&gt; 우리는 공격자들이 어떻게 LLM을 &amp;ldquo;탈옥&amp;quot;시켜 유해하거나 제한되거나 의도치 않은 응답을 출력하도록 속이는지 살펴봅니다. 이러한 공격은 종종 &amp;ldquo;X를 하지 마시오&amp;quot;와 같은 전통적인 방어 수단을 우회합니다. 그리고 Sander (심지어 Sam Altman)에 따르면 만능 해결책은 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sander는 세계 최대 규모의 AI 레드 팀 대회인 HackAPrompt를 운영합니다.&lt;/strong&gt; 60만 개 이상의 프롬프트가 수집되었고 OpenAI 및 Anthropic와의 지속적인 협력을 통해 Sander의 플랫폼은 실제 LLM 스트레스 테스트의 중심에 있습니다. 이는 크라우드소싱 보안과 게임 메커니즘의 독특한 조합이며, 연구소들이 AI 안전에 대해 생각하는 방식을 형성하고 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;에이전트 기반 AI 시스템은 챗봇보다 공격에 훨씬 더 취약합니다.&lt;/strong&gt; 오늘날의 프롬프트 인젝션에 대한 우려는 시작에 불과합니다. AI 에이전트가 항공편을 예약하고, 이메일을 보내고, 심지어 인간형으로 돌아다니기 시작하면 위험은 배가됩니다. Sander는 에이전트 보안이 다음 개척지인 이유와 대부분의 팀이 준비되지 않은 이유를 공유합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;ldquo;할머니&amp;rdquo; 트릭, 오타, 난독화는 여전히 최첨단 모델을 무너뜨립니다.&lt;/strong&gt; 가장 발전된 LLM조차도 놀랍도록 간단한 해킹에 속을 수 있습니다. Sander는 감정 조작(예: &amp;ldquo;할머니가 해주던 것처럼 말해줘&amp;rdquo;), 인코딩된 입력, 창의적인 문구를 포함하여 여전히 작동하는 탈옥 기술을 설명합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;대부분의 회사는 손상된 방어책을 사용하고 있습니다.&lt;/strong&gt; Sander는 &amp;ldquo;프롬프트 분리&amp;quot;나 &amp;ldquo;악의적인 입력 무시&amp;quot;와 같은 문구를 추가하는 것이 왜 작동하지 않는지 분석합니다. 가드레일은 쉽게 우회되며, 현재 분류기는 인코딩된 공격을 잡아낼 지능이 부족한 경우가 많습니다. 보안의 미래는 모델 수준이어야 하며, 덧붙이는 방식이 아니어야 합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;위험에도 불구하고 AI의 잠재력은 엄청나며 추구할 가치가 있습니다.&lt;/strong&gt; Sander는 보안을 중요하게 생각하지만, 종말론자는 아닙니다. 그는 우리가 책임감 있게 구축한다면 AI가 생명을 구하고(특히 의료 분야에서), 생산성을 높이며, 실제 문제를 해결할 것이라고 믿습니다. 발전을 멈추는 것이 답이 아니라, 더 스마트하고 안전한 개발이 답입니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Sander Schulhoff&lt;/strong&gt;는 원조 프롬프트 엔지니어입니다. 그는 인터넷 최초의 프롬프트 엔지니어링 가이드를 만들었고(ChatGPT 출시 두 달 전), 최근에는 OpenAI, Microsoft, Google, Princeton, Stanford와 공동 저술하여 1,500개 이상의 학술 논문을 분석하고 200개 이상의 프롬프트 기법을 다룬 프롬프트 엔지니어링에 대한 가장 포괄적인 연구를 수행했습니다. 또한 그는 OpenAI와 협력하여 최초이자 최대 규모의 AI 레드 팀 대회인 HackAPrompt를 운영하고 있으며, 이는 가장 최첨단 프롬프트 인젝션 기법(즉, LLM이 하지 말아야 할 일을 하도록 만드는 방법)을 발견하는 데 도움을 줍니다. Sander는 Maven에서 AI 레드 팀을 가르치고, AI 회사에 보안 자문을 제공하며, 수백만 명에게 가장 최첨단 프롬프트 엔지니어링 기법을 교육했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: Java 23: 성능 및 생산성 향상 (2024년 9월)</title>
      <link>https://philipjkim.github.io/posts/20250625-java-23-new-features/</link>
      <pubDate>Wed, 25 Jun 2025 15:27:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-java-23-new-features/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.hungrycoders.com/blog/java-9-23-unleashed-the-developers-cheat-sheet-to-modern-java&#34;&gt;https://www.hungrycoders.com/blog/java-9-23-unleashed-the-developers-cheat-sheet-to-modern-java&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;주요-기능&#34;&gt;주요 기능&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;패턴, instanceof, switch에서의 Primitive Types (미리보기): 패턴 매칭을 기본 타입으로 확장하여 상용구 코드(boilerplate code)를 줄입니다.&lt;/li&gt;&#xA;&lt;li&gt;Scoped Values (세 번째 미리보기): 제한된 수명을 가진 변수를 도입하여 메모리 관리를 개선합니다.&lt;/li&gt;&#xA;&lt;li&gt;Structured Concurrency (세 번째 미리보기): 구조화된 API를 통해 스레드 관리를 강화하여 동시성 처리를 단순화합니다.&lt;/li&gt;&#xA;&lt;li&gt;Markdown Documentation Comments: Javadoc에 Markdown 지원을 추가하여 문서의 가독성을 향상시킵니다.&lt;/li&gt;&#xA;&lt;li&gt;ZGC를 기본 가비지 컬렉터로: 세대별 Z Garbage Collector (ZGC)가 기본값으로 설정되어 성능과 응답성을 향상시킵니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;개요-요약&#34;&gt;개요 요약&lt;/h2&gt;&#xA;&lt;p&gt;Java 23은 성능 및 개발자 생산성 향상 추세를 이어갑니다. 기본 타입을 지원하는 패턴 매칭을 개선하고, 더 안전한 메모리 관리를 위해 Scoped Values를 도입하며, 구조화된 API를 통해 동시성을 단순화합니다. Markdown 문서화는 개발자 경험을 개선하고, ZGC가 기본 컬렉터가 되어 더 나은 성능과 낮은 지연 시간을 보장합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 사이클링에서 이상적인 케이던스 설명: 페달링이 너무 빠르거나 느린가요?</title>
      <link>https://philipjkim.github.io/posts/20250625-the-ideal-cadence-for-cycling-explained/</link>
      <pubDate>Wed, 25 Jun 2025 14:55:36 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-the-ideal-cadence-for-cycling-explained/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.cyclingweekly.com/fitness/why-amateurs-shouldnt-try-to-pedal-like-chris-froome-191779&#34;&gt;https://www.cyclingweekly.com/fitness/why-amateurs-shouldnt-try-to-pedal-like-chris-froome-191779&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;자전거를 처음 배우고 나서 균형 잡기나 핸들 조작과 함께 크게 생각해 본 적이 없을 수도 있지만, 라이딩 시 &lt;strong&gt;사이클링 케이던스&lt;/strong&gt;는 사이클링 &lt;strong&gt;성능에 상당한 영향&lt;/strong&gt;을 미칠 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;최대 파워 생산부터 장거리 지구력 노력, 심지어 부상 예방에 이르기까지 페달을 돌리는 속도에 주의를 기울여야 할 많은 이유가 있습니다. 게다가 세션에서 RPM을 다양하게 섞는 훈련 이점은 당신을 놀라게 할 수도 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;이 지표에는 처음 생각했던 것보다 훨씬 더 많은 것이 있으며, 잠재적으로 오해의 소지가 있는 연구도 많습니다. 따라서 이상적인 사이클링 케이던스와 개선 방법에 대해 알아야 할 모든 세부 사항을 자세히 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: AI를 이용한 게임 디컴파일 개발 여정</title>
      <link>https://philipjkim.github.io/posts/20250625-development-journey-on-game-decompilation-using-ai/</link>
      <pubDate>Wed, 25 Jun 2025 14:35:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-development-journey-on-game-decompilation-using-ai/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://macabeus.medium.com/game-decompilation-using-ai-4d47b65f8852&#34;&gt;https://macabeus.medium.com/game-decompilation-using-ai-4d47b65f8852&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;안녕하세요, 저는 &lt;a href=&#34;https://github.com/macabeus&#34;&gt;Macabeus&lt;/a&gt;입니다. 이 글에서는 제가 오래된 게임을 디컴파일하기 위해 AI를 사용한 개발 여정을 공유하고, 이 재미있는 분야에서의 개인적인 연구를 탐색해 보려고 합니다!&lt;/p&gt;&#xA;&lt;h2 id=&#34;게임-디컴파일이란&#34;&gt;게임 디컴파일이란?&lt;/h2&gt;&#xA;&lt;p&gt;간단히 말해, &lt;em&gt;디컴파일&lt;/em&gt;은 저수준 코드를 고수준 코드로 변환하는 과정입니다. 예를 들어, 어셈블리에서 C로 변환하는 것입니다.&lt;/p&gt;&#xA;&lt;p&gt;IDA Pro나 Ghidra와 같은 유명한 리버스 엔지니어링 도구들을 통해 이를 알고 계실 수도 있습니다. 하지만 이 글에서 제가 &lt;em&gt;디컴파일&lt;/em&gt;이라고 언급할 때는, &lt;em&gt;일치하는 디컴파일(matching decompilation)&lt;/em&gt; 에 대해 이야기하는 것입니다. 이 더 구체적인 용어는 컴파일했을 때 대상 어셈블리와 &lt;strong&gt;정확히&lt;/strong&gt; 일치하면서도, 인간이 읽을 수 있는(human-readable) 고수준 코드를 작성하고자 함을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 지금 바로 사용할 수 있는 최고의 AI 코딩 도구</title>
      <link>https://philipjkim.github.io/posts/20250624-the-best-ai-coding-tools-you-can-use-right-now/</link>
      <pubDate>Tue, 24 Jun 2025 19:52:16 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250624-the-best-ai-coding-tools-you-can-use-right-now/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://spectrum.ieee.org/best-ai-coding-tools&#34;&gt;https://spectrum.ieee.org/best-ai-coding-tools&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;AI 기반 &lt;a href=&#34;https://spectrum.ieee.org/tag/software-development&#34;&gt;소프트웨어 개발&lt;/a&gt; 도구는 빠르게 발전하고 있습니다. 향상된 &lt;a href=&#34;https://spectrum.ieee.org/tag/autocomplete&#34;&gt;자동 완성&lt;/a&gt;으로 시작했던 것이 애플리케이션을 작성하고, 문제를 디버깅하고, 전체 코드베이스를 관리할 수 있는(또는 적어도 시도할 수 있는) &lt;a href=&#34;https://spectrum.ieee.org/tag/ai-agents&#34;&gt;AI 에이전트&lt;/a&gt;로 확장되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;소프트웨어 개발 회사 Frescher Southern LTD의 설립자이자 수석 엔지니어인 &lt;a href=&#34;https://www.linkedin.com/in/chasing/&#34;&gt;Josh Knowles&lt;/a&gt;는 “이것은 놀라울 정도로 빨랐습니다. 우리는 지금 위상 변화와 같은 것을 겪고 있습니다.”라고 말합니다.&lt;/p&gt;&#xA;&lt;p&gt;이러한 변화는 이 새로운 분야의 왕이 되기 위해 경쟁하는 AI 기반 코딩 도구들을 낳았습니다. 선도적인 도구 중 일부는 불과 몇 년 전에는 존재하지도 않던 &lt;a href=&#34;https://spectrum.ieee.org/tag/startups&#34;&gt;스타트업&lt;/a&gt;에서 나왔습니다. 그러나 거대 기술 기업들도 가만히 있지 않습니다. 다른 최고의 옵션들은 &lt;a href=&#34;https://spectrum.ieee.org/tag/microsoft&#34;&gt;Microsoft&lt;/a&gt;와 같은 기존 플레이어와 &lt;a href=&#34;https://spectrum.ieee.org/tag/anthropic&#34;&gt;Anthropic&lt;/a&gt;과 같은 자금력 있는 AI 연구소에서 제공됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 사이클링 지구력을 키우는 방법: 더 멀리, 더 빨리 달리기 위한 7가지 팁</title>
      <link>https://philipjkim.github.io/posts/20250624-how-to-improve-your-cycling-endurance-in-limited-time/</link>
      <pubDate>Tue, 24 Jun 2025 10:16:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250624-how-to-improve-your-cycling-endurance-in-limited-time/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.bikeradar.com/advice/fitness-and-training/cycling-endurance&#34;&gt;https://www.bikeradar.com/advice/fitness-and-training/cycling-endurance&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;지구력 사이클링은 단순히 안장에 오래 앉아 있는 것 이상입니다. 제대로 훈련하면 더 먼 거리를 더 빨리 달릴 수 있고, 이는 모든 종류의 라이딩에 도움이 됩니다. 여기 지구력 사이클링 훈련을 최대한 활용하고 사이클링 지구력을 키우기 위한 최고의 팁들이 있습니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-꾸준히-타세요&#34;&gt;1. 꾸준히 타세요&lt;/h3&gt;&#xA;&lt;p&gt;지구력 향상은 하룻밤 사이에 이루어지지 않습니다. 사이클링 코치인 릭 스턴(Ric Stern)은 &amp;ldquo;일관성은 왕&amp;quot;이라고 말합니다. &amp;ldquo;일주일에 한 번 장거리 라이딩을 하는 것보다, 일주일에 3~4번 짧은 라이딩을 하는 것이 훨씬 더 효과적일 것&amp;rdquo; 이라고 그는 덧붙입니다. 신체가 훈련에 적응하려면 규칙적인 훈련 자극이 필요합니다. 일주일에 여러 번 타면 심혈관계, 에너지 시스템 및 근육이 더 효율적으로 작동하도록 자극합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 현재 나의 LLM 코드 생성 워크플로우</title>
      <link>https://philipjkim.github.io/posts/20250623-my-llm-codegen-workflow-atm/</link>
      <pubDate>Mon, 23 Jun 2025 17:33:07 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250623-my-llm-codegen-workflow-atm/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/&#34;&gt;https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;요약:&lt;/strong&gt; 스펙을 브레인스토밍하고, 계획을 계획한 다음, LLM 코드 생성을 사용하여 실행합니다. 개별적인 루프. 그리고 마법&lt;/p&gt;&#xA;&lt;p&gt;저는 LLM을 사용하여 아주 많은 소규모 제품을 만들어 왔습니다. 재미있고 유용했지만, 엄청난 시간을 낭비할 수 있는 함정들이 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;얼마 전 한 친구가 제가 LLM을 어떻게 사용하여 소프트웨어를 작성하는지 물었습니다. 저는 &amp;ldquo;이런. 시간이 얼마나 있으신데요!&amp;ldquo;라고 생각했고, 그래서 이 글을 쓰게 되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;(추신: AI를 싫어하는 분이라면 맨 끝으로 스크롤하세요)&lt;/p&gt;&#xA;&lt;p&gt;저는 많은 개발자 친구들과 이 주제에 대해 이야기하는데, 우리 모두는 어느 방향으로든 약간의 변형을 가미한 비슷한 접근 방식을 가지고 있습니다. 여기 저의 워크플로우가 있습니다. 이것은 저 자신의 작업, 친구들과의 대화(Nikete, Kanno, Obra, Kris, Erik 고마워요), 그리고 여러 끔찍한 인터넷 나쁜 곳들에서 공유된 많은 모범 사례들을 바탕으로 만들어졌습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>번역글: 에단 몰릭이 말하는 AI와의 &#34;공동 지능&#34;을 위한 4가지 규칙</title>
      <link>https://philipjkim.github.io/posts/20250623-the-four-rules-of-co-intelligence-with-ai/</link>
      <pubDate>Mon, 23 Jun 2025 13:09:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250623-the-four-rules-of-co-intelligence-with-ai/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.forbes.com/sites/peterhigh/2024/05/07/ethan-mollick-on-the-four-rules-of-co-intelligence-with-ai/&#34;&gt;https://www.forbes.com/sites/peterhigh/2024/05/07/ethan-mollick-on-the-four-rules-of-co-intelligence-with-ai/&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;에단 몰릭은 펜실베이니아 대학교 와튼 스쿨의 부교수로, 기업가 정신에서의 혁신을 연구하고 가르치며 인공지능이 업무와 교육에 미치는 영향을 분석합니다. 연구와 강의 외에도, 에단은 게임, 시뮬레이션, AI를 사용하여 교육을 민주화하려는 와튼 인터랙티브(Wharton Interactive)를 이끌고 있습니다. 학계에 몸담기 전에는 스타트업을 공동 창업했으며, 현재는 기업가와 다른 경영진들의 자문 역할을 하고 있습니다. 에단의 최신 저서로는 &amp;lsquo;공동 지능: AI와 함께 생활하고 일하기(Co-Intelligence: Living and Working with AI)&amp;lsquo;가 있습니다. 또한 그는 13만 4천 명 이상의 팔로워를 보유한 인기 블로그 &amp;lsquo;OneUsefulThing&amp;rsquo;의 저자이기도 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://philipjkim.github.io/dev/hoola-calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://philipjkim.github.io/dev/hoola-calculator/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;ko&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xA;    &lt;title&gt;훌라 카드 합계 계산기&lt;/title&gt;&#xA;        &lt;style&gt;&#xA;        body {&#xA;            font-family: sans-serif;&#xA;            display: flex;&#xA;            flex-direction: column;&#xA;            align-items: center;&#xA;            padding: 20px;&#xA;        }&#xA;        h1 {&#xA;            margin-bottom: 20px;&#xA;            font-size: 24px;&#xA;        }&#xA;        .card-buttons {&#xA;            /* 수정된 부분: 3개씩 한 줄에 표시되도록 설정 */&#xA;            display: grid;&#xA;            grid-template-columns: repeat(3, 1fr); /* 항상 3개의 열 */&#xA;            gap: 10px;&#xA;            margin-bottom: 20px;&#xA;            width: 100%; /* 부모 너비에 맞춤 */&#xA;            max-width: 600px; /* 최대 너비 유지 */&#xA;            box-sizing: border-box; /* 패딩과 보더가 너비에 포함되도록 */&#xA;            padding: 0 10px; /* 좌우 잘림 방지를 위해 약간의 패딩 추가 */&#xA;        }&#xA;        .card-button {&#xA;            padding: 15px;&#xA;            border: 1px solid #ccc;&#xA;            border-radius: 8px;&#xA;            /* background-color: #f0f0f0; */&#xA;            text-align: center;&#xA;            cursor: pointer;&#xA;            font-size: 18px;&#xA;            box-sizing: border-box;&#xA;            /* 최소 너비 제한을 없애고 1fr로만 관리하여 유연하게 */&#xA;            min-width: 0; /* flex/grid 아이템의 기본 min-width를 재정의 */&#xA;        }&#xA;        .card-button.selected {&#xA;            background-color: #ddd;&#xA;        }&#xA;        .selected-cards {&#xA;            margin-bottom: 15px;&#xA;            font-size: 16px;&#xA;        }&#xA;        .result {&#xA;            font-weight: bold;&#xA;            font-size: 20px;&#xA;            margin-bottom: 20px;&#xA;        }&#xA;        button {&#xA;            padding: 12px 25px;&#xA;            border: none;&#xA;            border-radius: 8px;&#xA;            background-color: #7d601c;&#xA;            /* color: white; */&#xA;            cursor: pointer;&#xA;            font-size: 18px;&#xA;        }&#xA;        button:hover {&#xA;            background-color: #4f3d12;&#xA;        }&#xA;        /* 추가: 화면이 매우 좁을 경우를 위한 미디어 쿼리 (필요시) */&#xA;        @media (max-width: 380px) { /* 더 좁은 화면 (예: 아이폰 SE1) */&#xA;            .card-buttons {&#xA;                gap: 5px; /* 버튼 간격 줄이기 */&#xA;                padding: 0 5px; /* 패딩도 줄이기 */&#xA;            }&#xA;            .card-button {&#xA;                font-size: 16px; /* 폰트 사이즈 줄이기 */&#xA;                padding: 10px; /* 패딩 줄이기 */&#xA;            }&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;훌라 카드 합계 계산기&lt;/h1&gt;&#xA;    &lt;div class=&#34;card-buttons&#34;&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;1&#34; data-alt-value=&#34;14&#34;&gt;A&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;2&#34;&gt;2&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;3&#34;&gt;3&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;4&#34;&gt;4&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;5&#34;&gt;5&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;6&#34;&gt;6&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;7&#34;&gt;7&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;8&#34;&gt;8&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;9&#34;&gt;9&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;10&#34;&gt;10&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;11&#34;&gt;J&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;12&#34;&gt;Q&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;13&#34;&gt;K&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;selected-cards&#34;&gt;선택한 카드: &lt;/div&gt;&#xA;    &lt;div class=&#34;result&#34;&gt;총합: &lt;/div&gt;&#xA;    &lt;button id=&#34;reset-button&#34;&gt;초기화&lt;/button&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        const cardButtons = document.querySelectorAll(&#39;.card-button&#39;);&#xA;        const selectedCardsDiv = document.querySelector(&#39;.selected-cards&#39;);&#xA;        const resultDiv = document.querySelector(&#39;.result&#39;);&#xA;        const resetButton = document.getElementById(&#39;reset-button&#39;);&#xA;        let selectedCards = [];&#xA;&#xA;        cardButtons.forEach(button =&gt; {&#xA;            button.addEventListener(&#39;click&#39;, function() {&#xA;                const value = parseInt(this.dataset.value);&#xA;                const altValue = this.dataset.altValue ? parseInt(this.dataset.altValue) : null;&#xA;                selectedCards.push({ value: value, altValue: altValue, display: this.textContent });&#xA;                this.classList.add(&#39;selected&#39;);&#xA;                updateDisplay();&#xA;                calculateSum();&#xA;            });&#xA;        });&#xA;&#xA;        resetButton.addEventListener(&#39;click&#39;, function() {&#xA;            selectedCards = [];&#xA;            cardButtons.forEach(button =&gt; button.classList.remove(&#39;selected&#39;));&#xA;            updateDisplay();&#xA;            calculateSum();&#xA;        });&#xA;&#xA;        function updateDisplay() {&#xA;            selectedCardsDiv.textContent = &#39;선택한 카드: &#39; + selectedCards.map(card =&gt; card.display).join(&#39;, &#39;);&#xA;        }&#xA;&#xA;        function calculateSum() {&#xA;            if (selectedCards.length === 0) {&#xA;                resultDiv.textContent = &#39;총합: &#39;;&#xA;                return;&#xA;            }&#xA;&#xA;            const hasAce = selectedCards.some(card =&gt; card.display === &#39;A&#39;);&#xA;&#xA;            if (hasAce) {&#xA;                let sumWithAas1 = 0;&#xA;                let sumWithAas14 = 0;&#xA;                selectedCards.forEach(card =&gt; {&#xA;                    sumWithAas1 += (card.display === &#39;A&#39; ? 1 : card.value);&#xA;                    sumWithAas14 += (card.display === &#39;A&#39; ? 14 : card.value);&#xA;                });&#xA;                resultDiv.textContent = &#39;총합: &#39; + sumWithAas1 + &#39; / &#39; + sumWithAas14;&#xA;            } else {&#xA;                const totalSum = selectedCards.reduce((sum, card) =&gt; sum + card.value, 0);&#xA;                resultDiv.textContent = &#39;총합: &#39; + totalSum;&#xA;            }&#xA;        }&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://philipjkim.github.io/dev/polymer-image-slider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://philipjkim.github.io/dev/polymer-image-slider/</guid>
      <description>&lt;!doctype html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;  &lt;title&gt;polymer-image-slider demo&lt;/title&gt;&#xA;&#xA;  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, minimum-scale=1.0, initial-scale=1, user-scalable=yes&#34;&gt;&#xA;  &lt;meta name=&#34;mobile-web-app-capable&#34; content=&#34;yes&#34;&gt;&#xA;  &lt;meta name=&#34;apple-mobile-web-app-capable&#34; content=&#34;yes&#34;&gt;&#xA;&#xA;  &lt;script src=&#34;bower_components/webcomponentsjs/webcomponents-lite.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;link rel=&#34;shortcut icon&#34; href=&#34;./favicon.ico&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/polymer/polymer.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/iron-demo-helpers/demo-snippet.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/iron-demo-helpers/demo-pages-shared-styles.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/paper-styles/color.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/polymer-image-slider/polymer-image-slider.html&#34;&gt;&#xA;  &lt;style is=&#34;custom-style&#34; include=&#34;demo-pages-shared-styles&#34;&gt;&#xA;    .centered:not([style-scope]):not(.style-scope) {&#xA;      max-width: 100%;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body unresolved&gt;&#xA;&lt;div class=&#34;vertical-section-container centered&#34;&gt;&#xA;  &lt;h3&gt;paper-sliders have &lt;code&gt;images&lt;/code&gt; attribute,&#xA;    and dynamically change images by modifying the attribute value.&lt;/h3&gt;&#xA;  &lt;demo-snippet&gt;&#xA;    &lt;template&gt;&#xA;      &lt;!--&#xA;      max-width is adjustable via CSS variable `--image-slider-max-width`.&#xA;      --&gt;&#xA;      &lt;style is=&#34;custom-style&#34;&gt;&#xA;        #slider {&#xA;          --image-slider-max-width: 300px;&#xA;        }&#xA;      &lt;/style&gt;&#xA;&#xA;      &lt;!--&#xA;      Use single-quotes for `images` attribute - the value should be a valid JSON string.&#xA;&#xA;      &lt;image-slider id=&#34;slider&#34; images=&#39;[&#34;1.jpg&#34;,&#34;2.jpg&#34;]&#39;&gt;&lt;/image-slider&gt;&#xA;      --&gt;&#xA;      &lt;image-slider id=&#34;slider&#34; images=&#39;[&#34;1.jpg&#34;,&#34;2.jpg&#34;]&#39;&gt;&lt;/image-slider&gt;&#xA;&#xA;      &lt;!-- Manipulation using JS --&gt;&#xA;      &lt;button id=&#34;btn-change&#34; onclick=&#34;changeImages();&#34;&gt;Change images&lt;/button&gt;&#xA;      &lt;button id=&#34;btn-bullet&#34; onclick=&#34;toggleBullet();&#34;&gt;Show/hide bullets&lt;/button&gt;&#xA;&#xA;      &lt;script&gt;&#xA;        function changeImages() {&#xA;          var imageSet1 = [&#34;1.jpg&#34;,&#34;2.jpg&#34;];&#xA;          var imageSet2 = [&#34;3.jpg&#34;,&#34;4.jpg&#34;,&#34;5.jpg&#34;];&#xA;          var images = document.querySelector(&#39;#slider&#39;).images;&#xA;          if (images.length == 2) {&#xA;            document.querySelector(&#39;#slider&#39;).images = imageSet2;&#xA;          } else {&#xA;            document.querySelector(&#39;#slider&#39;).images = imageSet1;&#xA;          }&#xA;        }&#xA;&#xA;        function toggleBullet() {&#xA;          var noBullets = document.querySelector(&#39;#slider&#39;).noBullets;&#xA;          document.querySelector(&#39;#slider&#39;).noBullets = !noBullets;&#xA;        }&#xA;      &lt;/script&gt;&#xA;    &lt;/template&gt;&#xA;  &lt;/demo-snippet&gt;&#xA;&#xA;  &lt;h3&gt;If you want to show images in actual size,&#xA;    set &lt;code&gt;--image-slider-max-width&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;.&lt;/h3&gt;&#xA;  &lt;demo-snippet&gt;&#xA;    &lt;template&gt;&#xA;      &lt;style is=&#34;custom-style&#34;&gt;&#xA;        #slider2 {&#xA;          --image-slider-max-width: none;&#xA;        }&#xA;      &lt;/style&gt;&#xA;&#xA;      &lt;image-slider id=&#34;slider2&#34; images=&#39;[&#34;1.jpg&#34;,&#34;2.jpg&#34;]&#39;&gt;&lt;/image-slider&gt;&#xA;    &lt;/template&gt;&#xA;  &lt;/demo-snippet&gt;&#xA;&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://philipjkim.github.io/dev/vue2-flip-countdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://philipjkim.github.io/dev/vue2-flip-countdown/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=&#34;utf-8&#34; /&gt;&#xA;    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34; /&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34; /&gt;&#xA;    &lt;link rel=&#34;icon&#34; href=&#34;./favicon.ico&#34; /&gt;&#xA;    &lt;title&gt;Demo: vue2-flip-countdown&lt;/title&gt;&#xA;    &lt;link href=&#34;./css/app.30f70602.css&#34; rel=&#34;preload&#34; as=&#34;style&#34; /&gt;&#xA;    &lt;link href=&#34;./js/app.4cf28f45.js&#34; rel=&#34;preload&#34; as=&#34;script&#34; /&gt;&#xA;    &lt;link href=&#34;./js/chunk-vendors.0e314190.js&#34; rel=&#34;preload&#34; as=&#34;script&#34; /&gt;&#xA;    &lt;link href=&#34;./css/app.30f70602.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;noscript&#xA;      &gt;&lt;strong&#xA;        &gt;We&#39;re sorry but demo doesn&#39;t work properly without JavaScript enabled.&#xA;        Please enable it to continue.&lt;/strong&#xA;      &gt;&lt;/noscript&#xA;    &gt;&#xA;    &lt;div id=&#34;app&#34;&gt;&lt;/div&gt;&#xA;    &lt;script src=&#34;./js/chunk-vendors.0e314190.js&#34;&gt;&lt;/script&gt;&#xA;    &lt;script src=&#34;./js/app.4cf28f45.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
