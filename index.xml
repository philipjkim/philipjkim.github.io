<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>philipjkim</title>
    <link>https://philipjkim.github.io/</link>
    <description>Recent content on philipjkim</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Jul 2025 10:49:03 +0900</lastBuildDate>
    <atom:link href="https://philipjkim.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>King&#39;s Bounty 전략</title>
      <link>https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/</link>
      <pubDate>Thu, 17 Jul 2025 10:49:03 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://gamefaqs.gamespot.com/pc/577442-kings-bounty/faqs/7416&#34;&gt;https://gamefaqs.gamespot.com/pc/577442-kings-bounty/faqs/7416&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;이미지 출처: &lt;a href=&#34;https://shot97retro.blogspot.com/2018/06/kings-bounty-in-depth-written-amiga.html&#34;&gt;https://shot97retro.blogspot.com/2018/06/kings-bounty-in-depth-written-amiga.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;King&amp;rsquo;s Bounty 전략, (C) Chris Jones 2000&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;이름&lt;/th&gt;&#xA;          &lt;th&gt;KINGS BOUNTY&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;제작사&lt;/td&gt;&#xA;          &lt;td&gt;ELECTRONIC ARTS/NEW WORLD COMPUTING&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;장르&lt;/td&gt;&#xA;          &lt;td&gt;STRATEGY/RPG&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;연도&lt;/td&gt;&#xA;          &lt;td&gt;1990&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;난이도&lt;/td&gt;&#xA;          &lt;td&gt;EASY / NORMAL / HARD/ IMPOSSIBLE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;플랫폼&lt;/td&gt;&#xA;          &lt;td&gt;SEGA MEGADRIVE(GENESIS) / PC DOS&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;1&lt;/th&gt;&#xA;          &lt;th&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#1-%ea%b8%b0%ec%b4%88&#34;&gt;기초&lt;/a&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#2-%ec%a2%85%ec%a1%b1&#34;&gt;종족&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#3-%ec%9c%a0%eb%ac%bc&#34;&gt;유물&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#4-%ec%95%85%eb%8b%b9&#34;&gt;악당&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://philipjkim.github.io/posts/20250717-kings-bounty-strategy-guide/#5-%ec%9d%bc%eb%b0%98-%ec%a0%84%ec%88%a0&#34;&gt;일반 전술&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/98GHma4.jpg&#34; alt=&#34;title&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-기초&#34;&gt;1: 기초&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;시작:&lt;/strong&gt;&#xA;게임을 시작할 때, 성 안의 모든 유닛은 잊고 캐릭터가 보호를 위해 얻을 수 있는 최대량의 파이크맨(Pikemen)만 생각하세요. 가장 가까운 마을로 가서 보트를 빌리세요. 이 보트를 타고 현재 대륙의 가장자리를 따라 이동하며 발견하는 모든 금을 농민들에게 주어 리더십으로 전환하세요. 가능한 한 빨리 다음 대륙으로 이동하려고 노력하세요.&lt;/p&gt;</description>
    </item>
    <item>
      <title>직원들을 아기 다루듯 (babysitting) 대하지 마세요: 효과적인 리더십을 위한 가이드</title>
      <link>https://philipjkim.github.io/posts/20250717-stop-babysitting-your-employees-a-guide-to-effective-leadership/</link>
      <pubDate>Thu, 17 Jul 2025 10:21:58 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250717-stop-babysitting-your-employees-a-guide-to-effective-leadership/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.linkedin.com/pulse/stop-babysitting-your-employees-guide-effective-leadership-hakes-1ddpc/&#34;&gt;https://www.linkedin.com/pulse/stop-babysitting-your-employees-guide-effective-leadership-hakes-1ddpc/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;직원들을 실제로 이끄는 것보다 보모처럼 돌보는 데 더 많은 시간을 보낸다고 느껴본 적이 있나요? 마치 하루에 세 번씩 모든 작업 현장에 끊임없이 나타나지 않고, 모든 작은 세부 사항에 대한 프로세스를 만들지 않고, 직접 문제 해결에 뛰어들지 않으면 모든 것이 무너질 것 같은 느낌이 드나요? 네, 저도 그런 경험이 있습니다. 그것은 지치고, 좌절감을 주며, 솔직히 성공적인 사업을 구축하는 방식이 아닙니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/SucD5ko9AxI?si=cnPjs37gfPnizdj-&#34;&gt;새로운 쇼인 토랜도 온 비즈니스의 첫 번째 에피소드&lt;/a&gt;에서 저는 리더십 코치 &lt;a href=&#34;https://www.linkedin.com/in/brittanydrozd/&#34;&gt;브리트니 드로즈&lt;/a&gt;와 함께 이 너무나 흔한 문제를 분석하기 위해 앉았습니다. 그리고 솔직히 말씀드리자면, 우리는 정말 귀중한 것을 발견했습니다. 요점은 다음과 같습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>판타지 농구 작동 방식: 최고의 전략 가이드 및 팁 2025</title>
      <link>https://philipjkim.github.io/posts/20250716-how-does-fantasy-basketball-work/</link>
      <pubDate>Wed, 16 Jul 2025 13:41:01 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-how-does-fantasy-basketball-work/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.rotowire.com/basketball/advice/&#34;&gt;https://www.rotowire.com/basketball/advice/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;판타지-농구-플레이-방법&#34;&gt;판타지 농구 플레이 방법&lt;/h2&gt;&#xA;&lt;p&gt;판타지 스포츠를 처음 접하는 분이든, 새로운 도전을 찾는 노련한 판타지 풋볼 선수이든, 이 가이드는 판타지 농구에 접근하는 방법에 대해 알려드리는 것을 목표로 합니다. 성공을 위한 전략과 RotoWire가 판타지 리그 및 콘테스트에서 승리하는 데 어떻게 도움이 되는지 알아보려면 계속 읽으십시오.&lt;/p&gt;&#xA;&lt;p&gt;판타지 농구는 다른 판타지 스포츠와 동일한 기본 원리로 작동합니다. 게임은 각 리그의 선수로 팀을 구성하고 실제 경기력을 기반으로 포인트를 획득하는 것을 기반으로 합니다. 획득한 포인트는 당일, 주, 또는 시즌의 승패를 결정합니다. 판타지 농구는 일반적으로 다른 판타지 게임보다 정규 형식에서 드래프트되는 선수가 적기 때문에 다른 판타지 스포츠보다 쉽게 시작할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>추억의 명작, 제3차 슈퍼로봇대전</title>
      <link>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</link>
      <pubDate>Wed, 16 Jul 2025 11:08:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-game-review-the-3rd-super-robot-wars/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/srw3.jpg&#34; alt=&#34;srw3_poster&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;서문-우리들의-청춘을-불태웠던-강철의-거인들&#34;&gt;서문: 우리들의 청춘을 불태웠던 강철의 거인들&lt;/h3&gt;&#xA;&lt;p&gt;1993년, 슈퍼 패미컴(SFC)의 황금기. 수많은 게임들 속에서도 유독 소년들의 가슴을 뜨겁게 달구었던 이름이 있습니다. 바로 &lt;strong&gt;&amp;lsquo;제3차 슈퍼로봇대전&amp;rsquo;&lt;/strong&gt; (alias: 슈로대3, SRW3) 입니다.&lt;/p&gt;&#xA;&lt;p&gt;단순한 크로스오버를 넘어, &amp;lsquo;DC전쟁&amp;rsquo; 이후의 독자적인 오리지널 스토리를 본격적으로 펼쳐 보이며 &amp;lsquo;슈퍼로봇대전&amp;rsquo; 시리즈의 정체성을 확립한 기념비적인 작품. 건담과 마징가, 겟타로보가 나란히 서서 미지의 적과 싸운다는 꿈같은 상상을 현실로 만들어준 게임. 누군가에게는 밤새워 공략집을 뒤적이며 숨겨진 유닛을 얻었던 추억으로, 또 다른 누군가에게는 친구와 분기점에 대해 열띤 토론을 벌였던 기억으로 남아있을 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 의지할 수 있는 친구들</title>
      <link>https://philipjkim.github.io/posts/20250716-tott-friends-you-can-depend-on/</link>
      <pubDate>Wed, 16 Jul 2025 10:47:04 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-tott-friends-you-can-depend-on/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/06/tott-friends-you-can-depend-on.html&#34;&gt;https://testing.googleblog.com/2008/06/tott-friends-you-can-depend-on.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;테스트 환경에서 사용하기 너무 어렵거나 느린 것에 의존하는 코드를 테스트하고 싶을 때는, 의존성 대신 테스트 더블을 사용하세요.&#xA;더미(Dummy)는 API를 만족시키기 위해 가짜 입력 값을 전달합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITEM_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITEM_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;스텁(Stub)&lt;/strong&gt; 은 실제 객체를 오버라이드하고 하드코딩된 값을 반환합니다. 스텁만을 사용한 테스트는 상태 기반 테스트입니다. 시스템을 실행한 다음 시스템이 예상된 상태인지 확인합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ItemPricer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pricer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ItemPricer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BigDecimal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getPrice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRICE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pricer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dummyItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QUANTITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRICE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITEM_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;목(Mock)&lt;/strong&gt; 은 값을 반환할 수 있지만, 메서드가 호출되는 방식에도 신경을 씁니다. (&amp;ldquo;엄격한 목(strict mocks)&amp;rdquo; 은 메서드 호출 순서에 신경을 쓰는 반면, &amp;ldquo;유연한 목(lenient mocks)&amp;rdquo; 은 그렇지 않습니다.) 목을 사용한 테스트는 상호작용 기반 테스트입니다. 목에 기대값을 설정하고, 목은 실행될 때 기대값을 검증합니다. 이 예시는 JMock을 사용하여 목을 생성합니다(EasyMock, Mockito 도 유사합니다):&lt;/p&gt;</description>
    </item>
    <item>
      <title>은하영웅전설, 두 영웅의 리더십 비교: 라인하르트 vs 양 웬리</title>
      <link>https://philipjkim.github.io/posts/20250716-legend-of-the-galactic-heroes-reinhard-vs-yang/</link>
      <pubDate>Wed, 16 Jul 2025 10:26:02 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250716-legend-of-the-galactic-heroes-reinhard-vs-yang/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/lotgh.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;소설 &amp;lsquo;은하영웅전설&amp;rsquo;의 두 주인공, 은하제국의 &lt;strong&gt;&amp;lsquo;상승의 천재&amp;rsquo;&lt;/strong&gt; 라인하르트 폰 로엔그람과 자유행성동맹의 &lt;strong&gt;&amp;lsquo;불패의 마술사&amp;rsquo;&lt;/strong&gt; 양 웬리는 시대를 대표하는 위대한 전략가이자 리더이지만, 그들의 리더십 스타일은 극명한 대조를 이룹니다. 두 영웅의 리더십을 장점과 단점으로 나누어 비교하면 다음과 같습니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;라인하르트-폰-로엔그람-reinhard-von-lohengramm---카리스마적-전제군주형-리더&#34;&gt;&lt;strong&gt;라인하르트 폰 로엔그람 (Reinhard von Lohengramm) - 카리스마적 전제군주형 리더&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&amp;ldquo;우주를 손에 넣겠다&amp;quot;는 개인의 야망을 원동력으로 삼아, 압도적인 카리스마와 천재적인 능력으로 부하들을 이끌고 낡은 체제를 무너뜨리는 혁명가입니다.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;구분&lt;/th&gt;&#xA;          &lt;th&gt;상세 설명&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;1. 압도적인 카리스마와 비전 제시&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;명확하고 거대한 목표(우주 통일, 골덴바움 왕조 타도)를 제시하고, 스스로가 그 선두에 서서 불가능을 가능으로 만드는 모습을 통해 부하들에게 절대적인 충성심과 열광적인 지지를 이끌어 냅니다. 그의 존재 자체가 조직의 구심점이자 원동력입니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;2. 신속하고 과감한 의사결정&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;모든 권한이 자신에게 집중되어 있어, 복잡한 보고나 합의 과정 없이 위기 상황에서 빠르고 대담한 결정을 내릴 수 있습니다. 이는 급변하는 전장에서 결정적인 승기를 잡는 데 유리하게 작용합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;3. 능력 위주의 파격적인 인재 등용&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;낡은 문벌 귀족 사회를 혐오하여 신분이나 배경에 상관없이 오직 &amp;lsquo;능력&amp;rsquo;만으로 인재를 발탁하고 적재적소에 배치합니다. 이는 조직에 새로운 활력을 불어넣고 건강한 경쟁을 유도하여 최상의 효율을 이끌어냅니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;4. 청렴하고 공명정대한 신상필벌&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;스스로 사치를 멀리하고, 부패와 무능을 가장 큰 죄악으로 여겨 엄격하게 처벌합니다. 공을 세운 자에게는 그에 합당한 파격적인 보상을 내림으로써 부하들의 동기를 극대화합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;1. 시스템보다 개인에 의존하는 한계&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;조직의 모든 것이 &amp;lsquo;라인하르트&amp;rsquo;라는 개인의 역량과 카리스마에 의존합니다. 그의 부재는 곧 시스템 전체의 붕괴로 이어질 수 있다는 치명적인 구조적 약점을 가집니다. 후계자나 시스템 구축에 대한 고민이 부족했습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;2. 독단적 결정과 소통 부재&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;자신과 대등한 위치에서 의견을 나눌 상대를 인정하지 않으며, 중요한 결정을 소수의 측근과 독단적으로 내리는 경향이 있습니다. 이는 유능한 부하들의 의견이 묵살되거나, 잘못된 판단을 내렸을 때 견제할 장치가 없다는 위험을 내포합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;3. 감정적인 취약성과 인간관계의 미숙함&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;유일한 안식처였던 누나 안네로제나 친구 키르히아이스와 관련된 일에는 이성적인 판단력이 흔들리는 모습을 보입니다. 이는 리더로서의 안정성을 저해하는 요소이며, 그의 가장 큰 약점이었습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;4. 비판과 반대를 용납하지 않는 경직성&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;자신에 대한 반대 의견이나 비판을 &amp;lsquo;반역&amp;rsquo;이나 &amp;lsquo;도전&amp;rsquo;으로 받아들이는 경향이 있습니다. 이는 조직 내 건전한 비판 문화를 위축시키고, 리더가 잘못된 길로 들어섰을 때 누구도 제지할 수 없게 만듭니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;양-웬리-yang-wen-li---민주적-합리주의자형-리더&#34;&gt;&lt;strong&gt;양 웬리 (Yang Wen-li) - 민주적 합리주의자형 리더&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&amp;ldquo;최선의 독재보다 최악의 민주주의가 낫다&amp;quot;는 신념을 바탕으로, 개인의 자유와 인권을 존중하며, 토론과 합의를 통해 합리적인 결론을 도출해내는 지휘관입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>포커 불리(bully)를 물리치려면 이 한 가지 비밀만 알면 됩니다</title>
      <link>https://philipjkim.github.io/posts/20250715-to-defeat-a-poker-bully-you-only-need-to-know-this-one-secret/</link>
      <pubDate>Tue, 15 Jul 2025 20:28:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-to-defeat-a-poker-bully-you-only-need-to-know-this-one-secret/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/strategy/to-defeat-a-poker-bully-you-only-need-to-know-this-one-secre-19523.htm&#34;&gt;https://www.pokernews.com/strategy/to-defeat-a-poker-bully-you-only-need-to-know-this-one-secre-19523.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;불리는 포커 플레이어 중 흔한 유형입니다. 테이블에 너무 오래 앉아있으면 반드시 한 명쯤은 마주치게 됩니다. 그들은 무모하게 베팅하고 레이즈합니다. 그들과 맞서 플레이하는 것은 마치 날뛰는 야생마를 타는 것처럼 무서울 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;포커 불리와 맞서 싸우는 세 가지 일반적인 전략에 대해 이야기해 봅시다. 두 가지는 틀렸고, 한 가지는 옳습니다.&lt;/p&gt;&#xA;&lt;p&gt;한 가지 유혹은 불리에게 더 심한 불리짓을 하려고 노력하는 것입니다. 그가 때리는 것보다 훨씬 더 세게 되받아치는 것입니다. 문제는 당신이 난폭하게 휘두르는 것에 불과하다는 것입니다. 마치 &amp;ldquo;크리스마스 이야기(A Christmas Story)&amp;ldquo;에서 랄피가 결국 이성을 잃고 불리 스컷 파커스&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;에게 미쳐 날뛰는 것과 같습니다. 효과가 있을 수도 있지만, 위험하고 비용이 많이 듭니다. 포커 상황에서는, 당신이 미지근한 패로 서로 불리가 되려고 할 때, 괴물같은 패로 당신 둘 다를 덫에 걸리게 하려고 기다리는 똑똑한 다른 플레이어들에게 쉽게 이용당할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>포커 배리언스 이해는 하향세에 대처하는 데 도움이 될 것입니다</title>
      <link>https://philipjkim.github.io/posts/20250715-understanding-poker-variance-will-help-you-cope-with-downswings/</link>
      <pubDate>Tue, 15 Jul 2025 19:57:28 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-understanding-poker-variance-will-help-you-cope-with-downswings/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.888poker.com/magazine/strategy/understanding-poker-variance-will-help-you-cope-downswings&#34;&gt;https://www.888poker.com/magazine/strategy/understanding-poker-variance-will-help-you-cope-downswings&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;질문을 하나 드리겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;7,000명이 참가하는 온라인 일요 토너먼트를 플레이한다고 가정해 봅시다. 참가자의 16%에게 상금이 지급됩니다. 이 메이저 대회에서 당신의 ROI는 50%입니다.&lt;/p&gt;&#xA;&lt;p&gt;이 토너먼트를 10년 동안 매주 일요일 플레이한다고 가정해 봅시다.&lt;/p&gt;&#xA;&lt;p&gt;10년 동안, 당신은 일요일을 한 번도 빠뜨리지 않습니다.&lt;/p&gt;&#xA;&lt;p&gt;결혼식에 가지 않고,&lt;/p&gt;&#xA;&lt;p&gt;라이브 토너먼트에 가지 않고,&lt;/p&gt;&#xA;&lt;p&gt;아무것도 하지 않습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;이 10년 동안 당신이 돈을 잃을 확률은 몇 퍼센트라고 생각하십니까?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;많은 사람들이 이 질문에 혼란스러워하는 것 같습니다. “ROI가 50%이고, 10년 동안 매주 일요일 플레이한다고요? 그렇다면 거의 항상 수익을 내야 하는 거 아닌가요?”&lt;/p&gt;</description>
    </item>
    <item>
      <title>포커에서 넛(Nuts)이란 무엇인가? 의미 &#43; 전략 가이드</title>
      <link>https://philipjkim.github.io/posts/20250715-what-are-the-nuts-in-poker/</link>
      <pubDate>Tue, 15 Jul 2025 17:49:43 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-what-are-the-nuts-in-poker/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.888poker.com/magazine/poker-terms/nuts&#34;&gt;https://www.888poker.com/magazine/poker-terms/nuts&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;포커에서 넛이란 무엇일까요? 포커에서 &lt;em&gt;넛&lt;/em&gt;이란 핸드의 어떤 단계에서든 가능한 최고의 카드를 의미합니다. 리버에서 넛을 가진 플레이어는 핸드를 폴드하거나 잠들지 않는 한 핸드를 잃을 수 없습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;포켓 에이스&lt;/em&gt;는 플롭 전에 가장 강한 핸드이므로 종종 &amp;lsquo;&lt;em&gt;프리플롭 넛&lt;/em&gt;&amp;lsquo;라고 불립니다. 하지만 이 명칭은 넛이 5장의 카드를 필요로 하는 텍사스 홀덤 핸드의 자격을 갖추기 때문에 플롭 이후의 개념이므로 약간 오해의 소지가 있습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;포커에서-넛이란-무엇이며-어떤-핸드가-자격을-갖출까&#34;&gt;포커에서 넛이란 무엇이며 어떤 핸드가 자격을 갖출까?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;로열 플러시&lt;/em&gt;를 가지고 있다면 항상 포커 넛이 될 것입니다. 항상 로열 플러시를 만들 수 있는 것은 아니므로, 넛는 트리플처럼 약할 수도 있습니다. 예를 들어, 2♥️3♠️7♦️J♣️K♠️ 보드에서 당신이 KK를 가지고 있다면 넛이 될 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 싱글턴을 피하기 위한 의존성 주입 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250715-tott-using-dependency-injection-to-avoid-singletons/</link>
      <pubDate>Tue, 15 Jul 2025 14:06:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-tott-using-dependency-injection-to-avoid-singletons/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/05/tott-using-dependancy-injection-to.html&#34;&gt;https://testing.googleblog.com/2008/05/tott-using-dependancy-injection-to.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;싱글턴을 사용하는 코드를 테스트하기는 어렵습니다. 일반적으로 테스트하려는 코드는 싱글턴 인스턴스와 강력하게 결합되어 있습니다. 싱글턴 객체가 종종 정적 생성자나 정적 메서드에서 생성되기 때문에 싱글턴 객체의 생성을 제어할 수 없습니다. 결과적으로 싱글턴 인스턴스의 동작을 시뮬레이션할 수도 없습니다.&lt;/p&gt;&#xA;&lt;p&gt;싱글턴 클래스의 구현 변경이 불가능하지만, 싱글턴 클라이언트는 변경이 가능하다면 간단한 리팩터링으로 테스트를 더 쉽게 만들 수 있습니다. 싱글턴 인스턴스로 &lt;code&gt;Server&lt;/code&gt;를 사용하는 메서드가 있다고 가정해 봅시다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Client&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;retrieveData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;를 리팩터링하여 의존성 주입을 사용하고 싱글턴 패턴의 사용을 완전히 피할 수 있습니다. 어떤 기능도 잃지 않았고, &lt;code&gt;Server&lt;/code&gt;의 싱글턴 인스턴스만 존재해야 한다는 요구 사항도 잃지 않았습니다. 유일한 차이점은 &lt;code&gt;Server&lt;/code&gt; 인스턴스를 정적 &lt;code&gt;getInstance&lt;/code&gt; 메서드에서 가져오는 대신, &lt;code&gt;Client&lt;/code&gt;가 생성자에서 받는다는 것입니다. 클래스를 테스트하기 더 쉽게 만들었습니다!&lt;/p&gt;</description>
    </item>
    <item>
      <title>판타지 야구 포인트 리그 전략: 야후의 기본 설정에 대해 알아야 할 모든 것</title>
      <link>https://philipjkim.github.io/posts/20250715-fantasy-baseball-points-league-strategy/</link>
      <pubDate>Tue, 15 Jul 2025 00:44:21 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-fantasy-baseball-points-league-strategy/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://sports.yahoo.com/fantasy/article/fantasy-baseball-points-league-strategy-everything-you-need-to-know-about-playing-yahoos-default-format-153238465.html&#34;&gt;https://sports.yahoo.com/fantasy/article/fantasy-baseball-points-league-strategy-everything-you-need-to-know-about-playing-yahoos-default-format-153238465.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;많은 판타지 야구 작가들이 기사를 쓸 때 주로 로티서리 (rotisserie) 형식을 생각하지만, 포인트 리그 (H2H points) 는 야후를 포함한 많은 인기 사이트에서 기본 설정이 되었습니다. 그리고 로토 형식과 달리 포인트 리그 채점 시스템은 사이트마다 크게 다릅니다.&lt;/p&gt;&#xA;&lt;p&gt;다행히 &lt;a href=&#34;https://help.yahoo.com/kb/default-league-settings-fantasy-baseball-sln6785.html&#34;&gt;야후의 기본 설정&lt;/a&gt;은 어떤 플랫폼에서든 가장 합리적인 설정입니다. 실제로 2024년 최종 선수 순위를 보면, 대부분의 선수들이 로토와 야후 포인트 점수에서 각자의 포지션에서 비슷한 위치에 랭크되었습니다. 상위 7명의 타자(Shohei Ohtani, Aaron Judge, Bobby Witt Jr., Juan Soto, José Ramírez, Gunnar Henderson)는 두 형식 모두에서 동일했으며, 상위 3명의 선발 투수(Tarik Skubal, Zack Wheeler, Chris Sale)도 마찬가지였습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLO8 (오마하 하이로우) 초보자를 위한 규칙</title>
      <link>https://philipjkim.github.io/posts/20250715-plo8-rules-for-beginners/</link>
      <pubDate>Tue, 15 Jul 2025 00:23:54 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250715-plo8-rules-for-beginners/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.getcoach.poker/articles/omaha-hi-lo-rules-for-beginners/&#34;&gt;https://www.getcoach.poker/articles/omaha-hi-lo-rules-for-beginners/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;하이와-로우는-무엇인가요&#34;&gt;하이와 로우는 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;하이는 가능한 가장 강한 조합입니다. 인기 있는 포커 게임 (텍사스 홀덤과 오마하)에서 이 조합은 로얄 플러시입니다.&lt;/p&gt;&#xA;&lt;p&gt;로우는 정반대, 즉 게임에서 가능한 가장 약한 조합입니다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 그 조합에는 몇 가지 요구 사항이 있습니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;로우는 8보다 높은 카드를 가질 수 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;에이스는 가장 낮은 카드로 간주됩니다.&lt;/li&gt;&#xA;&lt;li&gt;스트레이트와 플러시는 로우에 고려되지 않습니다. 예를 들어, A-2-3-4-5 다이아몬드 패는 최고의 로우 핸드로 간주됩니다.&lt;/li&gt;&#xA;&lt;li&gt;하나의 핸드가 로우와 하이 조합 모두가 될 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;plo8-은-일반-plo-팟-리밋-오마하-와-어떻게-다른가요&#34;&gt;PLO8 은 일반 PLO (팟 리밋 오마하) 와 어떻게 다른가요?&lt;/h2&gt;&#xA;&lt;p&gt;오마하 하이로우 (PLO8)는 가장 인기 있는 하이로우 포커 게임입니다. 클래식 또는 5카드 오마하와의 주요 차이점은 참가자들 사이의 포커 뱅크 분할입니다. 절반은 최고의 하이 조합을 가진 플레이어에게 가고, 나머지 절반은 최고의 로우 조합을 가진 플레이어에게 갑니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 시간은 무작위</title>
      <link>https://philipjkim.github.io/posts/20250714-tott-time-is-random/</link>
      <pubDate>Mon, 14 Jul 2025 10:30:17 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250714-tott-time-is-random/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/04/tott-time-is-random.html&#34;&gt;https://testing.googleblog.com/2008/04/tott-time-is-random.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;메서드의 입력값을 명확하게 식별할 수 없을 때 어떻게 제대로 테스트할 수 있을까요? 다음 Java 메서드를 살펴보세요.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/** 현재 시간으로부터 다음 분의 시작을 나타내는 Date 객체를 반환합니다. */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;nextMinuteFromNow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nowAsMillis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nowAsMillis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;60000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMilliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 메서드를 효과적으로 테스트하는 데에는 두 가지 장벽이 있습니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;코너 케이스&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 테스트하기 쉽지 않습니다. 시스템 클럭이 입력 조건을 제공하는 데에 좌우됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;nextMinuteFromNow()&lt;/code&gt; 가 반환될 때, 시간이 변경됩니다. 이는 테스트가 단언이 아니라 추측이 될 것이며, 재현하기 어려운 저빈도 실패를 생성할 수 있습니다&amp;hellip; 불안정성입니다! 예를 들어 클래스 로딩 및 가비지 컬렉션 일시 중지가 이에 영향을 미칠 수 있습니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt; 가 무작위 숫자 제공자처럼 보이기 시작하나요? 맞습니다! 현재 시간은 *비결정성 (non-determinism)*의 또 다른 원천입니다. &lt;code&gt;nextMinuteFromNow()&lt;/code&gt; 의 결과는 입력으로부터 쉽게 결정될 수 없습니다. 다행히도 이것은 쉽게 해결할 수 있습니다. 현재 시간을 제어할 수 있는 입력 매개변수로 만드세요.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 너무 많은 테스트</title>
      <link>https://philipjkim.github.io/posts/20250714-tott-too-many-tests/</link>
      <pubDate>Mon, 14 Jul 2025 10:20:26 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250714-tott-too-many-tests/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/02/in-movie-amadeus-austrian-emperor.html&#34;&gt;https://testing.googleblog.com/2008/02/in-movie-amadeus-austrian-emperor.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;영화 &lt;em&gt;아마데우스&lt;/em&gt;에서 오스트리아 황제는 모차르트의 음악에 “음표가 너무 많다”고 비판합니다. 하나의 기능을 테스트하는 데 “너무 많은” 테스트는 몇 개일까요?&lt;/p&gt;&#xA;&lt;p&gt;메서드 &lt;code&gt;decide&lt;/code&gt;를 고려해 봅시다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;decide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DoOneThing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DoAnother&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 공간 제약 때문에 한 글자 변수 이름을 사용했습니다.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 더 나은 이름을 사용해야 합니다. 제가 하는 대로 하지 말고, 제가 시키는 대로 하세요. :-)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;얼마나 많은 테스트를 작성할 수 있을까요? 각 변수에 대해 &lt;code&gt;int&lt;/code&gt; 값의 전체 범위를 실행하려면 2^192개의 테스트가 필요할 것입니다. 이렇게 계속한다면 구골 개수의 테스트를 하게 될 것입니다! 너무 많은 테스트입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>모든 것을 공격으로 해석하는 사람과 대화하기</title>
      <link>https://philipjkim.github.io/posts/20250711-talking-to-someone-who-interprets-everything-as-an-attack/</link>
      <pubDate>Fri, 11 Jul 2025 14:05:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250711-talking-to-someone-who-interprets-everything-as-an-attack/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&#34;&gt;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;어떤 말이나 제안이라도 상대방을 화나게 할까 봐 조심스러웠던 적이 있나요? 우리는 때때로 우리가 하는 모든 말을 비난으로 해석하는 사람을 불쾌하게 하거나, 우리가 의도한 대화의 요점을 놓치게 하는 특정 단어를 사용할 수도 있습니다. 대화가 언제 터질지 모르는 지뢰밭처럼 느껴질 때 믿을 수 없을 정도로 어렵고 심지어 좌절감을 느끼기도 합니다. 그렇다면 모든 것을 공격으로 해석하는 방어적인 사람과 긴장을 고조시키지 않고 어떻게 대화할 수 있을까요?&lt;/p&gt;&#xA;&lt;p&gt;모든 언급을 개인적인 공격으로 생각하는 방어적인 사람과 대화하는 것은 지칠 수 있습니다. 이것은 대화를 어렵게 만들고 관계에 큰 부담을 줄 수 있습니다. 가족, 친구, 동료와 관계없이 상황을 처리하는 방법을 아는 것이 존중과 평화를 유지하는 데 중요합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>갈등 회피가 종종 갈등을 유발할 수 있다</title>
      <link>https://philipjkim.github.io/posts/20250711-avoiding-conflict-can-often-cause-conflict/</link>
      <pubDate>Fri, 11 Jul 2025 13:55:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250711-avoiding-conflict-can-often-cause-conflict/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&#34;&gt;https://www.uwgb.edu/sbdc/articles/avoiding-conflict/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;젊은 관리자들을 멘토링할 때, 일반적으로 가장 개발하기 어려운 기술은 갈등을 다루고 갈등이 긍정적인 결과로 이어지도록 하는 것입니다. 침묵하는 승인이나 갈등 회피는 직원 갈등에 기여할 뿐만 아니라 상황을 악화시키는 경향이 있습니다. 이러한 관리자/리더들은 갈등을 무시하거나 상황에 관여하기를 거부합니다. 관리자가 모호하고, 회피적이며, 사람이나 문제를 무시하거나 회피하는 행동은 갈등 회피를 실행할 수 있습니다. 문제를 회피하거나 대결을 지연시키는 대신, 이는 양 당사자에게 손실을 초래하는 상황이 됩니다.&lt;/p&gt;&#xA;&lt;p&gt;갈등 관리는 개발하기 어려운 기술이지만, 관리자와 리더가 감정적으로나 직업적으로 이 기술을 습득하는 것이 필수적입니다. 갈등은 나쁜 것이 아닙니다! 권위에 대한 두려움, 성별 고정관념, 다른 관점, 위협, 자신감 부족은 모두 개인이 갈등을 피하는 데 기여하는 요인입니다. 갈등을 다루는 데 대한 결과에 대한 두려움이나 다른 사람의 반응에 대한 불안감은 너무 압도적이어서 관리자가 상황을 피하게 될 수 있습니다. 예상되는 반응을 다루는 고통스러운 생각은 너무 고통스러워서 다루고 해결할 수 없습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 스트룹 효과</title>
      <link>https://philipjkim.github.io/posts/20250711-tott-the-stroop-effect/</link>
      <pubDate>Fri, 11 Jul 2025 10:49:44 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250711-tott-the-stroop-effect/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2008/02/tott-stroop-effect.html&#34;&gt;https://testing.googleblog.com/2008/02/tott-stroop-effect.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://philipjkim.github.io/img/The_Stoop_Effect.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;아래 두 행동을 얼마나 빨리 할 수 있나요?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&amp;hellip;25개 단어를 모두 소리 내어 읽기: 빨강, 초록, 파랑, &amp;hellip; (지금 시도해 보세요!)&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;25가지 색깔을 모두 소리 내어 말하기: 초록, 노랑, 하양&amp;hellip; (지금 시도해 보세요!)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;두 번째 작업이 더 많은 시간과 노력을 필요로 했나요? 그렇다면, 여러분은 스트룹 효과를 경험하고 있는 것입니다. 스트룹 효과는 대략적으로 &lt;em&gt;레이블&lt;/em&gt;(이 경우 단어)이 &lt;em&gt;내용&lt;/em&gt;(색깔)과 같은 영역에 있고 의미가 충돌할 때, 레이블이 내용을 이해하는 능력에 방해가 된다는 것을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 스텁이 단위 테스트 속도를 높여줍니다</title>
      <link>https://philipjkim.github.io/posts/20250710-tott-stubs-speed-up-your-unit-tests/</link>
      <pubDate>Thu, 10 Jul 2025 16:01:59 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250710-tott-stubs-speed-up-your-unit-tests/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2007/04/tott-stubs-speed-up-your-unit-tests.html&#34;&gt;https://testing.googleblog.com/2007/04/tott-stubs-speed-up-your-unit-tests.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Michael Feathers는 좋은 단위 테스트의 특징을 &amp;ldquo;빠르게 실행되고 문제 위치를 파악하는 데 도움이 된다&amp;quot;고 정의합니다. 코드에 데이터베이스 액세스, 다른 서버와의 통신, 시간 의존성 등이 있을 때는 이를 달성하기 어렵습니다.&lt;/p&gt;&#xA;&lt;p&gt;모듈의 일부 종속성에 커스텀 객체를 대체하여 코드를 철저히 테스트하고, 커버리지를 높이며, 1초 이내에 실행할 수 있습니다. 데이터베이스 오류와 같은 드문 시나리오도 시뮬레이션하여 오류 처리 코드를 테스트할 수도 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;이러한 &amp;ldquo;커스텀 객체&amp;quot;를 지칭하는 다양한 용어가 사용됩니다. 용어를 명확히 하기 위해 Gerard Meszaros는 다음 정의를 제공합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ExecutorService invokeAll 과 가상 스레드 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250710-using-executor-service-invoke-all-with-virtual-threads/</link>
      <pubDate>Thu, 10 Jul 2025 09:41:55 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250710-using-executor-service-invoke-all-with-virtual-threads/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://davidvlijmincx.com/posts/loom/invoke-all-with-virtual-threads/&#34;&gt;https://davidvlijmincx.com/posts/loom/invoke-all-with-virtual-threads/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;invokeAll&lt;/code&gt; 은 &lt;code&gt;ExecutorService&lt;/code&gt; 의 메서드로, 여러 제출된 작업을 동시에 시작합니다. &lt;code&gt;ExecutorService&lt;/code&gt; 는 스레드 풀에서 플랫폼 스레드를 사용하여 제출된 작업을 실행합니다. 이 비싸고 리소스 집약적인 플랫폼 스레드를 사용하는 대신, 가상 스레드를 사용하여 &lt;code&gt;ExecutorService&lt;/code&gt; 에 제출된 작업을 실행할 수도 있습니다. 이 글에서는 &lt;code&gt;invokeAll&lt;/code&gt; 메서드를 가상 스레드 (virtual threads), 구조화된 동시성 (structured concurrency) 및 플랫폼 스레드 (platform threads) 와 함께 구현하는 모든 방법을 다룰 것입니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;가상-스레드를-사용한-invokeall&#34;&gt;가상 스레드를 사용한 &lt;code&gt;invokeAll&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;우리가 살펴볼 첫 번째 예제는 가상 스레드 (virtual threads) 를 사용합니다. 각 작업에 대해 가상 스레드를 생성하는 Executor 를 생성하는 try-with-resources 문이 있습니다. 7행에서 &lt;code&gt;invokeAll&lt;/code&gt; 메서드가 작업 목록과 함께 호출됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLO (팟 리밋 오마하) 에서 효과적인 블러핑</title>
      <link>https://philipjkim.github.io/posts/20250709-effective-bluffing-in-pot-limit-omaha/</link>
      <pubDate>Wed, 09 Jul 2025 10:20:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250709-effective-bluffing-in-pot-limit-omaha/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://ggpoker.com/blog/beginner-strategy/effective-bluffing-in-pot-limit-omaha/&#34;&gt;https://ggpoker.com/blog/beginner-strategy/effective-bluffing-in-pot-limit-omaha/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;속임수의-기본-원리&#34;&gt;속임수의 기본 원리&lt;/h2&gt;&#xA;&lt;p&gt;“포커는 펠트 테이블에서 하는 게임이지만, 플레이어들의 마음속에서 승리하는 게임이다”와 같은 말을 들어보셨을 것입니다. 이 말이 얼마나 정확하다고 생각하십니까? PLO에서 블러핑의 복잡한 부분에 더 깊이 들어가기 전에, 몇 가지 기본을 다져봅시다.&lt;/p&gt;&#xA;&lt;p&gt;포커 세계에 막 발을 들여놓은 분들을 위한 블러핑은 상대방에게 실제보다 더 좋은 패를 가지고 있다고 믿게 만드는 전술입니다. 베팅이나 레이즈를 하여 상대방이 두려움 때문에 폴드하도록 유도하는 것입니다. 하지만 여기에 함정이 있습니다 – 이것은 무모한 도박이 아니라 예술 형식입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>더 현명한 질문을 하는 기술</title>
      <link>https://philipjkim.github.io/posts/20250708-the-art-of-asking-smarter-questions/</link>
      <pubDate>Tue, 08 Jul 2025 14:21:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250708-the-art-of-asking-smarter-questions/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://hbr.org/2024/05/the-art-of-asking-smarter-questions&#34;&gt;https://hbr.org/2024/05/the-art-of-asking-smarter-questions&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;미국 칩 제조업체 엔비디아의 공동 설립자이자 CEO인 젠슨 황은 민첩하고 혁신적인 사고가 필요한 고속 산업에서 일합니다. 그의 리더십 스타일이 어떻게 발전했는지 회상하며 그는 &lt;em&gt;뉴욕 타임스&lt;/em&gt;에 “나는 아마도 답변을 덜 하고 질문을 훨씬 더 많이 한다….이제는 하루 종일 질문만 하고 지내는 것이 거의 가능할 것 같다”고 말했습니다. 그는 계속해서 “탐색을 통해 나는 [나의 경영진]이…탐색할 필요가 있다고 생각하지 못했던 아이디어를 탐색하도록 돕는다”고 덧붙였습니다.&lt;/p&gt;&#xA;&lt;p&gt;기술 기업들이 오랫동안 직면해 온 긴급성과 예측 불가능성은 더욱 성숙한 부문으로 확산되어 질문을 필수적인 기술로 끌어올렸습니다. AI의 발전은 답변이 중요했던 세상에서 질문이 중요해지는 세상으로의 엄청난 변화를 야기했습니다. 큰 차이점은 더 이상 정보에 대한 접근성이 아니라 스마트 프롬프트를 만드는 능력입니다. 씨티은행의 CEO인 제인 프레이저는 &lt;em&gt;포춘&lt;/em&gt;지에 “리더로서 당신은 답을 가지고 있지 않다. 당신의 직원들이 [가지고 있다], 당신의 사람들이 [가지고 있다]”고 말했습니다. “그것은 조직을 이끌어가는 방식을 완전히 바꿔놓았다. 창의성을 발휘해야 한다….혁신은 회사 정상에 있는 천재가 모든 답을 내놓기 때문에 일어나는 것이 아니다.”&lt;/p&gt;</description>
    </item>
    <item>
      <title>밈 설명: 홀덤에서 오마하로 종목전환</title>
      <link>https://philipjkim.github.io/posts/20250708-holdem-to-omaha-meme/</link>
      <pubDate>Tue, 08 Jul 2025 13:34:39 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250708-holdem-to-omaha-meme/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.reddit.com/r/poker/comments/109llkw/switching_from_hold_em_to_omaha/&#34;&gt;https://www.reddit.com/r/poker/comments/109llkw/switching_from_hold_em_to_omaha/&lt;/a&gt; (Explanation by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://preview.redd.it/switching-from-hold-em-to-omaha-v0-j6awvkn0yjba1.jpg?width=320&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=1bef6890bafa047cb8d9b219758ad609292d6aa3&#34; alt=&#34;holdem_to_omaha_meme&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;밈meme의-흐름-해설&#34;&gt;밈(Meme)의 흐름 해설&lt;/h2&gt;&#xA;&lt;p&gt;이 밈은 4컷 만화 형식으로 되어 있습니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;1~3컷&lt;/strong&gt;: 한 남자가 &amp;ldquo;와, 돈이 너무 많아!&amp;rdquo;, &amp;ldquo;젠장, 이 돈을 다 어떡하지?&amp;rdquo;, &amp;ldquo;주머니에서 돈이 막 떨어지네! 누가 제발 이 돈 좀 가져가 줘!&amp;ldquo;라고 외칩니다. 즉, &lt;strong&gt;주체할 수 없을 정도로 돈이 많아서 제발 누가 이 돈을 좀 가져가 줬으면 하는 비현실적인 상황&lt;/strong&gt;을 보여줍니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;4컷&lt;/strong&gt;: 갑자기 이 남자가 정장을 입고 전문가처럼 등장합니다. 이미지 위에는 &lt;strong&gt;&amp;ldquo;PLO&amp;rdquo;&lt;/strong&gt; (팟 리밋 오마하)라는 글자가 쓰여 있습니다. 그리고 그는 이렇게 말합니다. &amp;ldquo;아무튼, 저는 우리의 타겟 고객을 이렇게 생각합니다.&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;핵심은 1~3컷의 &amp;lsquo;돈을 잃고 싶어 안달 난 사람&amp;rsquo;이 바로 4컷의 &amp;lsquo;PLO라는 게임이 노리는 이상적인 고객&amp;rsquo;이라는 점입니다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 화장실에서 테스팅 (Testing on the Toilet) 소개</title>
      <link>https://philipjkim.github.io/posts/20250708-introducing-testing-on-the-toilet/</link>
      <pubDate>Tue, 08 Jul 2025 10:31:22 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250708-introducing-testing-on-the-toilet/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html&#34;&gt;https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;업데이트 - 2024년 12월&lt;/strong&gt;: TotT 의 의미는 &lt;em&gt;화장실에서 테스팅 (Testing on the Toilet)&lt;/em&gt; 에서 이제 *화장실에서 기술 (Tech on the Toilet)*로 변경되었습니다. 자세한 내용은 다음 게시물을 읽어보세요: &lt;a href=&#34;https://testing.googleblog.com/2024/12/tech-on-toilet-driving-software.html&#34;&gt;&lt;strong&gt;화장실에서 기술: 한 번의 화장실 휴식으로 소프트웨어 우수성 향상&lt;/strong&gt;&lt;/a&gt;. 아래는 2007년의 원본 게시물입니다.&lt;/p&gt;&#xA;&lt;p&gt;블로거 커멘트: 앞으로 TotT 시리즈를 시간이 날 때마다 하나씩 번역해서 포스팅할 예정입니다. (이미 먼저 포스팅된 글들도 있습니다.)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;저희는 여러분이 더 많은 테스트를 작성하기를 바랍니다. 네, 바로 여러분입니다. 테스트는 코드를 리팩토링해야 할 때나 다른 개발자가 기능을 추가할 때 여러분을 보호하는 안전망이라는 말을 이미 들었을 것입니다. 심지어 테스트가 코드 디자인에 도움이 될 수 있다는 것도 알고 있을 것입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLO (팟 리밋 오마하) 스타팅 핸드: 반드시 고려해야 할 3가지</title>
      <link>https://philipjkim.github.io/posts/20250707-pot-limit-omaha-starting-hands/</link>
      <pubDate>Mon, 07 Jul 2025 20:22:29 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-pot-limit-omaha-starting-hands/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://upswingpoker.com/pot-limit-omaha-starting-hands-plo-preflop-strategy/&#34;&gt;https://upswingpoker.com/pot-limit-omaha-starting-hands-plo-preflop-strategy/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;NLH 플레이어는 다음과 같은 보기 쉬운 레인지 매트릭스를 사용할 수 있습니다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://upswingpoker.com/wp-content/uploads/2017/07/https-i-gyazo-com-b38ff2ed5ea81eb5909d086d23581b.png&#34; alt=&#34;nlh_range_matrix&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;PLO 플레이어에게는 이러한 편리한 레인지 매트릭스가 없습니다. 모든 것을 포함하는 것은 실질적으로 비실용적이기 때문입니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2018년 수정:&lt;/strong&gt; 위 내용은 이 기사가 게시되었을 때 사실이었지만, 저희는 실제로 실용적이고 사용하기 쉬운 새로운 &lt;a href=&#34;https://upswingpoker.com/plo-solver-preflop/&#34;&gt;프리플랍 PLO 도구&lt;/a&gt; 를 출시했습니다.&lt;/p&gt;&#xA;&lt;p&gt;이것이 이 게임이 매우 역동적인 이유 중 하나입니다. 다양한 가능한 핸드가 있기 때문에 PLO는 플레이어에게 끊임없이 독특한 상황을 제공합니다. PLO에서 프리플랍 핸드 선택 전략을 세우는 것은 어려울 수 있지만, 여전히 승리할 스타팅 핸드를 선택하기 위해 고려할 수 있는 여러 요소가 있습니다. 이 기사에서는 그중 3가지를 설명하겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go의 동시성: 심층 분석</title>
      <link>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</link>
      <pubDate>Mon, 07 Jul 2025 13:43:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-concurrency-in-go-a-deep-dive/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&#34;&gt;https://medium.com/hprog99/concurrency-in-go-a-deep-dive-2abbb4838984&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;&#xA;&lt;h3 id=&#34;동시성이란-무엇인가&#34;&gt;동시성이란 무엇인가?&lt;/h3&gt;&#xA;&lt;p&gt;동시성은 독립적인 활동들의 구성으로 느슨하게 정의될 수 있습니다. 반드시 병렬 실행을 필요로 하지는 않지만, 여러 태스크가 겹치는 시간 동안 진행되도록 허용합니다. 컴퓨팅의 맥락에서 동시 프로그래밍은 여러 태스크가 실행에서 &lt;strong&gt;인터리브(interleave - 여러 대상을 번갈아 가며 실행하거나 배치)&lt;/strong&gt; 될 수 있도록 보장하며, 이는 특히 I/O 바운드 태스크나 수많은 이벤트를 동시에 처리해야 하는 애플리케이션(예: 웹 서버에서 여러 클라이언트 연결 처리)에서 중요합니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;동시성-vs-병렬성&#34;&gt;동시성 vs. 병렬성&lt;/h3&gt;&#xA;&lt;p&gt;비공식적인 대화에서 종종 혼용되지만, 동시성과 병렬성은 다른 개념입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 더 나은 테스트를 위한 가짜(Fake) 사용하기</title>
      <link>https://philipjkim.github.io/posts/20250707-testing-on-toilet-fake-your-way-to/</link>
      <pubDate>Mon, 07 Jul 2025 13:23:12 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-testing-on-toilet-fake-your-way-to/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html&#34;&gt;https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;수년간 블로그를 운영한 후, 블로그 플랫폼의 API를 사용해보기로 결정했습니다. 이리저리 사용해보다가 문득 깨닫습니다: 원격 블로그 서버와 통신하지 않고도 코드가 작동하는지 어떻게 알 수 있을까요?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;deletePostsWithTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAllPosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;deletePost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;가짜(Fakes)가 해결책입니다! 가짜는 실제 구현체처럼 작동하지만, 프로덕션 환경에 적합하지 않은 API의 가벼운 구현체입니다. 블로그 서비스의 경우, 중요한 것은 게시물을 가져오고 삭제하는 기능뿐입니다. 실제 블로그 서비스는 데이터베이스와 여러 프런트엔드 서버가 필요하겠지만, 코드를 테스트하는 데는 그런 것이 필요 없습니다. 필요한 것은 블로그 서비스 API의 어떤 구현체든 상관없습니다. 간단한 인메모리 구현체로 이를 달성할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>헤르메틱 서버 (Hermetic Servers)</title>
      <link>https://philipjkim.github.io/posts/20250707-hermetic-servers/</link>
      <pubDate>Mon, 07 Jul 2025 13:08:09 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-hermetic-servers/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2012/10/hermetic-servers.html&#34;&gt;https://testing.googleblog.com/2012/10/hermetic-servers.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;종단-간-테스트&#34;&gt;&amp;ldquo;종단 간&amp;rdquo; 테스트&lt;/h2&gt;&#xA;&lt;p&gt;Google 테스트 세계에서 종단 간 테스트는 사용자 요청부터 응답까지 전체 서버 스택을 실행하는 테스트입니다. 다음은 종단 간 테스트가 검증할 시스템 테스트 대상(SUT)의 간략한 모습입니다. SUT의 프런트엔드 서버가 특정 사용자 요청에 필요하지 않은 세 번째 백엔드에 연결된다는 점에 유의하십시오.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-lwP4J6FcN34/UGx-bU41ImI/AAAAAAAAAP8/l5M0J3A0Xgk/s640/1-SUT.jpg&#34; alt=&#34;system_under_test&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이러한 시스템에 대한 빠르고 신뢰할 수 있는 종단 간 테스트를 작성하는 데 있어 한 가지 과제는 네트워크 액세스를 피하는 것입니다. 네트워크 액세스가 포함된 테스트는 로컬 리소스만 액세스하는 테스트보다 느리며, 외부 서버에 액세스하면 비결정성 또는 외부 서버의 가용성 부족으로 인해 &lt;a href=&#34;http://googletesting.blogspot.com/2008/04/tott-avoiding-flakey-tests.html&#34;&gt;불확실성&lt;/a&gt;이 발생할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TotT: 목(Mock)을 과도하게 사용하지 마세요</title>
      <link>https://philipjkim.github.io/posts/20250707-testing-on-the-toilet-dont-overuse-mocks/</link>
      <pubDate>Mon, 07 Jul 2025 10:53:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-testing-on-the-toilet-dont-overuse-mocks/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html&#34;&gt;https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;코드를 테스트할 때, 코드의 의존성을 목으로 처리하여 무시하는 것이 쉬워 보일 수 있습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testCreditCardIsCharged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isServerAvailable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;beginTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockTransactionManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockTransactionManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isOverMaxBalance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;processPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;dollars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockCreditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하지만 목을 사용하지 않으면 때로는 더 간단하고 유용한 테스트를 만들 수 있습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testCreditCardIsCharged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paymentProcessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;processPayment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Money&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;dollars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCardServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMostRecentCharge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;creditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;목을 과도하게 사용하면 몇 가지 문제가 발생할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>더위 속에서 자전거를 타면서 살아남기 위한 9가지 팁: 얼마나 마셔야 하는지부터 뜨거운 물에 목욕해야 하는 이유까지</title>
      <link>https://philipjkim.github.io/posts/20250707-9-tips-to-survive-cycling-in-the-heat/</link>
      <pubDate>Mon, 07 Jul 2025 10:22:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250707-9-tips-to-survive-cycling-in-the-heat/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.bikeradar.com/advice/fitness-and-training/cycling-in-hot-weather&#34;&gt;https://www.bikeradar.com/advice/fitness-and-training/cycling-in-hot-weather&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;달리기 또는 비수상 팀 스포츠와 비교할 때, 사이클링은 분명 폭염 속에서 가장 즐거운 활동입니다. 속도 증가와 자전거로 생성되는 공기의 움직임은 라이더에게 일종의 시원한 담요를 제공합니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 그 바람 냉각은 기만적일 수 있으며 우리가 얼마나 열심히 운동하고 있는지, 얼마나 더운지, 얼마나 땀을 흘리고 있는지를 숨길 수 있습니다. 이것이 이번 여름에 자전거를 타면서 수분을 유지하는 것이 라이딩 성능과 즐거움에 가장 중요한 이유입니다.&lt;/p&gt;&#xA;&lt;p&gt;성능 측면에서, &lt;a href=&#34;https://research.monash.edu/en/publications/effects-of-heat-stress-on-physiological-responses-and-exercise-pe&#34;&gt;호주 연구&lt;/a&gt;에 따르면 사이클리스트가 32°C 더위에서 운동할 때 파워 출력이 6.5% 감소하며, 자전거에서 불충분한 연료 공급의 위험으로는 탈수, 경련 및 저나트륨혈증(혈액 내 나트륨 농도가 비정상적으로 낮을 때)이 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>푸싱 &amp; 풀링: PLO에서 중요한 프리플랍 전술을 활용하는 방법</title>
      <link>https://philipjkim.github.io/posts/20250704-how-to-utilize-a-crucial-preflop-tactics-in-plo/</link>
      <pubDate>Fri, 04 Jul 2025 14:11:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250704-how-to-utilize-a-crucial-preflop-tactics-in-plo/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://upswingpoker.com/pushing-pulling-plo-preflop-tactic/&#34;&gt;https://upswingpoker.com/pushing-pulling-plo-preflop-tactic/&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;A♠️A♦️K♠️K♦️는 PLO에서 가장 좋은 스타팅 핸드라고 할 수 있습니다. T♠️8♣️4♣️2♥️에 대한 지분을 살펴보겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://upswingpoker.com/wp-content/uploads/2017/08/equity.png&#34; alt=&#34;https://upswingpoker.com/wp-content/uploads/2017/08/equity.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이런 형편없는 핸드도 절대적인 몬스터 핸드에 대해 34% 이상의 지분을 가지고 있습니다. &lt;strong&gt;지분 차이가 작을수록 엣지가 작아지기 때문에 PLO(팟-리밋 오마하)가 NLH(노-리밋 홀덤)보다 도박처럼 느껴지는 이유입니다.&lt;/strong&gt; 하지만 프리플랍에서 엣지를 극대화하고 포스트플랍 성공을 위한 준비를 할 수 있는 전술들이 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 &amp;lsquo;&lt;strong&gt;푸싱&lt;/strong&gt;&amp;lsquo;과 &amp;lsquo;&lt;strong&gt;풀링&lt;/strong&gt;&amp;lsquo;이라는 두 가지 프리플랍 전술에 대해 이야기할 것입니다. 이 전술들은 종종 혼란스러운 프리플랍 PLO의 세계에 구조를 부여하는 데 도움이 될 수 있습니다. 바로 본론으로 들어가겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>브롬톤: 한 오너의 인상</title>
      <link>https://philipjkim.github.io/posts/20250704-the-brompton-the-owners-impression/</link>
      <pubDate>Fri, 04 Jul 2025 10:31:46 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250704-the-brompton-the-owners-impression/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://lovelybike.blogspot.com/2012/06/brompton-owners-impression.html&#34;&gt;https://lovelybike.blogspot.com/2012/06/brompton-owners-impression.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://live.staticflickr.com/8157/7323945542_49ba921f60_z.jpg&#34; alt=&#34;https://live.staticflickr.com/8157/7323945542_49ba921f60_z.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;몇 달 전 우리는 브롬톤 접이식 자전거의 주인이 되었습니다. 제가 이 자전거를 얼마나 좋아하는지에 대해 여전히 놀랍고 조금은 부끄럽습니다. 왜 이런 복합적인 감정이 드는 걸까요? 글쎄요, 이 구매나 사양에 대해 제가 공을 세울 수 없기 때문입니다. 대부분 남편의 아이디어였거든요! 오해하지 마세요. 저는 몇 년 동안 브롬톤을 동경해왔고, 여기 블로그에 동경하는 마음으로 글을 쓰기도 했습니다. 작년 여름에는 긴 시간 동안 시승도 해보았죠. 결국 저는 브롬톤을 소유할 필요가 있거나 원한다는 확신이 서지 않았습니다. 하지만 남편은 확신했고, 우리가 동시에 두 대를 사는 것이 합리적이라고 주장했습니다. 그가 강하게 원했기 때문에 저도 결국 동의했지만, 제 사용량이 이 구매를 정당화하지 못할까 봐 계속 불안했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>전문적인 환경에서 사용할 수 있는 11가지 토론 기술</title>
      <link>https://philipjkim.github.io/posts/20250703-11-debate-techniques-to-use-in-a-professional-setting/</link>
      <pubDate>Thu, 03 Jul 2025 10:48:11 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250703-11-debate-techniques-to-use-in-a-professional-setting/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.indeed.com/career-advice/career-development/debate-techniques&#34;&gt;https://www.indeed.com/career-advice/career-development/debate-techniques&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;직장에서-사용할-수-있는-11가지-토론-기술&#34;&gt;직장에서 사용할 수 있는 11가지 토론 기술&lt;/h2&gt;&#xA;&lt;p&gt;다음은 전문적인 맥락에서 사용할 수 있는 11가지 토론 기술입니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-청중-정의하기&#34;&gt;1. 청중 정의하기&lt;/h3&gt;&#xA;&lt;p&gt;직장에서 토론을 할 때 주요 청중 중 한 명은 당신이 토론하는 상대방입니다. 상대방의 입장과 신념을 고려하여 당신의 주장에 공감하도록 만드는 방법을 결정하십시오. 예를 들어, 상사와 토론하는 경우 &lt;a href=&#34;https://www.indeed.com/career-advice/career-development/what-is-productivity&#34;&gt;생산성&lt;/a&gt; 향상에 대한 상사의 욕구에 호소하도록 주장을 구성할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;직장 토론에는 당신이 토론하는 상대방 외에 추가 청중이 있을 수 있다는 점을 인지하십시오. 당신의 주장을 듣는 사람들을 설득하고 싶다면 그들의 욕구에도 호소하는 것을 고려하십시오. 청중의 원하는 바를 충족시키면 당신의 주장이 더욱 설득력 있어지고 당신의 주장에 대한 지지를 얻을 수 있습니다. 당신이 토론하는 상대방이 당신의 주장이 다른 사람들에게도 호소력이 있다는 것을 알게 되면 당신의 입장을 더 잘 이해할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>최대 산소 섭취량(VO2 Max): 무엇이며 어떻게 향상하는가</title>
      <link>https://philipjkim.github.io/posts/20250703-vo2-max-what-is-it-and-how-to-improve-it/</link>
      <pubDate>Thu, 03 Jul 2025 10:19:34 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250703-vo2-max-what-is-it-and-how-to-improve-it/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.hss.edu/health-library/move-better/vo2-max&#34;&gt;https://www.hss.edu/health-library/move-better/vo2-max&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;사람을 좋은 주자로 만드는 데는 여러 가지 요인이 있습니다. 그중 가장 중요한 것 중 하나는 최대 산소 섭취량입니다. HSS 스포츠 재활 및 퍼포먼스 팀의 운동 생리학자인 Kate Baird, MA, ACSM-CEP, CSCS는 “최대 산소 섭취량, 즉 유산소 능력을 이해하면 자신의 체력 수준을 측정하는 기준점을 갖게 됩니다.”라고 말합니다. “최대 산소 섭취량을 개선하는 것은 장수와 건강뿐만 아니라 달리기 능력에도 도움이 됩니다.”&lt;/p&gt;&#xA;&lt;h2 id=&#34;최대-산소-섭취량vo2-max이란-무엇인가요&#34;&gt;최대 산소 섭취량(VO2 Max)이란 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;생물학 수업으로 돌아가 보겠습니다. 우리가 숨을 들이쉴 때 폐는 산소를 받아들입니다. 심장과 혈액은 그 산소를 근육으로 운반하고, 이는 근육이 움직이도록 하는 화학 반응을 일으키는 연료가 됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>난치병을 겪고 있는 사람으로서, 살아있는 사람들에게 어떤 조언을 해주고 싶으신가요?</title>
      <link>https://philipjkim.github.io/posts/20250703-advice-to-the-living-as-a-dying-person/</link>
      <pubDate>Thu, 03 Jul 2025 09:58:45 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250703-advice-to-the-living-as-a-dying-person/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.quora.com/As-a-dying-person-what-is-your-advice-to-the-living&#34;&gt;https://www.quora.com/As-a-dying-person-what-is-your-advice-to-the-living&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;2009년 저는 &lt;strong&gt;교모세포종&lt;/strong&gt;이라는 4등급 뇌종양 진단을 받았습니다. 수술 후 종양 전문의는 통계가 매우 좋지 않다는 슬픈 소식을 전하며 9개월간의 치료와 6개월에서 1년 정도의 수명을 예상했습니다.&lt;/p&gt;&#xA;&lt;p&gt;저는 몇 달 후 결혼할 예정으로 약혼한 상태였습니다. 하지만 우리는 헤어졌는데, 제가 그녀를 과부로 만들고 마음을 아프게 할 이유가 없다고 생각했습니다. 그 이후로 삶에서 어떤 것도 더 이상 추구하고 싶은 마음이 없었습니다. 완전히 모든 것을 중단했던 시기였습니다.&lt;/p&gt;&#xA;&lt;p&gt;직장을 그만두고 싶었지만, 제 상사들이 편안한 스케줄로 저를 설득해서 계속 일하게 했습니다. 그들은 저에게 통계를 다시 가르쳐주기 시작했습니다. 평균 수명 1년이라는 것은 어떤 사람은 3년 후에 죽고, 어떤 사람은 6개월 후에 죽는다는 의미이며, 저는 &lt;strong&gt;장기 생존 쪽에 속할 것이라는 긍정적인 마음&lt;/strong&gt;을 가져야 한다고 했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>엔듀런스 vs 그래블 바이크 - 어떤 것을 선택해야 할까요?</title>
      <link>https://philipjkim.github.io/posts/20250702-endurance-vs-gravel-bike/</link>
      <pubDate>Wed, 02 Jul 2025 13:42:56 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250702-endurance-vs-gravel-bike/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.canyon.com/en-kr/blog-content/gravel-bike-news/endurance-vs-gravel-bike/b16042024.html&#34;&gt;https://www.canyon.com/en-kr/blog-content/gravel-bike-news/endurance-vs-gravel-bike/b16042024.html&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;엔듀런스-vs-그래블-바이크-모든-도로-영역을-깊이-탐험하기&#34;&gt;엔듀런스 vs 그래블 바이크: 모든 도로 영역을 깊이 탐험하기&lt;/h2&gt;&#xA;&lt;p&gt;엔듀런스 바이크는 전통적인 로드 레이싱 바이크와 비슷해 보일 수 있지만, 더 수직이고 편안한 라이딩 포지션을 특징으로 합니다. 안장에서 더 긴 하루를 보낼 수 있도록 설계되었으며, 디자인에 편안함뿐만 아니라 성능과 효율성을 갖추고 있다는 사실 때문에 &amp;lsquo;엔듀런스&amp;rsquo;라는 이름을 얻었습니다. Canyon 의 엔듀런스 로드 바이크 제품군은 편안함과 속도의 경계를 허물고 안장에서 더 많은 지지를 제공하도록 설계되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;그래블 바이크는 로드, 산악, 사이클로크로스 바이크의 요소를 차용합니다. 더 넓은 타이어, 견고한 프레임, 디스크 브레이크, 장비를 위한 추가 마운트를 갖추고 있어 아스팔트에서 트레일까지 다양한 지형을 다룰 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 공동 창시자 Rob Pike: Go가 잘한 것과 잘못한 것</title>
      <link>https://philipjkim.github.io/posts/20250702-what-go-got-right-and-wrong/</link>
      <pubDate>Wed, 02 Jul 2025 10:28:40 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250702-what-go-got-right-and-wrong/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://thenewstack.io/golang-co-creator-rob-pike-what-go-got-right-and-wrong/&#34;&gt;https://thenewstack.io/golang-co-creator-rob-pike-what-go-got-right-and-wrong/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gophercon.com.au/&#34;&gt;GopherCon AU&lt;/a&gt; 참석자들은 Go의 사양이 처음 작성된 도시인 호주 시드니에서 특별한 대접을 받았습니다. Go의 공동 설계자 중 한 명인 &lt;a href=&#34;https://github.com/robpike&#34;&gt;Rob Pike&lt;/a&gt;는 Go 프로그래밍 언어가 출시된 지 14주년이 되는 날을 기념하며 “무엇을 제대로 했고, 무엇을 잘못했는지” 돌아보는 강연을 했습니다.&lt;/p&gt;&#xA;&lt;p&gt;Pike는 2009년 11월 10일 웹사이트가 처음 공개되던 순간을 기억하며 “세상이 우리가 무엇을 해왔는지 알게 되었다”고 말했습니다.&lt;/p&gt;&#xA;&lt;p&gt;“14년이 지난 지금, 돌아볼 것이 많습니다.”라고 Pike는 청중에게 말하며 “더 큰 교훈들”을 탐구하겠다고 약속했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>분산 시스템 개발자를 위한 기도</title>
      <link>https://philipjkim.github.io/posts/20250701-a-prayer-for-distrubuted-systems-developers/</link>
      <pubDate>Tue, 01 Jul 2025 13:55:13 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250701-a-prayer-for-distrubuted-systems-developers/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://philipotoole.com/a-prayer-for-distributed-systems-developers/&#34;&gt;https://philipotoole.com/a-prayer-for-distributed-systems-developers/&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;16년이 넘는 시간 동안 저는 전체 스택을 오르내리며 소프트웨어를 작성했습니다. 제 경력 초기에 저는 특수 임베디드 장치를 위한 &lt;a href=&#34;http://en.wikipedia.org/wiki/Booting&#34;&gt;부트 ROM&lt;/a&gt; 소프트웨어를 작성했습니다. 이런 종류의 프로그래밍은 컴퓨터가 &lt;strong&gt;정말로&lt;/strong&gt; 어떻게 작동하는지에 대해 많은 것을 가르쳐주었습니다.&lt;/p&gt;&#xA;&lt;p&gt;대부분의 프로그래머는 컴퓨터가 어떻게 작동하는지 안다고 생각하지만, &lt;strong&gt;그들은 단지 소프트웨어가 어떻게 작동하는지 알 뿐입니다.&lt;/strong&gt; 이 프로그래머들은 &lt;a href=&#34;http://en.wikipedia.org/wiki/Interrupt_handler&#34;&gt;인터럽트 서비스 루틴&lt;/a&gt;이 어떻게 호출되는지, 컴퓨터가 두 숫자를 어떻게 더하는지, 마이크로프로세서가 다음 명령어를 RAM에 어떻게 로드하는지 정말로 알지 못합니다. 하지만 괜찮습니다. 그럴 필요도 없고, 관심도 없습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 스레드 성능 vs. 가상 스레드 vs. Kotlin 코루틴</title>
      <link>https://philipjkim.github.io/posts/20250630-java-thread-vs-virtual-thread-vs-kotlin-coroutine/</link>
      <pubDate>Mon, 30 Jun 2025 14:40:25 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250630-java-thread-vs-virtual-thread-vs-kotlin-coroutine/</guid>
      <description>&lt;p&gt;원문 (아래 리스트 순으로 번역되어 있음. Translated by Google Gemini) :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-03/Java-Thread-Performance-vs.-Virtual-Threads&#34;&gt;https://blog.behzadian.info/2024-05-03/Java-Thread-Performance-vs.-Virtual-Threads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-06/Java-Virtual-Threads-Performance-vs.-Kotlin-Coroutines&#34;&gt;https://blog.behzadian.info/2024-05-06/Java-Virtual-Threads-Performance-vs.-Kotlin-Coroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.behzadian.info/2024-05-26/Java-Thread-Performance-vs.-Virtual-Threads-Part-2&#34;&gt;https://blog.behzadian.info/2024-05-26/Java-Thread-Performance-vs.-Virtual-Threads-Part-2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;java-스레드-vs-가상-스레드-pt1&#34;&gt;Java 스레드 vs. 가상 스레드 Pt.1&lt;/h2&gt;&#xA;&lt;p&gt;면접 중에 한 면접관이 저에게 Java 스레드와 가상 스레드의 성능 차이에 대해 물었습니다. 저는 가상 스레드가 실제로는 JVM이 처리하는 경량 스레드이기 때문에 더 빠를 것이라고 답했지만, 둘 사이의 정확한 성능 차이가 궁금했습니다. 그래서 가상 스레드의 성능 향상을 확인하기 위해 간단한 벤치마크를 수행했습니다.&lt;/p&gt;&#xA;&lt;p&gt;이것은 매우 간단한 테스트입니다. 저는 매우 많은 수의 스레드와 가상 스레드를 생성하며, 각각이 완료되는 데 5초가 걸리도록 했습니다. 그런 다음 앱 실행 시간을 계산합니다. 이 벤치마크에 사용한 Java 코드는 다음과 같습니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>오마하 하이-로우 규칙 - 오마하 하이-로우 (PLO8) 플레이 방법</title>
      <link>https://philipjkim.github.io/posts/20250630-omaha-hi-lo-rules/</link>
      <pubDate>Mon, 30 Jun 2025 10:09:24 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250630-omaha-hi-lo-rules/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/poker-rules/omaha-hi-lo.htm&#34;&gt;https://www.pokernews.com/poker-rules/omaha-hi-lo.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;오마하-하이-로우-포커란-무엇인가요&#34;&gt;오마하 하이 로우 포커란 무엇인가요?&lt;/h2&gt;&#xA;&lt;p&gt;팟-리밋 오마하 (또는 &amp;ldquo;오마하 하이&amp;rdquo;) 플레이 방법을 알고 있다면, 오마하 하이-로우 플레이 방법을 배우는 데 거의 다 왔습니다.&lt;/p&gt;&#xA;&lt;p&gt;이름에서 알 수 있듯이 오마하 하이-로우는 오마하 포커의 &amp;ldquo;스플릿-팟&amp;rdquo; 버전으로, 플레이어는 팟의 &amp;ldquo;하이&amp;quot;와 &amp;ldquo;로우&amp;rdquo; 두 절반을 놓고 경쟁합니다. 오마하 하이-로우는 일반적으로 고정 리밋 베팅으로 플레이되며, 종종 &lt;a href=&#34;https://www.pokernews.com/poker-rules/horse.htm&#34;&gt;H.O.R.S.E.&lt;/a&gt; (오마하 하이-로우가 &amp;ldquo;O&amp;quot;인 경우) 또는 인기 있는 8-게임 믹스와 같은 &amp;ldquo;믹스 게임&amp;rdquo; 형식으로 나타납니다.&lt;/p&gt;&#xA;&lt;p&gt;팟-리밋 및 노-리밋 버전의 오마하 하이-로우도 인기가 많으며, 특히 온라인 현금 게임이나 토너먼트로 인기가 많습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>오마하 소개 - 가장 운이 좋은 사람이 항상 이길까?</title>
      <link>https://philipjkim.github.io/posts/20250626-introduction-to-omaha/</link>
      <pubDate>Thu, 26 Jun 2025 09:02:35 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250626-introduction-to-omaha/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.pokernews.com/strategy/omaha-luckiest-always-win-2086.htm&#34;&gt;https://www.pokernews.com/strategy/omaha-luckiest-always-win-2086.htm&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;소개&#34;&gt;소개&lt;/h2&gt;&#xA;&lt;p&gt;저는 최근에 $2/$4 리밋 오마하 하이 게임을 플레이했고, 나중에 그 게임의 다른 플레이어와 그것에 대해 이야기했습니다. 우리의 토론 주제는 낮은 레벨의 리밋 오마하가 온라인에서 이기기 가장 어려운 게임 중 하나인지 여부였습니다. 우리는 그 세션에서 각 핸드의 승자가 거의 예외 없이 플랍에서 또는 그 이전에 한참 뒤처져 있었다는 것을 알게 되었기 때문에 이 질문을 했습니다. 플랍, 턴, 리버의 카드는 프리미엄 핸드로 강하게 베팅하는 플레이어를 &amp;ldquo;뽑아내는&amp;rdquo; 것처럼 보였습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2025년 AI 프롬프트 엔지니어링: 무엇이 효과적이고 무엇이 그렇지 않은가</title>
      <link>https://philipjkim.github.io/posts/20250625-ai-prompt-engineering-in-2025/</link>
      <pubDate>Wed, 25 Jun 2025 20:03:14 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-ai-prompt-engineering-in-2025/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.lennysnewsletter.com/p/ai-prompt-engineering-in-2025-sander-schulhoff&#34;&gt;https://www.lennysnewsletter.com/p/ai-prompt-engineering-in-2025-sander-schulhoff&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/eKuFqQKYRrA?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;이-에피소드에서-배우게-될-내용&#34;&gt;이 에피소드에서 배우게 될 내용&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;가장 효과적인 5가지 프롬프트 엔지니어링 기법&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;역할 프롬프트(role prompting)&amp;rdquo; 및 AI 위협이 더 이상 작동하지 않는 이유 및 대신해야 할 일&lt;/li&gt;&#xA;&lt;li&gt;두 가지 유형의 프롬프트 엔지니어링: 대화형 및 제품/시스템 프롬프트&lt;/li&gt;&#xA;&lt;li&gt;프롬프트 인젝션 및 AI 레드 팀에 대한 입문서 - 여전히 최고 모델을 속이는 실제 탈옥(jailbreak) 전술 포함&lt;/li&gt;&#xA;&lt;li&gt;AI 에이전트와 로봇이 다음 주요 보안 위협이 될 이유&lt;/li&gt;&#xA;&lt;li&gt;AI 레드 팀 및 프롬프트 엔지니어링을 시작하는 방법&lt;/li&gt;&#xA;&lt;li&gt;AI 제품에 적용할 수 있는 실용적인 방어책&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;몇-가지-핵심-내용&#34;&gt;몇 가지 핵심 내용&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;프롬프트 엔지니어링은 여전히 매우 활발하며 그 어느 때보다 중요합니다.&lt;/strong&gt; 오히려 기업들이 사용자 대면 기능 및 핵심 기능을 구동하기 위해 LLM에 의존함에 따라 더욱 중요해졌습니다. Sander는 프롬프트 품질이 AI 성능을 좌우할 수 있는 방법, 특히 제품 전반에 걸쳐 확장될 때의 중요성을 설명합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;프롬프트 엔지니어링에는 &amp;ldquo;대화형&amp;quot;과 &amp;ldquo;제품 중심형&amp;quot;이라는 두 가지 명확한 유형이 있습니다.&lt;/strong&gt; 대부분의 사람들은 프롬프팅을 ChatGPT와 채팅하는 것으로 생각하지만, Sander는 진정한 영향력은 제품 내에서 고성능 프롬프트를 만드는 것에서 온다고 설명합니다. 이러한 프롬프트는 대규모로 사용되고, 수백만 번 실행되며, 프로덕션 코드처럼 강화되고 최적화되어야 합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;ldquo;Few-shot 프롬프팅&amp;quot;은 정확도를 0%에서 90%로 향상시킬 수 있습니다.&lt;/strong&gt; 가장 강력한 기술 중 하나는 모델에 정확히 원하는 것의 예시를 보여주는 것입니다. 이를 few-shot 프롬프팅이라고 합니다. Sander는 이 단일 기술이 몇 가지 예시-레이블 쌍을 추가하는 것만으로 의료 코딩 사용 사례를 완전한 실패에서 거의 완벽한 결과로 바꾸어 놓았음을 공유합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할 프롬프트(예: &amp;ldquo;당신은 수학 교수입니다&amp;hellip;&amp;quot;)는 대부분의 사람들이 생각하는 것과 달리 대체로 비효율적입니다.&lt;/strong&gt; Sander는 역할 프롬프트가 어조나 글쓰기 스타일에는 도움이 될 수 있지만, 정확도를 높이는 데는 거의 효과가 없음을 보여주는 연구를 분석합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;분해(decomposition) 및 자기 비판(self-criticism)과 같은 고급 기술은 더 나은 성능을 끌어냅니다.&lt;/strong&gt; Sander는 모델에 먼저 문제를 하위 문제로 분해하거나(분해) 자신의 답변을 비판하도록 요청하는 것이 어떻게 더 똑똑하고 정확한 결과로 이어질 수 있는지 설명합니다. 이는 다단계 추론이 필요한 에이전트와 같은 설정에서 특히 가치가 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;컨텍스트(&amp;ldquo;추가 정보&amp;rdquo;)는 과소평가되어 있지만 엄청난 영향을 미칩니다.&lt;/strong&gt; 모델에 더 관련성 있는 배경 정보를 제공하는 것만으로도 성능을 크게 향상시킬 수 있습니다. Sander는 특히 올바른 형식과 순서로 포함되었을 때 추가 데이터(예: 이력, 연구 논문 또는 과거 상호 작용)를 포함하는 것이 프롬프트의 성공 여부를 결정했던 사례를 공유합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;프롬프트 인젝션은 실제적이고 위험하며 전통적인 의미에서는 해결 불가능합니다.&lt;/strong&gt; 우리는 공격자들이 어떻게 LLM을 &amp;ldquo;탈옥&amp;quot;시켜 유해하거나 제한되거나 의도치 않은 응답을 출력하도록 속이는지 살펴봅니다. 이러한 공격은 종종 &amp;ldquo;X를 하지 마시오&amp;quot;와 같은 전통적인 방어 수단을 우회합니다. 그리고 Sander (심지어 Sam Altman)에 따르면 만능 해결책은 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sander는 세계 최대 규모의 AI 레드 팀 대회인 HackAPrompt를 운영합니다.&lt;/strong&gt; 60만 개 이상의 프롬프트가 수집되었고 OpenAI 및 Anthropic와의 지속적인 협력을 통해 Sander의 플랫폼은 실제 LLM 스트레스 테스트의 중심에 있습니다. 이는 크라우드소싱 보안과 게임 메커니즘의 독특한 조합이며, 연구소들이 AI 안전에 대해 생각하는 방식을 형성하고 있습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;에이전트 기반 AI 시스템은 챗봇보다 공격에 훨씬 더 취약합니다.&lt;/strong&gt; 오늘날의 프롬프트 인젝션에 대한 우려는 시작에 불과합니다. AI 에이전트가 항공편을 예약하고, 이메일을 보내고, 심지어 인간형으로 돌아다니기 시작하면 위험은 배가됩니다. Sander는 에이전트 보안이 다음 개척지인 이유와 대부분의 팀이 준비되지 않은 이유를 공유합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;ldquo;할머니&amp;rdquo; 트릭, 오타, 난독화는 여전히 최첨단 모델을 무너뜨립니다.&lt;/strong&gt; 가장 발전된 LLM조차도 놀랍도록 간단한 해킹에 속을 수 있습니다. Sander는 감정 조작(예: &amp;ldquo;할머니가 해주던 것처럼 말해줘&amp;rdquo;), 인코딩된 입력, 창의적인 문구를 포함하여 여전히 작동하는 탈옥 기술을 설명합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;대부분의 회사는 손상된 방어책을 사용하고 있습니다.&lt;/strong&gt; Sander는 &amp;ldquo;프롬프트 분리&amp;quot;나 &amp;ldquo;악의적인 입력 무시&amp;quot;와 같은 문구를 추가하는 것이 왜 작동하지 않는지 분석합니다. 가드레일은 쉽게 우회되며, 현재 분류기는 인코딩된 공격을 잡아낼 지능이 부족한 경우가 많습니다. 보안의 미래는 모델 수준이어야 하며, 덧붙이는 방식이 아니어야 합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;위험에도 불구하고 AI의 잠재력은 엄청나며 추구할 가치가 있습니다.&lt;/strong&gt; Sander는 보안을 중요하게 생각하지만, 종말론자는 아닙니다. 그는 우리가 책임감 있게 구축한다면 AI가 생명을 구하고(특히 의료 분야에서), 생산성을 높이며, 실제 문제를 해결할 것이라고 믿습니다. 발전을 멈추는 것이 답이 아니라, 더 스마트하고 안전한 개발이 답입니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Sander Schulhoff&lt;/strong&gt;는 원조 프롬프트 엔지니어입니다. 그는 인터넷 최초의 프롬프트 엔지니어링 가이드를 만들었고(ChatGPT 출시 두 달 전), 최근에는 OpenAI, Microsoft, Google, Princeton, Stanford와 공동 저술하여 1,500개 이상의 학술 논문을 분석하고 200개 이상의 프롬프트 기법을 다룬 프롬프트 엔지니어링에 대한 가장 포괄적인 연구를 수행했습니다. 또한 그는 OpenAI와 협력하여 최초이자 최대 규모의 AI 레드 팀 대회인 HackAPrompt를 운영하고 있으며, 이는 가장 최첨단 프롬프트 인젝션 기법(즉, LLM이 하지 말아야 할 일을 하도록 만드는 방법)을 발견하는 데 도움을 줍니다. Sander는 Maven에서 AI 레드 팀을 가르치고, AI 회사에 보안 자문을 제공하며, 수백만 명에게 가장 최첨단 프롬프트 엔지니어링 기법을 교육했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 23: 성능 및 생산성 향상 (2024년 9월)</title>
      <link>https://philipjkim.github.io/posts/20250625-java-23-new-features/</link>
      <pubDate>Wed, 25 Jun 2025 15:27:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-java-23-new-features/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.hungrycoders.com/blog/java-9-23-unleashed-the-developers-cheat-sheet-to-modern-java&#34;&gt;https://www.hungrycoders.com/blog/java-9-23-unleashed-the-developers-cheat-sheet-to-modern-java&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;주요-기능&#34;&gt;주요 기능&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;패턴, instanceof, switch에서의 Primitive Types (미리보기): 패턴 매칭을 기본 타입으로 확장하여 상용구 코드(boilerplate code)를 줄입니다.&lt;/li&gt;&#xA;&lt;li&gt;Scoped Values (세 번째 미리보기): 제한된 수명을 가진 변수를 도입하여 메모리 관리를 개선합니다.&lt;/li&gt;&#xA;&lt;li&gt;Structured Concurrency (세 번째 미리보기): 구조화된 API를 통해 스레드 관리를 강화하여 동시성 처리를 단순화합니다.&lt;/li&gt;&#xA;&lt;li&gt;Markdown Documentation Comments: Javadoc에 Markdown 지원을 추가하여 문서의 가독성을 향상시킵니다.&lt;/li&gt;&#xA;&lt;li&gt;ZGC를 기본 가비지 컬렉터로: 세대별 Z Garbage Collector (ZGC)가 기본값으로 설정되어 성능과 응답성을 향상시킵니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;개요-요약&#34;&gt;개요 요약&lt;/h2&gt;&#xA;&lt;p&gt;Java 23은 성능 및 개발자 생산성 향상 추세를 이어갑니다. 기본 타입을 지원하는 패턴 매칭을 개선하고, 더 안전한 메모리 관리를 위해 Scoped Values를 도입하며, 구조화된 API를 통해 동시성을 단순화합니다. Markdown 문서화는 개발자 경험을 개선하고, ZGC가 기본 컬렉터가 되어 더 나은 성능과 낮은 지연 시간을 보장합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>사이클링에서 이상적인 케이던스 설명: 페달링이 너무 빠르거나 느린가요?</title>
      <link>https://philipjkim.github.io/posts/20250625-the-ideal-cadence-for-cycling-explained/</link>
      <pubDate>Wed, 25 Jun 2025 14:55:36 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-the-ideal-cadence-for-cycling-explained/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://www.cyclingweekly.com/fitness/why-amateurs-shouldnt-try-to-pedal-like-chris-froome-191779&#34;&gt;https://www.cyclingweekly.com/fitness/why-amateurs-shouldnt-try-to-pedal-like-chris-froome-191779&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;자전거를 처음 배우고 나서 균형 잡기나 핸들 조작과 함께 크게 생각해 본 적이 없을 수도 있지만, 라이딩 시 &lt;strong&gt;사이클링 케이던스&lt;/strong&gt;는 사이클링 &lt;strong&gt;성능에 상당한 영향&lt;/strong&gt;을 미칠 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;최대 파워 생산부터 장거리 지구력 노력, 심지어 부상 예방에 이르기까지 페달을 돌리는 속도에 주의를 기울여야 할 많은 이유가 있습니다. 게다가 세션에서 RPM을 다양하게 섞는 훈련 이점은 당신을 놀라게 할 수도 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;이 지표에는 처음 생각했던 것보다 훨씬 더 많은 것이 있으며, 잠재적으로 오해의 소지가 있는 연구도 많습니다. 따라서 이상적인 사이클링 케이던스와 개선 방법에 대해 알아야 할 모든 세부 사항을 자세히 살펴보겠습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI를 이용한 게임 디컴파일 개발 여정</title>
      <link>https://philipjkim.github.io/posts/20250625-development-journey-on-game-decompilation-using-ai/</link>
      <pubDate>Wed, 25 Jun 2025 14:35:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250625-development-journey-on-game-decompilation-using-ai/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://macabeus.medium.com/game-decompilation-using-ai-4d47b65f8852&#34;&gt;https://macabeus.medium.com/game-decompilation-using-ai-4d47b65f8852&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;안녕하세요, 저는 &lt;a href=&#34;https://github.com/macabeus&#34;&gt;Macabeus&lt;/a&gt;입니다. 이 글에서는 제가 오래된 게임을 디컴파일하기 위해 AI를 사용한 개발 여정을 공유하고, 이 재미있는 분야에서의 개인적인 연구를 탐색해 보려고 합니다!&lt;/p&gt;&#xA;&lt;h2 id=&#34;게임-디컴파일이란&#34;&gt;게임 디컴파일이란?&lt;/h2&gt;&#xA;&lt;p&gt;간단히 말해, &lt;em&gt;디컴파일&lt;/em&gt;은 저수준 코드를 고수준 코드로 변환하는 과정입니다. 예를 들어, 어셈블리에서 C로 변환하는 것입니다.&lt;/p&gt;&#xA;&lt;p&gt;IDA Pro나 Ghidra와 같은 유명한 리버스 엔지니어링 도구들을 통해 이를 알고 계실 수도 있습니다. 하지만 이 글에서 제가 &lt;em&gt;디컴파일&lt;/em&gt;이라고 언급할 때는, &lt;em&gt;일치하는 디컴파일(matching decompilation)&lt;/em&gt; 에 대해 이야기하는 것입니다. 이 더 구체적인 용어는 컴파일했을 때 대상 어셈블리와 &lt;strong&gt;정확히&lt;/strong&gt; 일치하면서도, 인간이 읽을 수 있는(human-readable) 고수준 코드를 작성하고자 함을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>지금 바로 사용할 수 있는 최고의 AI 코딩 도구</title>
      <link>https://philipjkim.github.io/posts/20250624-the-best-ai-coding-tools-you-can-use-right-now/</link>
      <pubDate>Tue, 24 Jun 2025 19:52:16 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250624-the-best-ai-coding-tools-you-can-use-right-now/</guid>
      <description>&lt;p&gt;원문: &lt;a href=&#34;https://spectrum.ieee.org/best-ai-coding-tools&#34;&gt;https://spectrum.ieee.org/best-ai-coding-tools&lt;/a&gt; (Translated by Google Gemini)&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;AI 기반 &lt;a href=&#34;https://spectrum.ieee.org/tag/software-development&#34;&gt;소프트웨어 개발&lt;/a&gt; 도구는 빠르게 발전하고 있습니다. 향상된 &lt;a href=&#34;https://spectrum.ieee.org/tag/autocomplete&#34;&gt;자동 완성&lt;/a&gt;으로 시작했던 것이 애플리케이션을 작성하고, 문제를 디버깅하고, 전체 코드베이스를 관리할 수 있는(또는 적어도 시도할 수 있는) &lt;a href=&#34;https://spectrum.ieee.org/tag/ai-agents&#34;&gt;AI 에이전트&lt;/a&gt;로 확장되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;소프트웨어 개발 회사 Frescher Southern LTD의 설립자이자 수석 엔지니어인 &lt;a href=&#34;https://www.linkedin.com/in/chasing/&#34;&gt;Josh Knowles&lt;/a&gt;는 “이것은 놀라울 정도로 빨랐습니다. 우리는 지금 위상 변화와 같은 것을 겪고 있습니다.”라고 말합니다.&lt;/p&gt;&#xA;&lt;p&gt;이러한 변화는 이 새로운 분야의 왕이 되기 위해 경쟁하는 AI 기반 코딩 도구들을 낳았습니다. 선도적인 도구 중 일부는 불과 몇 년 전에는 존재하지도 않던 &lt;a href=&#34;https://spectrum.ieee.org/tag/startups&#34;&gt;스타트업&lt;/a&gt;에서 나왔습니다. 그러나 거대 기술 기업들도 가만히 있지 않습니다. 다른 최고의 옵션들은 &lt;a href=&#34;https://spectrum.ieee.org/tag/microsoft&#34;&gt;Microsoft&lt;/a&gt;와 같은 기존 플레이어와 &lt;a href=&#34;https://spectrum.ieee.org/tag/anthropic&#34;&gt;Anthropic&lt;/a&gt;과 같은 자금력 있는 AI 연구소에서 제공됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>사이클링 지구력을 키우는 방법: 더 멀리, 더 빨리 달리기 위한 7가지 팁</title>
      <link>https://philipjkim.github.io/posts/20250624-how-to-improve-your-cycling-endurance-in-limited-time/</link>
      <pubDate>Tue, 24 Jun 2025 10:16:23 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250624-how-to-improve-your-cycling-endurance-in-limited-time/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.bikeradar.com/advice/fitness-and-training/cycling-endurance&#34;&gt;https://www.bikeradar.com/advice/fitness-and-training/cycling-endurance&lt;/a&gt; (Translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;지구력 사이클링은 단순히 안장에 오래 앉아 있는 것 이상입니다. 제대로 훈련하면 더 먼 거리를 더 빨리 달릴 수 있고, 이는 모든 종류의 라이딩에 도움이 됩니다. 여기 지구력 사이클링 훈련을 최대한 활용하고 사이클링 지구력을 키우기 위한 최고의 팁들이 있습니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-꾸준히-타세요&#34;&gt;1. 꾸준히 타세요&lt;/h3&gt;&#xA;&lt;p&gt;지구력 향상은 하룻밤 사이에 이루어지지 않습니다. 사이클링 코치인 릭 스턴(Ric Stern)은 &amp;ldquo;일관성은 왕&amp;quot;이라고 말합니다. &amp;ldquo;일주일에 한 번 장거리 라이딩을 하는 것보다, 일주일에 3~4번 짧은 라이딩을 하는 것이 훨씬 더 효과적일 것&amp;rdquo; 이라고 그는 덧붙입니다. 신체가 훈련에 적응하려면 규칙적인 훈련 자극이 필요합니다. 일주일에 여러 번 타면 심혈관계, 에너지 시스템 및 근육이 더 효율적으로 작동하도록 자극합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>현재 나의 LLM 코드 생성 워크플로우</title>
      <link>https://philipjkim.github.io/posts/20250623-my-llm-codegen-workflow-atm/</link>
      <pubDate>Mon, 23 Jun 2025 17:33:07 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250623-my-llm-codegen-workflow-atm/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/&#34;&gt;https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;요약:&lt;/strong&gt; 스펙을 브레인스토밍하고, 계획을 계획한 다음, LLM 코드 생성을 사용하여 실행합니다. 개별적인 루프. 그리고 마법&lt;/p&gt;&#xA;&lt;p&gt;저는 LLM을 사용하여 아주 많은 소규모 제품을 만들어 왔습니다. 재미있고 유용했지만, 엄청난 시간을 낭비할 수 있는 함정들이 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;얼마 전 한 친구가 제가 LLM을 어떻게 사용하여 소프트웨어를 작성하는지 물었습니다. 저는 &amp;ldquo;이런. 시간이 얼마나 있으신데요!&amp;ldquo;라고 생각했고, 그래서 이 글을 쓰게 되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;(추신: AI를 싫어하는 분이라면 맨 끝으로 스크롤하세요)&lt;/p&gt;&#xA;&lt;p&gt;저는 많은 개발자 친구들과 이 주제에 대해 이야기하는데, 우리 모두는 어느 방향으로든 약간의 변형을 가미한 비슷한 접근 방식을 가지고 있습니다. 여기 저의 워크플로우가 있습니다. 이것은 저 자신의 작업, 친구들과의 대화(Nikete, Kanno, Obra, Kris, Erik 고마워요), 그리고 여러 끔찍한 인터넷 나쁜 곳들에서 공유된 많은 모범 사례들을 바탕으로 만들어졌습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>에단 몰릭이 말하는 AI와의 &#34;공동 지능&#34;을 위한 4가지 규칙</title>
      <link>https://philipjkim.github.io/posts/20250623-the-four-rules-of-co-intelligence-with-ai/</link>
      <pubDate>Mon, 23 Jun 2025 13:09:41 +0900</pubDate>
      <guid>https://philipjkim.github.io/posts/20250623-the-four-rules-of-co-intelligence-with-ai/</guid>
      <description>&lt;p&gt;&lt;em&gt;원문: &lt;a href=&#34;https://www.forbes.com/sites/peterhigh/2024/05/07/ethan-mollick-on-the-four-rules-of-co-intelligence-with-ai/&#34;&gt;https://www.forbes.com/sites/peterhigh/2024/05/07/ethan-mollick-on-the-four-rules-of-co-intelligence-with-ai/&lt;/a&gt; (translated by Google Gemini)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;에단 몰릭은 펜실베이니아 대학교 와튼 스쿨의 부교수로, 기업가 정신에서의 혁신을 연구하고 가르치며 인공지능이 업무와 교육에 미치는 영향을 분석합니다. 연구와 강의 외에도, 에단은 게임, 시뮬레이션, AI를 사용하여 교육을 민주화하려는 와튼 인터랙티브(Wharton Interactive)를 이끌고 있습니다. 학계에 몸담기 전에는 스타트업을 공동 창업했으며, 현재는 기업가와 다른 경영진들의 자문 역할을 하고 있습니다. 에단의 최신 저서로는 &amp;lsquo;공동 지능: AI와 함께 생활하고 일하기(Co-Intelligence: Living and Working with AI)&amp;lsquo;가 있습니다. 또한 그는 13만 4천 명 이상의 팔로워를 보유한 인기 블로그 &amp;lsquo;OneUsefulThing&amp;rsquo;의 저자이기도 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://philipjkim.github.io/dev/hoola-calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://philipjkim.github.io/dev/hoola-calculator/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;ko&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xA;    &lt;title&gt;훌라 카드 합계 계산기&lt;/title&gt;&#xA;        &lt;style&gt;&#xA;        body {&#xA;            font-family: sans-serif;&#xA;            display: flex;&#xA;            flex-direction: column;&#xA;            align-items: center;&#xA;            padding: 20px;&#xA;        }&#xA;        h1 {&#xA;            margin-bottom: 20px;&#xA;            font-size: 24px;&#xA;        }&#xA;        .card-buttons {&#xA;            /* 수정된 부분: 3개씩 한 줄에 표시되도록 설정 */&#xA;            display: grid;&#xA;            grid-template-columns: repeat(3, 1fr); /* 항상 3개의 열 */&#xA;            gap: 10px;&#xA;            margin-bottom: 20px;&#xA;            width: 100%; /* 부모 너비에 맞춤 */&#xA;            max-width: 600px; /* 최대 너비 유지 */&#xA;            box-sizing: border-box; /* 패딩과 보더가 너비에 포함되도록 */&#xA;            padding: 0 10px; /* 좌우 잘림 방지를 위해 약간의 패딩 추가 */&#xA;        }&#xA;        .card-button {&#xA;            padding: 15px;&#xA;            border: 1px solid #ccc;&#xA;            border-radius: 8px;&#xA;            /* background-color: #f0f0f0; */&#xA;            text-align: center;&#xA;            cursor: pointer;&#xA;            font-size: 18px;&#xA;            box-sizing: border-box;&#xA;            /* 최소 너비 제한을 없애고 1fr로만 관리하여 유연하게 */&#xA;            min-width: 0; /* flex/grid 아이템의 기본 min-width를 재정의 */&#xA;        }&#xA;        .card-button.selected {&#xA;            background-color: #ddd;&#xA;        }&#xA;        .selected-cards {&#xA;            margin-bottom: 15px;&#xA;            font-size: 16px;&#xA;        }&#xA;        .result {&#xA;            font-weight: bold;&#xA;            font-size: 20px;&#xA;            margin-bottom: 20px;&#xA;        }&#xA;        button {&#xA;            padding: 12px 25px;&#xA;            border: none;&#xA;            border-radius: 8px;&#xA;            background-color: #7d601c;&#xA;            /* color: white; */&#xA;            cursor: pointer;&#xA;            font-size: 18px;&#xA;        }&#xA;        button:hover {&#xA;            background-color: #4f3d12;&#xA;        }&#xA;        /* 추가: 화면이 매우 좁을 경우를 위한 미디어 쿼리 (필요시) */&#xA;        @media (max-width: 380px) { /* 더 좁은 화면 (예: 아이폰 SE1) */&#xA;            .card-buttons {&#xA;                gap: 5px; /* 버튼 간격 줄이기 */&#xA;                padding: 0 5px; /* 패딩도 줄이기 */&#xA;            }&#xA;            .card-button {&#xA;                font-size: 16px; /* 폰트 사이즈 줄이기 */&#xA;                padding: 10px; /* 패딩 줄이기 */&#xA;            }&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;훌라 카드 합계 계산기&lt;/h1&gt;&#xA;    &lt;div class=&#34;card-buttons&#34;&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;1&#34; data-alt-value=&#34;14&#34;&gt;A&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;2&#34;&gt;2&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;3&#34;&gt;3&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;4&#34;&gt;4&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;5&#34;&gt;5&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;6&#34;&gt;6&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;7&#34;&gt;7&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;8&#34;&gt;8&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;9&#34;&gt;9&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;10&#34;&gt;10&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;11&#34;&gt;J&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;12&#34;&gt;Q&lt;/button&gt;&#xA;        &lt;button class=&#34;card-button&#34; data-value=&#34;13&#34;&gt;K&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;selected-cards&#34;&gt;선택한 카드: &lt;/div&gt;&#xA;    &lt;div class=&#34;result&#34;&gt;총합: &lt;/div&gt;&#xA;    &lt;button id=&#34;reset-button&#34;&gt;초기화&lt;/button&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        const cardButtons = document.querySelectorAll(&#39;.card-button&#39;);&#xA;        const selectedCardsDiv = document.querySelector(&#39;.selected-cards&#39;);&#xA;        const resultDiv = document.querySelector(&#39;.result&#39;);&#xA;        const resetButton = document.getElementById(&#39;reset-button&#39;);&#xA;        let selectedCards = [];&#xA;&#xA;        cardButtons.forEach(button =&gt; {&#xA;            button.addEventListener(&#39;click&#39;, function() {&#xA;                const value = parseInt(this.dataset.value);&#xA;                const altValue = this.dataset.altValue ? parseInt(this.dataset.altValue) : null;&#xA;                selectedCards.push({ value: value, altValue: altValue, display: this.textContent });&#xA;                this.classList.add(&#39;selected&#39;);&#xA;                updateDisplay();&#xA;                calculateSum();&#xA;            });&#xA;        });&#xA;&#xA;        resetButton.addEventListener(&#39;click&#39;, function() {&#xA;            selectedCards = [];&#xA;            cardButtons.forEach(button =&gt; button.classList.remove(&#39;selected&#39;));&#xA;            updateDisplay();&#xA;            calculateSum();&#xA;        });&#xA;&#xA;        function updateDisplay() {&#xA;            selectedCardsDiv.textContent = &#39;선택한 카드: &#39; + selectedCards.map(card =&gt; card.display).join(&#39;, &#39;);&#xA;        }&#xA;&#xA;        function calculateSum() {&#xA;            if (selectedCards.length === 0) {&#xA;                resultDiv.textContent = &#39;총합: &#39;;&#xA;                return;&#xA;            }&#xA;&#xA;            const hasAce = selectedCards.some(card =&gt; card.display === &#39;A&#39;);&#xA;&#xA;            if (hasAce) {&#xA;                let sumWithAas1 = 0;&#xA;                let sumWithAas14 = 0;&#xA;                selectedCards.forEach(card =&gt; {&#xA;                    sumWithAas1 += (card.display === &#39;A&#39; ? 1 : card.value);&#xA;                    sumWithAas14 += (card.display === &#39;A&#39; ? 14 : card.value);&#xA;                });&#xA;                resultDiv.textContent = &#39;총합: &#39; + sumWithAas1 + &#39; / &#39; + sumWithAas14;&#xA;            } else {&#xA;                const totalSum = selectedCards.reduce((sum, card) =&gt; sum + card.value, 0);&#xA;                resultDiv.textContent = &#39;총합: &#39; + totalSum;&#xA;            }&#xA;        }&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://philipjkim.github.io/dev/polymer-image-slider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://philipjkim.github.io/dev/polymer-image-slider/</guid>
      <description>&lt;!doctype html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;  &lt;title&gt;polymer-image-slider demo&lt;/title&gt;&#xA;&#xA;  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, minimum-scale=1.0, initial-scale=1, user-scalable=yes&#34;&gt;&#xA;  &lt;meta name=&#34;mobile-web-app-capable&#34; content=&#34;yes&#34;&gt;&#xA;  &lt;meta name=&#34;apple-mobile-web-app-capable&#34; content=&#34;yes&#34;&gt;&#xA;&#xA;  &lt;script src=&#34;bower_components/webcomponentsjs/webcomponents-lite.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;link rel=&#34;shortcut icon&#34; href=&#34;./favicon.ico&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/polymer/polymer.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/iron-demo-helpers/demo-snippet.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/iron-demo-helpers/demo-pages-shared-styles.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/paper-styles/color.html&#34;&gt;&#xA;  &lt;link rel=&#34;import&#34; href=&#34;bower_components/polymer-image-slider/polymer-image-slider.html&#34;&gt;&#xA;  &lt;style is=&#34;custom-style&#34; include=&#34;demo-pages-shared-styles&#34;&gt;&#xA;    .centered:not([style-scope]):not(.style-scope) {&#xA;      max-width: 100%;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body unresolved&gt;&#xA;&lt;div class=&#34;vertical-section-container centered&#34;&gt;&#xA;  &lt;h3&gt;paper-sliders have &lt;code&gt;images&lt;/code&gt; attribute,&#xA;    and dynamically change images by modifying the attribute value.&lt;/h3&gt;&#xA;  &lt;demo-snippet&gt;&#xA;    &lt;template&gt;&#xA;      &lt;!--&#xA;      max-width is adjustable via CSS variable `--image-slider-max-width`.&#xA;      --&gt;&#xA;      &lt;style is=&#34;custom-style&#34;&gt;&#xA;        #slider {&#xA;          --image-slider-max-width: 300px;&#xA;        }&#xA;      &lt;/style&gt;&#xA;&#xA;      &lt;!--&#xA;      Use single-quotes for `images` attribute - the value should be a valid JSON string.&#xA;&#xA;      &lt;image-slider id=&#34;slider&#34; images=&#39;[&#34;1.jpg&#34;,&#34;2.jpg&#34;]&#39;&gt;&lt;/image-slider&gt;&#xA;      --&gt;&#xA;      &lt;image-slider id=&#34;slider&#34; images=&#39;[&#34;1.jpg&#34;,&#34;2.jpg&#34;]&#39;&gt;&lt;/image-slider&gt;&#xA;&#xA;      &lt;!-- Manipulation using JS --&gt;&#xA;      &lt;button id=&#34;btn-change&#34; onclick=&#34;changeImages();&#34;&gt;Change images&lt;/button&gt;&#xA;      &lt;button id=&#34;btn-bullet&#34; onclick=&#34;toggleBullet();&#34;&gt;Show/hide bullets&lt;/button&gt;&#xA;&#xA;      &lt;script&gt;&#xA;        function changeImages() {&#xA;          var imageSet1 = [&#34;1.jpg&#34;,&#34;2.jpg&#34;];&#xA;          var imageSet2 = [&#34;3.jpg&#34;,&#34;4.jpg&#34;,&#34;5.jpg&#34;];&#xA;          var images = document.querySelector(&#39;#slider&#39;).images;&#xA;          if (images.length == 2) {&#xA;            document.querySelector(&#39;#slider&#39;).images = imageSet2;&#xA;          } else {&#xA;            document.querySelector(&#39;#slider&#39;).images = imageSet1;&#xA;          }&#xA;        }&#xA;&#xA;        function toggleBullet() {&#xA;          var noBullets = document.querySelector(&#39;#slider&#39;).noBullets;&#xA;          document.querySelector(&#39;#slider&#39;).noBullets = !noBullets;&#xA;        }&#xA;      &lt;/script&gt;&#xA;    &lt;/template&gt;&#xA;  &lt;/demo-snippet&gt;&#xA;&#xA;  &lt;h3&gt;If you want to show images in actual size,&#xA;    set &lt;code&gt;--image-slider-max-width&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;.&lt;/h3&gt;&#xA;  &lt;demo-snippet&gt;&#xA;    &lt;template&gt;&#xA;      &lt;style is=&#34;custom-style&#34;&gt;&#xA;        #slider2 {&#xA;          --image-slider-max-width: none;&#xA;        }&#xA;      &lt;/style&gt;&#xA;&#xA;      &lt;image-slider id=&#34;slider2&#34; images=&#39;[&#34;1.jpg&#34;,&#34;2.jpg&#34;]&#39;&gt;&lt;/image-slider&gt;&#xA;    &lt;/template&gt;&#xA;  &lt;/demo-snippet&gt;&#xA;&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://philipjkim.github.io/dev/vue2-flip-countdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://philipjkim.github.io/dev/vue2-flip-countdown/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=&#34;utf-8&#34; /&gt;&#xA;    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34; /&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34; /&gt;&#xA;    &lt;link rel=&#34;icon&#34; href=&#34;./favicon.ico&#34; /&gt;&#xA;    &lt;title&gt;Demo: vue2-flip-countdown&lt;/title&gt;&#xA;    &lt;link href=&#34;./css/app.30f70602.css&#34; rel=&#34;preload&#34; as=&#34;style&#34; /&gt;&#xA;    &lt;link href=&#34;./js/app.4cf28f45.js&#34; rel=&#34;preload&#34; as=&#34;script&#34; /&gt;&#xA;    &lt;link href=&#34;./js/chunk-vendors.0e314190.js&#34; rel=&#34;preload&#34; as=&#34;script&#34; /&gt;&#xA;    &lt;link href=&#34;./css/app.30f70602.css&#34; rel=&#34;stylesheet&#34; /&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;noscript&#xA;      &gt;&lt;strong&#xA;        &gt;We&#39;re sorry but demo doesn&#39;t work properly without JavaScript enabled.&#xA;        Please enable it to continue.&lt;/strong&#xA;      &gt;&lt;/noscript&#xA;    &gt;&#xA;    &lt;div id=&#34;app&#34;&gt;&lt;/div&gt;&#xA;    &lt;script src=&#34;./js/chunk-vendors.0e314190.js&#34;&gt;&lt;/script&gt;&#xA;    &lt;script src=&#34;./js/app.4cf28f45.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
